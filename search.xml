<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android Studio活动</title>
    <url>/2022/05/21/Android-Studio%E6%8E%A2%E7%A9%B6%E6%B4%BB%E5%8A%A8/</url>
    <content><![CDATA[<p>活动(Activity)是最容易吸引用户的地方，它是一种包含用户界面的组件，主要用于和用户进行交互。</p>
<h2 id="活动的用法"><a href="#活动的用法" class="headerlink" title="活动的用法"></a>活动的用法</h2><h3 id="创建活动"><a href="#创建活动" class="headerlink" title="创建活动"></a>创建活动</h3><p>新建项目的前面部分还是和以前一样,项目名称为ActivityTest，但在Add an Activity to Mobile这一步选择Add No Activity.  <br>项目创建成功后，我们将项目结构改为project模式，此后都用这种模式。  <br>然后右击app&#x2F;src&#x2F;main&#x2F;java&#x2F;com.example.activitytest-&gt;New-&gt;Activity-&gt;Empty Activity,  <br>我们将活动命名为FirstActivity,并且不要勾选Generate Layout File 和 Launcher Activity.  <br>最后Finish完成创建。  </p>
<h3 id="创建和加载布局"><a href="#创建和加载布局" class="headerlink" title="创建和加载布局"></a>创建和加载布局</h3><p>右击app&#x2F;src&#x2F;main&#x2F;res-&gt;New-&gt;Directory,创建一个名为layout的目录，  <br>右击layout-&gt;New-&gt;Layout resource file,新建一个布局文件并命名为first_layout,根元素默认选择LinearLayout.  <br>在text视图下进行编辑:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button_1&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;Button 1&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<p>就这样创建了一个Button元素，一个按钮。  <br>然后需要在活动中加载这个布局。  <br>在FirstActivity , onCreate()方法中编辑：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class FirstActivity extends AppCompatActivity &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.first_layout);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="在AndroidManifest中注册"><a href="#在AndroidManifest中注册" class="headerlink" title="在AndroidManifest中注册"></a>在AndroidManifest中注册</h3><p>所有的活动都要在AndroidManifest中进行注册才能生效，Android Studio会自动帮我们完成注册。打开app&#x2F;src&#x2F;main&#x2F;AndroidManifest.xml:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    package=&quot;com.example.activitytest&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup=&quot;true&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        android:label=&quot;@string/app_name&quot;</span><br><span class="line">        android:supportsRtl=&quot;true&quot;</span><br><span class="line">        android:theme=&quot;@style/AppTheme&quot;&gt;</span><br><span class="line">        &lt;activity android:name=&quot;.FirstActivity&quot;&gt;&lt;/activity&gt;</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line"></span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>
<p>然后我们要为程序配置主活动，这样它才能运行。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    package=&quot;com.example.activitytest&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup=&quot;true&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        android:label=&quot;@string/app_name&quot;</span><br><span class="line">        android:supportsRtl=&quot;true&quot;</span><br><span class="line">        android:theme=&quot;@style/AppTheme&quot;&gt;</span><br><span class="line">        &lt;activity</span><br><span class="line">            android:name=&quot;.FirstActivity&quot;</span><br><span class="line">            android:label=&quot;This ie FirstActivity&quot;&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</span><br><span class="line">                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/activity&gt;</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line"></span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Toast"><a href="#Toast" class="headerlink" title="Toast"></a>Toast</h3><p>Toast是Android 系统提供的一个很好的提醒方式，它可以将一些短小的提示信息在屏幕上显示出来，并且很快就可以消失，不会占用任何屏幕空间。  <br>首先需要定义一个弹出Toast的触发点，我们可以通过点击按钮弹出Toast。  <br>在onCreate()中编辑：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line"></span><br><span class="line">       super.onCreate(savedInstanceState);</span><br><span class="line">       setContentView(R.layout.first_layout);</span><br><span class="line">       Button button1 = (Button) findViewById(R.id.button_1);</span><br><span class="line">       button1.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onClick(View v)&#123;</span><br><span class="line">               Toast.makeText(FirstAvtivity.this,&quot;You clicked Button 1&quot;,</span><br><span class="line">               Toast.LENGTH_SHORT).show();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h3><blockquote>
<p>Android 给我们提供了一种方式，可以让菜单都能得到展示的同时，还能不占用任何屏幕空间。  </p>
</blockquote>
<p>右击app&#x2F;src&#x2F;main&#x2F;res-&gt;New-&gt;Directory,创建一个名为menu的目录，  <br>右击menu-&gt;New-&gt;Menu resource file,创建一个名为main的菜单文件。  <br>在main.xml中编辑：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/add_item&quot;</span><br><span class="line">        android:title=&quot;Add&quot;/&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/remove_item&quot;</span><br><span class="line">        android:title=&quot;Remove&quot;/&gt;</span><br><span class="line">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>
<p>在这里，我们创建了两个菜单项。  <br>然后我们需要回到FirstActivity中重写onCreateOptionMenu()方法。<br><strong>重写方法可以使用Ctrl+O</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean onCreateOptionsMenu(Menu menu) &#123;</span><br><span class="line">    getMenuInflater().inflate(R.menu.main,menu);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后定义菜单响应事件：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean onOptionsItemSelected(MenuItem item) &#123;</span><br><span class="line">    switch (item.getItemId())&#123;</span><br><span class="line">        case R.id.add_item:</span><br><span class="line">            Toast.makeText(this, &quot;You clicked Add&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">            break;</span><br><span class="line">        case R.id.remove_item:</span><br><span class="line">            Toast.makeText(this, &quot;You clicked Remove&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就完成了。</p>
<h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><p>使用Intent可以在活动之间穿梭  </p>
<h3 id="显式Intent"><a href="#显式Intent" class="headerlink" title="显式Intent"></a>显式Intent</h3><p>首先在ActivityTest中在创建一个活动SecondActivity，不过这次勾选Generate Layout File，起名为second_layout, 不要勾选Launcher Activity。  <br>将second_layout.xml中的代码替换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">        android:orientation=&quot;vertical&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:text=&quot;Button 2&quot;&gt;</span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button_2&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;Button 2&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>同样，Android Studio已经帮我们自动完成了注册。  <br>修改FirstActivity中的按钮的点击事件：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">button1.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v)&#123;</span><br><span class="line">                Intent intent = new Intent(FirstActivity.this,SecondActivity.class);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>然后就完成了。  </p>
<blockquote>
<p>使用这种方法，Intent的“意图”非常明显，因此我们称之为显式Intent</p>
</blockquote>
<h3 id="隐式Intent"><a href="#隐式Intent" class="headerlink" title="隐式Intent"></a>隐式Intent</h3><blockquote>
<p>隐式Intent的比较含蓄，他并不会明确指出将要启动的活动，而是指定一系列更为抽象的action和category等信息，然后由系统去分析intent的意图，最后找到合适的活动去启动。</p>
</blockquote>
<p>在AndroidManifest.xml中修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;activity android:name=&quot;.SecondActivity&quot;&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=&quot;com.example.activitytest.ACTION_START&quot; /&gt;</span><br><span class="line">                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/activity&gt;</span><br></pre></td></tr></table></figure>
<p>修改FirstActivity中的按钮的点击事件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">button1.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v)&#123;</span><br><span class="line">                Intent intent = new Intent(&quot;com.example.activitytest.ACTION_START&quot;);</span><br><span class="line">                startActivityForResult(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>然后就完成了。<br>每个Intent中只能指定一个action，但却能指定多个category。<br>使用隐式Intent，我们不但可以启动自己程序内的活动，还可以启动其他程序的活动。  </p>
<h2 id="活动的生命周期"><a href="#活动的生命周期" class="headerlink" title="活动的生命周期"></a>活动的生命周期</h2><h3 id="活动状态"><a href="#活动状态" class="headerlink" title="活动状态"></a>活动状态</h3><blockquote>
<p>每个活动在其生命周期中最多可能会有4种状态。</p>
</blockquote>
<blockquote>
<ol>
<li>运行状态：  当一个活动位于返回栈的栈顶时，这时活动就处于运行状态，系统最不愿意回收的就是处于运行状态的活动。</li>
<li>暂停状态： 当一个活动不再处于栈顶位置，但仍然可见时，这时活动就进入了暂停状态。只有在内存极低的情况下，系统才会去考虑回收这种活动。</li>
<li>停止状态： 当一个活动不再处于栈顶位置，并且完全不可见的时候，就进入了停止状态。当其他地方需要内存时，处于停止状态的活动有可能会被系统回收。 </li>
<li>销毁状态： 当一个活动从返回栈中移除后就变成了销毁状态。系统会最倾向于回收处于这种状态的活动，从而保证手机的内存充足。</li>
</ol>
</blockquote>
<h3 id="活动的生存期"><a href="#活动的生存期" class="headerlink" title="活动的生存期"></a>活动的生存期</h3><blockquote>
<ul>
<li>onCreate():每个活动中我们都重写了这个方法，它会在活动第一次被创建的时候调用。你应该在这个方法中完成活动的初始化操作，比如说加载布局、绑定事件等。</li>
</ul>
<ul>
<li>onStart():这个方法在活动由不可见变为可见的时候调用。</li>
<li>onResume():这个方法在活动准备好和用户进行交互的时候调用。此时的活动一定位于返回栈的栈顶，并且处于运行状态。</li>
<li>onPause():这个方法在系统准备去启动或者恢复另一个活动的时候调用。我们通常会在这个方法中将一些消耗 CPU 的资源释放掉，以及保存一些关键数据，但这个方法的执行速度一定要快，不然会影响到新的栈顶活动的使用。</li>
<li>onStop():这个方法在活动完全不可见的时候调用。它和 onPause()方法的主要区别在于，如果启动的新活动是一个对话框式的活动，那么 onPause()方法会得到执行，而 onStop()方法并不会执行。</li>
<li>onDestroy():这个方法在活动被销毁之前调用，之后活动的状态将变为销毁状态。</li>
<li>onRestart():这个方法在活动由停止状态变为运行状态之前调用，也就是活动被重新启动了。以上七个方法中除了 onRestart()方法，其他都是两两相对的，从而又可以将活动分为三种生存期。</li>
</ul>
</blockquote>
<p style="text-align:center">
        <img src=" https://note.youdao.com/yws/api/personal/file/WEB3b05cb90f99b390b18312f122c1bfc64?method=download&shareKey=084ef55c762c2b32347c130e509aad0e" alt="活动的生命周期"  width="500" height="700"></p>
<p style="text-align:center">活动的生命周期</p>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio 的初次使用</title>
    <url>/2022/05/09/Android/</url>
    <content><![CDATA[<p>记录我第一次使用Android Studio时遇到的问题以及一些简单的笔记。<br>我所使用的是Android Studio 2.2版本</p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>创建一个Hello World！项目无疑是相当简单的，我很快就完成了项目的创建过程。<br>然后……就报错了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error:A problem occurred configuring project &#x27;:app&#x27;.</span><br><span class="line">&gt; Could not resolve all dependencies for configuration &#x27;:app:_debugApkCopy&#x27;.</span><br><span class="line">   &gt; Could not resolve com.android.support:appcompat-v7:32.+.</span><br><span class="line">     Required by:</span><br><span class="line">         MyApplication:app:unspecified</span><br><span class="line">      &gt; Could not resolve com.android.support:appcompat-v7:32.+.</span><br><span class="line">         &gt; Failed to list versions for com.android.support:appcompat-v7.</span><br><span class="line">            &gt; Could not list versions using M2 pattern &#x27;https://jcenter.bintray.com/[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]&#x27;.</span><br><span class="line">               &gt; Could not GET &#x27;https://jcenter.bintray.com/com/android/support/appcompat-v7/&#x27;.</span><br><span class="line">                  &gt; org.apache.http.client.ClientProtocolException (no error message)</span><br></pre></td></tr></table></figure>
<p>那么，这是怎么回事呢？<br>经过我对相关的查找，最终了解的情况如下：<br>进行以下操作：File-&gt;Settings-&gt;System Settings-&gt;Update<br>然后我看到 ：Android SDK Tools:    26.1.1<br>所以这里我的SDK工具版本就是26.1.1了<br>接下来到：File-&gt;Settings-&gt;System Settings-&gt;Android SDK-&gt;SDK Tools<br>我这里的Android SDK Build-Tools（SDK 构建工具）版本是33-rc3<br>很明显版本低了，但我最终了解到这些并不是造成项目报错的直接原因<br>(Android模式的项目结构)<br>然后点开项目构建文件Gradle Scripts-&gt;build.gradle(Module:app)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apply plugin: &#x27;com.android.application&#x27;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 32             //错误的原因在这</span><br><span class="line">    buildToolsVersion &quot;32.0.0&quot;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId &quot;com.example.myapplication&quot;</span><br><span class="line">        minSdkVersion 15</span><br><span class="line">        targetSdkVersion 32           //错误的原因在这</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile(&#x27;proguard-android.txt&#x27;), &#x27;proguard-rules.pro&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(dir: &#x27;libs&#x27;, include: [&#x27;*.jar&#x27;])</span><br><span class="line">    androidTestCompile(&#x27;com.android.support.test.espresso:espresso-core:2.2.2&#x27;, &#123;</span><br><span class="line">        exclude group: &#x27;com.android.support&#x27;, module: &#x27;support-annotations&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    compile &#x27;com.android.support:appcompat-v7:32.+&#x27;//错误的原因在这</span><br><span class="line">    testCompile &#x27;junit:junit:4.12&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>只要稍作修改就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apply plugin: &#x27;com.android.application&#x27;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 26      //修改</span><br><span class="line">    buildToolsVersion &quot;32.0.0&quot;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId &quot;com.example.myapplication&quot;</span><br><span class="line">        minSdkVersion 15</span><br><span class="line">        targetSdkVersion 26     //修改</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile(&#x27;proguard-android.txt&#x27;), &#x27;proguard-rules.pro&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(dir: &#x27;libs&#x27;, include: [&#x27;*.jar&#x27;])</span><br><span class="line">    androidTestCompile(&#x27;com.android.support.test.espresso:espresso-core:2.2.2&#x27;, &#123;</span><br><span class="line">        exclude group: &#x27;com.android.support&#x27;, module: &#x27;support-annotations&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    compile &#x27;com.android.support:appcompat-v7:26+&#x27;   //修改</span><br><span class="line">    testCompile &#x27;junit:junit:4.12&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后Try Again，那么问题就解决了。</p>
<h2 id="Hello-World！布局"><a href="#Hello-World！布局" class="headerlink" title="Hello World！布局"></a>Hello World！布局</h2><p>依次点击：app-&gt;res-&gt;layout<br>然后点击里面的xml文件<br>在Text视图下就可以看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:id=&quot;@+id/activity_main&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    android:paddingBottom=&quot;@dimen/activity_vertical_margin&quot;</span><br><span class="line">    android:paddingLeft=&quot;@dimen/activity_horizontal_margin&quot;</span><br><span class="line">    android:paddingRight=&quot;@dimen/activity_horizontal_margin&quot;</span><br><span class="line">    android:paddingTop=&quot;@dimen/activity_vertical_margin&quot;</span><br><span class="line">    tools:context=&quot;com.example.myapplication.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;Hello World!&quot; /&gt;</span><br><span class="line">&lt;/RelativeLayout&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Hello World!就是通过代码android:text&#x3D;”Hello World!”定义的。<br>在这里修改””里面的语句就可以输出不同的语句。</p>
<h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><ul>
<li>Log.v()。用于打印那些最为琐碎的、意义最小的日志信息。对应级别verbose,是Android日志里面级别最低的一种。</li>
<li>Log.d()。用于打印一些调试信息，这些信息对你的调试程序和分析问题是有帮助的，对应级别debug，比verbose高一级</li>
<li>Log.i()。用于打印一些比较重要的数据，这些数据应该是你想看到的，可以帮你分析用户行为数据，对应级别info,比debug高一级。</li>
<li>Log.w()。用于打印一些警告信息，提示程序在这个地方可能会有潜在的风险，最后好修复一下这些出现警告的地方。对应级别warn,比info高一级</li>
<li>Log.e()。用于打印程序中的错误信息，比如程序进入到了catch语句中，当有错误信息打印出来的时候，一般都代表你的程序出现了严重问题，必须尽快修复，对应级别error，比warn高一级。</li>
</ul>
<p>输入logv&#x2F;logd&#x2F;logi&#x2F;logw&#x2F;loge再按下tab键，可自动补全<br>输入logt然后按下tab键，就会以当前的类名作为值生成一个TAG常量</p>
<p>添加打印日志的语句后如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.example.myapplication;</span><br><span class="line"></span><br><span class="line">import android.support.v7.app.AppCompatActivity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.util.Log;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private static final String TAG = &quot;MainActivity&quot;;//输入logt然后按下tab键</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Log.d(TAG, &quot;onCreate: execute&quot;);//这里</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后我们就可以在logcat中看到打印信息了。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Android一些依赖的添加</title>
    <url>/2023/04/07/Android%E4%B8%80%E4%BA%9B%E4%BE%9D%E8%B5%96%E7%9A%84%E6%B7%BB%E5%8A%A0/</url>
    <content><![CDATA[<p>Android一些依赖的添加</p>
<h2 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h2><p>导航视图(NavigationView)通常与抽屉布局(DrawerLayout)结合使用,实现了良好的侧滑交互体验。从常规开发来说，侧滑一般都是左侧实现侧滑，抽屉布局可有三个子布局。 </p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> nav_version = <span class="string">&quot;2.5.1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Java language implementation</span></span><br><span class="line">implementation <span class="string">&quot;androidx.navigation:navigation-fragment:$nav_version&quot;</span></span><br><span class="line">implementation <span class="string">&quot;androidx.navigation:navigation-ui:$nav_version&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="CircleImageView"><a href="#CircleImageView" class="headerlink" title="CircleImageView"></a>CircleImageView</h2><p>CircleImageView是一个用于将用户图片圆形化的控件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &#x27;de.hdodenhof:circleimageview:3.0.0&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &quot;androidx.recyclerview:recyclerview:1.2.1&quot;//RecyclerView</span><br></pre></td></tr></table></figure>

<h2 id="CardView"><a href="#CardView" class="headerlink" title="CardView"></a>CardView</h2><p>CardView是用于实现卡片式布局效果的重要控件，实际上也是一个FrameLayout,只是额外提供了圆角和阴影，看上去有立体效果。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &quot;androidx.cardview:cardview:1.0.0&quot;//CardView</span><br></pre></td></tr></table></figure>

<h2 id="Glide"><a href="#Glide" class="headerlink" title="Glide"></a>Glide</h2><p>Glide是Andorid开发中使用的很广泛的一个图片加载库了。 </p>
<p>Android App的页面是有生命周期的，Glide比较好的一个功能就是具有生命周期管理功能，能够根据页面和APP的生命周期来管理图片的加载和停止，也开放接口供用户在内存紧张时手动进行内存管理。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &#x27;com.github.bumptech.glide:glide:4.13.2&#x27;//Glide</span><br><span class="line">annotationProcessor &#x27;com.github.bumptech.glide:compiler:4.13.2&#x27;//Glide</span><br></pre></td></tr></table></figure>

<p>##OkHttp</p>
<p>OkHttp是一个来自Square的HTTP客户端，用于Java和Android应用程序。它的设计是为了更快地加载资源并节省带宽。OkHttp在开源项目中被广泛使用，是Retrofit、Picasso等库的骨干。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation(<span class="string">&quot;com.squareup.okhttp3:okhttp:4.10.0&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="LitePal"><a href="#LitePal" class="headerlink" title="LitePal"></a>LitePal</h2><p>LitePal是一款开源的Android数据库框架，它采用了对象关系映射（ORM）的模式，并将我们平时开发最常用到的一些数据库功能进行了封装，不用编写一行SQL语句就可以完成各种建表和增删改查的操作。  </p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.litepal.guolindev:core:3.2.3&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Android使用Scan Kit 华为统一扫码服务</title>
    <url>/2022/10/03/Android%E4%BD%BF%E7%94%A8Scan-Kit-%E5%8D%8E%E4%B8%BA%E7%BB%9F%E4%B8%80%E6%89%AB%E7%A0%81%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>这里只是简单地使用Scan Kit 华为统一扫码服务。</p>
<h2 id="配置与添加依赖"><a href="#配置与添加依赖" class="headerlink" title="配置与添加依赖"></a>配置与添加依赖</h2><p>新建一个ScanTest项目。</p>
<p>在build.gradle(ScanTest)中</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"><span class="keyword">buildscript</span>&#123;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">&#x27;com.huawei.agconnect:agcp:1.6.0.300&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;com.android.application&#x27;</span> version <span class="string">&#x27;7.3.0&#x27;</span> apply <span class="keyword">false</span></span><br><span class="line">    id <span class="string">&#x27;com.android.library&#x27;</span> version <span class="string">&#x27;7.3.0&#x27;</span> apply <span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在settings.gradle(ScanTest)中</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">pluginManagement &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        gradlePluginPortal()</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        maven &#123;url <span class="string">&#x27;https://developer.huawei.com/repo/&#x27;</span>&#125;<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencyResolutionManagement &#123;</span><br><span class="line">    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        maven &#123;url <span class="string">&#x27;https://developer.huawei.com/repo/&#x27;</span>&#125;<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">rootProject.name = <span class="string">&quot;ScanTest&quot;</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;:app&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在build.gradle(:app)中</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">    <span class="comment">//id &#x27;com.huawei.agconnect&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    namespace <span class="string">&#x27;com.example.scantest&#x27;</span></span><br><span class="line">    compileSdk <span class="number">32</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.example.scantest&quot;</span></span><br><span class="line">        minSdk <span class="number">21</span></span><br><span class="line">        targetSdk <span class="number">32</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner <span class="string">&quot;androidx.test.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android-optimize.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_8</span><br><span class="line">        <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;androidx.appcompat:appcompat:1.4.1&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.google.android.material:material:1.5.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;androidx.constraintlayout:constraintlayout:2.1.3&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;junit:junit:4.13.2&#x27;</span></span><br><span class="line">    androidTestImplementation <span class="string">&#x27;androidx.test.ext:junit:1.1.3&#x27;</span></span><br><span class="line">    androidTestImplementation <span class="string">&#x27;androidx.test.espresso:espresso-core:3.4.0&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;com.huawei.hms:scanplus:2.1.0.300&#x27;</span><span class="comment">//对SDK大小不敏感且希望所有机型均具备最佳体验的开发者</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击“Sync Now”等待同步完成。 </p>
<h2 id="配置AndroidManifest-xml"><a href="#配置AndroidManifest-xml" class="headerlink" title="配置AndroidManifest.xml"></a>配置AndroidManifest.xml</h2><p>打开AndroidManifest.xml文件 </p>
<p>申请静态权限 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--相机权限--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CAMERA&quot;</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--读文件权限--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--使用特性--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera.autofocus&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><p>修改activity_main.xml布局文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_scan&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;60dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:backgroundTint</span>=<span class="string">&quot;#666666&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Scan&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;250dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MainActivity中添加标识和动态权限申请</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CAMERA_REQ_CODE</span> <span class="operator">=</span> <span class="number">111</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DECODE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">REQUEST_CODE_SCAN_ONE</span> <span class="operator">=</span> <span class="number">0X01</span>;</span><br></pre></td></tr></table></figure>

<p>添加动态权限申请 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编辑请求权限</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">requestPermission</span><span class="params">(<span class="type">int</span> requestCode, <span class="type">int</span> mode)</span> &#123;</span><br><span class="line">    ActivityCompat.requestPermissions(</span><br><span class="line">            <span class="built_in">this</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;Manifest.permission.CAMERA, Manifest.permission.READ_EXTERNAL_STORAGE&#125;,</span><br><span class="line">            requestCode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在权限申请返回中启动扫码界面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//权限申请返回</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRequestPermissionsResult</span><span class="params">(<span class="type">int</span> requestCode, String[] permissions, <span class="type">int</span>[] grantResults)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (permissions == <span class="literal">null</span> || grantResults == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (grantResults.length &lt; <span class="number">2</span> || grantResults[<span class="number">0</span>] != PackageManager.PERMISSION_GRANTED || grantResults[<span class="number">1</span>] != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (requestCode == CAMERA_REQ_CODE) &#123;</span><br><span class="line">       	<span class="comment">//启动扫描Acticity</span></span><br><span class="line">           ScanUtil.startScan(<span class="built_in">this</span>, REQUEST_CODE_SCAN_ONE, <span class="keyword">new</span> <span class="title class_">HmsScanAnalyzerOptions</span>.Creator().create());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在Activity回调中获取扫描码的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Activity回调</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActivityResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="type">int</span> resultCode, Intent data)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">       <span class="keyword">if</span> (resultCode != RESULT_OK || data == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (requestCode == REQUEST_CODE_SCAN_ONE) &#123;</span><br><span class="line">           <span class="type">HmsScan</span> <span class="variable">obj</span> <span class="operator">=</span> data.getParcelableExtra(ScanUtil.RESULT);</span><br><span class="line">           <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">               Toast.makeText(<span class="built_in">this</span>,obj.originalValue,Toast.LENGTH_SHORT).show();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>MainActivity.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.scantest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.core.app.ActivityCompat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.Manifest;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huawei.hms.hmsscankit.ScanUtil;</span><br><span class="line"><span class="keyword">import</span> com.huawei.hms.ml.scan.HmsScan;</span><br><span class="line"><span class="keyword">import</span> com.huawei.hms.ml.scan.HmsScanAnalyzerOptions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CAMERA_REQ_CODE</span> <span class="operator">=</span> <span class="number">111</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DECODE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">REQUEST_CODE_SCAN_ONE</span> <span class="operator">=</span> <span class="number">0X01</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">scan</span> <span class="operator">=</span> findViewById(R.id.btn_scan);</span><br><span class="line">        scan.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="comment">//权限请求</span></span><br><span class="line">                requestPermission(CAMERA_REQ_CODE, DECODE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">next</span> <span class="operator">=</span> findViewById(R.id.next);</span><br><span class="line">        next.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>,MainActivity2.class);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//编辑请求权限</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">requestPermission</span><span class="params">(<span class="type">int</span> requestCode, <span class="type">int</span> mode)</span> &#123;</span><br><span class="line">        ActivityCompat.requestPermissions(</span><br><span class="line">                <span class="built_in">this</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;Manifest.permission.CAMERA, Manifest.permission.READ_EXTERNAL_STORAGE&#125;,</span><br><span class="line">                requestCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//权限申请返回</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRequestPermissionsResult</span><span class="params">(<span class="type">int</span> requestCode, String[] permissions, <span class="type">int</span>[] grantResults)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">        <span class="keyword">if</span> (permissions == <span class="literal">null</span> || grantResults == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (grantResults.length &lt; <span class="number">2</span> || grantResults[<span class="number">0</span>] != PackageManager.PERMISSION_GRANTED || grantResults[<span class="number">1</span>] != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestCode == CAMERA_REQ_CODE) &#123;</span><br><span class="line">            <span class="comment">//启动扫描Acticity</span></span><br><span class="line">            ScanUtil.startScan(<span class="built_in">this</span>, REQUEST_CODE_SCAN_ONE, <span class="keyword">new</span> <span class="title class_">HmsScanAnalyzerOptions</span>.Creator().create());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Activity回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActivityResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="type">int</span> resultCode, Intent data)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        <span class="keyword">if</span> (resultCode != RESULT_OK || data == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestCode == REQUEST_CODE_SCAN_ONE) &#123;</span><br><span class="line">            <span class="type">HmsScan</span> <span class="variable">obj</span> <span class="operator">=</span> data.getParcelableExtra(ScanUtil.RESULT);</span><br><span class="line">            <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">                Toast.makeText(<span class="built_in">this</span>,obj.originalValue,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Android前后端交互</title>
    <url>/2022/11/01/Android%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<p>本文涉及3种类型的后端接口，Body型、Param型和File型发送请求的方法 </p>
<h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><p>UserService.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.stereotype.Service(<span class="string">&quot;UserService&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserEntity&gt; <span class="title function_">queryLimit</span><span class="params">(Integer currentPage,Integer pageSzie)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.queryLimit(currentPage,pageSzie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(UserEntity user)</span>&#123;</span><br><span class="line">        userDao.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">updateUser</span><span class="params">(UserEntity user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">deleteUser</span><span class="params">(UserEntity user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.deleteUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Resp&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> Resp.fail(<span class="string">&quot;400&quot;</span>,<span class="string">&quot;文件为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span>   System.currentTimeMillis()+<span class="string">&quot;.&quot;</span>+originalFileName</span><br><span class="line">                .substring(originalFileName.lastIndexOf(<span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\myTemp\\&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath+fileName);</span><br><span class="line">        <span class="keyword">if</span>(!dest.getParentFile().exists()) &#123;</span><br><span class="line">            dest.getParentFile().mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(dest);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> Resp.fail(<span class="string">&quot;500&quot;</span>,originalFileName+<span class="string">&quot;上传失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Resp.success(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>UserController.java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/queryLimit&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserEntity&gt; <span class="title function_">queryLimit</span><span class="params">(<span class="meta">@RequestParam(&quot;currentPage&quot;)</span> Integer currentPage,<span class="meta">@RequestParam(&quot;pageSize&quot;)</span> Integer pageSize)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.queryLimit(currentPage,pageSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addUer</span><span class="params">(<span class="meta">@RequestBody</span> UserEntity user)</span>&#123;</span><br><span class="line">        <span class="comment">//用Mybatis执行insert语句的时候，插入成功会返回1，不成功则会抛出异常，捕获一下异常就好</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userService.addUser(user);</span><br><span class="line">            message = <span class="string">&quot;增加用户成功&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception exception)&#123;</span><br><span class="line">            message = <span class="string">&quot;增加用户异常&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> UserEntity user)</span>&#123;</span><br><span class="line">        <span class="comment">//Mybatis的更新操作成功返回1，用户不存在返回0，失败则抛异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            message = userService.updateUser(user) == <span class="number">1</span>?<span class="string">&quot;更新用户成功&quot;</span>:<span class="string">&quot;用户不存在，更新失败&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception exception)&#123;</span><br><span class="line">            message = <span class="string">&quot;更新异常&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/deleteUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@RequestBody</span> UserEntity user)</span>&#123;</span><br><span class="line">        <span class="comment">//Mybatis的删除操作和更新返回值一样，成功返回1，用户不存在返回0，失败则抛异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            message = userService.deleteUser(user) == <span class="number">1</span>?<span class="string">&quot;删除用户成功&quot;</span>:<span class="string">&quot;用户不存在，删除失败&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception exception)&#123;</span><br><span class="line">            message = <span class="string">&quot;删除异常&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/upload&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">private</span> Resp&lt;String&gt; <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span>MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.upload(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Body类型"><a href="#Body类型" class="headerlink" title="Body类型"></a>Body类型</h3><p>Body类型的接口是类似于这种：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addUer</span><span class="params">(<span class="meta">@RequestBody</span> UserEntity user)</span>&#123;</span><br><span class="line">    <span class="comment">//用Mybatis执行insert语句的时候，插入成功会返回1，不成功则会抛出异常，捕获一下异常就好</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        userService.addUser(user);</span><br><span class="line">        message = <span class="string">&quot;增加用户成功&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception exception)&#123;</span><br><span class="line">        message = <span class="string">&quot;增加用户异常&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>地址为：</p>
<blockquote>
<p><a href="http://localhost:8080/user/addUser">http://localhost:8080/user/addUser</a> </p>
</blockquote>
<p><img src=" https://note.youdao.com/yws/api/personal/file/WEBb6f66c892ba59ddd3d6e3d2037a2ba95?method=download&shareKey=35d2a752187b4c3737ff08c0a34e2c8c" ></p>

<h3 id="Param类型"><a href="#Param类型" class="headerlink" title="Param类型"></a>Param类型</h3><p>Param类型的接口是类似于这种：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/queryLimit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserEntity&gt; <span class="title function_">queryLimit</span><span class="params">(<span class="meta">@RequestParam(&quot;currentPage&quot;)</span> Integer currentPage,<span class="meta">@RequestParam(&quot;pageSize&quot;)</span> Integer pageSize)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.queryLimit(currentPage,pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>地址为：</p>
<blockquote>
<p><a href="http://localhost:8080/user/queryLimit">http://localhost:8080/user/queryLimit</a> </p>
</blockquote>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB34c8d05c26c39ee88f45e516275c2038?method=download&shareKey=f82e28e53dff23233fbb75b989ce2d87" alt="1667283558631"></p>
<h3 id="File类型"><a href="#File类型" class="headerlink" title="File类型"></a>File类型</h3><p>File类型的接口是类似于这种：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/upload&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">private</span> Resp&lt;String&gt; <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span>MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.upload(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>地址为：</p>
<blockquote>
<p><a href="http://localhost:8080/user/upload">http://localhost:8080/user/upload</a> </p>
</blockquote>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEBf1ce261a38255939b43d1707e11cd301?method=download&shareKey=089e67df5a56d2db43e323d6d7b902c6" alt="1667266319843"></p>
<h2 id="前后端连接"><a href="#前后端连接" class="headerlink" title="前后端连接"></a>前后端连接</h2><blockquote>
<p>首先要创建一个Thread，网络请求操作较慢，所以要在子线程里操作，在主线程里发送网络请求会造成堵塞，APP可能会崩溃。 其次是网络请求的操作要放在try语句里，毕竟网络通信不一定成功的。最后需要注意的是子线程不能直接更新UI，要在子线程里操作UI，需要借助runOnUiThread 。</p>
</blockquote>
<p>添加OkHttp的依赖：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation(<span class="string">&quot;com.squareup.okhttp3:okhttp:4.10.0&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>声明权限：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Body类型-1"><a href="#Body类型-1" class="headerlink" title="Body类型"></a>Body类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">add</span> <span class="operator">=</span> findViewById(R.id.add);</span><br><span class="line">add.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;    \&quot;userId\&quot;: 8,\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;    \&quot;userName\&quot;: \&quot;Y\&quot;,\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;    \&quot;userAddress\&quot;: \&quot;Unknow\&quot;\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">                    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();<span class="comment">//创建http客户端</span></span><br><span class="line">                    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                            .url(<span class="string">&quot;http://172.17.152.37:8080/user/addUser&quot;</span>)</span><br><span class="line">                            .post(RequestBody.create(MediaType.parse(<span class="string">&quot;application/json&quot;</span>),json))</span><br><span class="line">                            .build();<span class="comment">//创建http请求</span></span><br><span class="line">                    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();<span class="comment">//执行发送的指令</span></span><br><span class="line">                    runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                            Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;Add Success&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                            Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;Add Error&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Param类型-1"><a href="#Param类型-1" class="headerlink" title="Param类型"></a>Param类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">query</span> <span class="operator">=</span> findViewById(R.id.query);</span><br><span class="line">query.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                       <span class="keyword">try</span> &#123;</span><br><span class="line">                           FormBody.<span class="type">Builder</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FormBody</span>.Builder();</span><br><span class="line">                           params.add(<span class="string">&quot;currentPage&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                           params.add(<span class="string">&quot;pageSize&quot;</span>,<span class="string">&quot;5&quot;</span>);</span><br><span class="line">                           <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();<span class="comment">//创建http客户端</span></span><br><span class="line">                           <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                                   .url(<span class="string">&quot;http://172.17.152.37:8080/user/queryLimit&quot;</span>)</span><br><span class="line">                                   .post(params.build())</span><br><span class="line">                                   .build();<span class="comment">//创建http请求</span></span><br><span class="line">                           <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();<span class="comment">//执行发送的指令</span></span><br><span class="line">                           <span class="type">String</span> <span class="variable">responseData</span> <span class="operator">=</span> response.body().string();<span class="comment">//获取返回的JSON结果</span></span><br><span class="line">                           <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>(responseData);</span><br><span class="line">                           <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; jsonArray.length();i++) &#123;</span><br><span class="line">                               <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> jsonArray.getJSONObject(i);</span><br><span class="line">                               Log.d(TAG, <span class="string">&quot;run: userId = &quot;</span>+jsonObject.getInt(<span class="string">&quot;userId&quot;</span>));</span><br><span class="line">                               Log.d(TAG, <span class="string">&quot;run: userName = &quot;</span>+jsonObject.getString(<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">                               Log.d(TAG, <span class="string">&quot;run: userAddress = &quot;</span>+jsonObject.getString(<span class="string">&quot;userAddress&quot;</span>));</span><br><span class="line">                           &#125;</span><br><span class="line">                           runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                               <span class="meta">@Override</span></span><br><span class="line">                               <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                                   Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;Query Success&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;);</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                           e.printStackTrace();</span><br><span class="line">                           runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                               <span class="meta">@Override</span></span><br><span class="line">                               <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                                   Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;Query Error&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;).start();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="File类型-1"><a href="#File类型-1" class="headerlink" title="File类型"></a>File类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">WRITE_EXTERNAL_STORAGE_REQUEST_CODE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查存储权限</span></span><br><span class="line">        <span class="keyword">if</span>(ContextCompat.checkSelfPermission(<span class="built_in">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)</span><br><span class="line">        != PackageManager.PERMISSION_GRANTED) &#123;<span class="comment">//没有权限，向用户请求权限</span></span><br><span class="line">            ActivityCompat.requestPermissions(MainActivity.<span class="built_in">this</span>,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;</span><br><span class="line">                            Manifest.permission.READ_EXTERNAL_STORAGE,Manifest.permission.WRITE_EXTERNAL_STORAGE</span><br><span class="line">                    &#125;,WRITE_EXTERNAL_STORAGE_REQUEST_CODE);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Button</span> <span class="variable">upload</span> <span class="operator">=</span> findViewById(R.id.upload);</span><br><span class="line">        </span><br><span class="line">        upload.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">                            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/mnt/sdcard/DCIM/Camera/IMG_20221030_074015.jpg&quot;</span>);</span><br><span class="line">                            MultipartBody.<span class="type">Builder</span> <span class="variable">requestBody</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultipartBody</span>.Builder()</span><br><span class="line">                                    .setType(MultipartBody.FORM);<span class="comment">//通过表单上传文件</span></span><br><span class="line">                            <span class="type">RequestBody</span> <span class="variable">fileBody</span> <span class="operator">=</span> RequestBody.create(MediaType.parse(<span class="string">&quot;image/*&quot;</span>),file);<span class="comment">//上传的文件及类型</span></span><br><span class="line">                            requestBody.addFormDataPart(<span class="string">&quot;file&quot;</span>,file.getName(),fileBody);<span class="comment">//参数：请求key，文件名称，filebody</span></span><br><span class="line">                            <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                                    .url(<span class="string">&quot;http://172.17.152.37:8080/user/upload&quot;</span>)</span><br><span class="line">                                    .post(requestBody.build())</span><br><span class="line">                                    .build();</span><br><span class="line">                            client.newBuilder().readTimeout(<span class="number">5000</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">                                    .build().newCall(request).enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">                                        <span class="meta">@Override</span></span><br><span class="line">                                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(<span class="meta">@NonNull</span> Call call, <span class="meta">@NonNull</span> IOException e)</span> &#123;</span><br><span class="line">                                            Log.d(TAG, <span class="string">&quot;onFailure: 文件上传失败&quot;</span>);</span><br><span class="line">                                            e.printStackTrace();</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        <span class="meta">@Override</span></span><br><span class="line">                                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(<span class="meta">@NonNull</span> Call call, <span class="meta">@NonNull</span> Response response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                                            <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">                                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                                    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(response.body().string());</span><br><span class="line">                                                    Log.d(TAG,</span><br><span class="line">                                                            <span class="string">&quot;onResponse: 文件上传成功&quot;</span>+jsonObject.getString(<span class="string">&quot;code&quot;</span>));</span><br><span class="line">                                                    Log.d(TAG,</span><br><span class="line">                                                            <span class="string">&quot;onResponse: 服务器上的文件名&quot;</span>+jsonObject.getString(<span class="string">&quot;body&quot;</span>));</span><br><span class="line">                                                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                                    e.printStackTrace();</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                Log.d(TAG, <span class="string">&quot;onResponse: 文件+&quot;</span>+response.message()+</span><br><span class="line">                                                        <span class="string">&quot;error:body&quot;</span>+response.body().string());</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                            runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                                    Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;UpLoad Error&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRequestPermissionsResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="meta">@NonNull</span> String[] permissions, <span class="meta">@NonNull</span> <span class="type">int</span>[] grantResults)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">        <span class="keyword">if</span>(requestCode == WRITE_EXTERNAL_STORAGE_REQUEST_CODE) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; permissions.length;i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grantResults[i] != PackageManager.PERMISSION_GRANTED)<span class="comment">//用户选择了禁止</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;权限获取失败&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    finish();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Android多线程编程与服务</title>
    <url>/2022/11/09/Android%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E4%B8%8E%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>服务(Service)是Android中实现程序后台运行的解决方案，它非常适合去执行那些不需要和用户交互而且还要求长期运行的任务。服务的运行不依赖于任何用户界面，即使程序被切换到后台，或者用户打开了另外个应用程序，服务仍然能够保持正常运行。</p>
<p>实际上服务并不会自动开启线程，所有的代码都是默认运行在主线程当中的。我们需要在服务的内部手动创建子线程，并在这里执行具体的任务，否则就有可能出现主线程被阻塞住的情况。</p>
<h2 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h2><p>当我们需要执行一些耗时操作，比如说发起一条网络请求时，考虑到网速等其他原因，服务器未必会立刻响应我们的请求，如果不将这类操作放在子线程里去运行，就会导致主线程被阻塞住。</p>
<h3 id="线程的基本用法"><a href="#线程的基本用法" class="headerlink" title="线程的基本用法"></a>线程的基本用法</h3><p>定义一个线程只需要新建一个类继承自Thread，然后重写父类的run()方法，并在里面编写耗时逻辑即可，如下所示:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//处理具体的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动这个线程也很简单，只需要new 出 MyThread 的实例，然后调用它的start()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">MyThread</span>().start();</span><br></pre></td></tr></table></figure>

<p>使用继承的方式耦合性有点高，更多的时候我们都会选择使用实现Runnable接口的方式来定义一个线程:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//处理具体的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果使用了这种写法，启动线程的方法也需要进行相应的改变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MyThread</span> <span class="variable">mythread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(mythread).start();</span><br></pre></td></tr></table></figure>

<p>也可以使用匿名类的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//处理具体的逻辑</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br></pre></td></tr></table></figure>

<h3 id="在子线程中更新UI"><a href="#在子线程中更新UI" class="headerlink" title="在子线程中更新UI"></a>在子线程中更新UI</h3><p>Android是不允许在子线程中进行UI操作的。</p>
<p>但是有些时候，我们必须在子线程里去执行一些耗时任务，然后根据任务的执行结果来更新相应的UI控件。</p>
<p>对于这种情况，Android 提供了一套异步消息处理机制，完美地解决了在子线程中进行UI操作的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.androidthreadtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UPDATE_TEXT</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView text;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> UPDATE_TEXT:</span><br><span class="line">                    text.setText(<span class="string">&quot;Nice to meet you!&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        text = findViewById(R.id.text);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">changeText</span> <span class="operator">=</span> findViewById(R.id.change_text);</span><br><span class="line">        changeText.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.change_text:</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        <span class="comment">//text.setText(&quot;Nice to meet you!&quot;);</span></span><br><span class="line">                        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">                        message.what = UPDATE_TEXT;</span><br><span class="line">                        handler.sendMessage(message);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里先是定义了一个整型常量UPDATE_TEXT，用于表示更新TextView这个动作。然后新增一个Handler对象，并重写父类的handleMessage()方法，在这里对具体的Message进行处理。如果发现 Message的 what字段的值等于UPDATE_TEXT，就将TextView显示的内容改成Nice to meet you。</p>
<p>这次并没有在子线程里直接进行UI操作,而是创建了一个Message( android.os.Message )对象,并将它的what字段的值指定为UPDATE_TEXT，然后调用Handler的sendMessage( )方法将这条Message发送出去。很快，Handler就会收到这条Message，并在 handleMessage()方法中对它进行处理。</p>
<p>注意此时handleMessage()方法中的代码就是在主线程当中运行的了，所以我们可以放心地在这里进行UI操作。接下来对Message携带的what字段的值进行判断，如果等于UPDATE_TEXT，就将TextView显示的内容改成Nice to meet you。</p>
<h3 id="解析异步消息处理机制"><a href="#解析异步消息处理机制" class="headerlink" title="解析异步消息处理机制"></a>解析异步消息处理机制</h3><p>1.Message</p>
<blockquote>
<p>Message是在线程之间传递的消息，它可以在内部携带少量的信息，用于在不同线程之间交换数据。上一小节中使用到了Message的 what字段,除此之外还可以使用arg1和 arg2字段来携带一些整型数据，使用obj字段携带一个0bject对象。</p>
</blockquote>
<p>2.Handler</p>
<blockquote>
<p>Handler主要是用于发送和处理消息的。发送消息一般是使用Handler 的 sendMessage()方法，而发出的消息经过一系列地辗转处理后，最终会传递到Handler的 handleMessage()方法中。</p>
</blockquote>
<p>3.MessageQueue</p>
<blockquote>
<p>MessageQueue主要用于存放所有通过Handler发送的消息。这部分消息会一直存在于消息队列中，等待被处理。每个线程中只会有一个MessageQueue对象。</p>
</blockquote>
<p>4.Looper</p>
<blockquote>
<p>调用Looper的 loop()方法后，就会进入到一个无限循环当中，然后每当发现 MessageQueue 中存在一条消息，就会将它取出，并传递到Handler的 handleMessage()方法中。每个线程中也只会有一个Looper对象。</p>
</blockquote>
<p><strong>异步消息处理的整个流程:</strong></p>
<blockquote>
<p>首先需要在主线程当中创建一个 Handler对象，并重写handleMessage()方法。然后当子线程中需要进行UI操作时，就创建一个Message对象，并通过Handler将这条消息发送出去。之后这条消息会被添加到MessageQueue的队列中等待被处理,而Looper 则会一直尝试从 MessageQueue中取出待处理消息，最后分发回 Handler的handleMessage()方法中。由于 Handler是在主线程中创建的，所以此时handleMessage()方法中的代码也会在主线程中运行，于是我们在这里就可以安心地进行UI操作了。</p>
</blockquote>
<p>runOnUiThread()方法其实就是一个异步消息处理机制的接口封装。</p>
<h2 id="服务的用法"><a href="#服务的用法" class="headerlink" title="服务的用法"></a>服务的用法</h2><p>oncreate( )、 onStartCommand()和 onDestroy()这3个方法是每个服务中最常用到的3个方法。</p>
<p>其中 oncreate()方法会在服务创建的时候调用，onStartCommand()方法会在每次服务启动的时候调用，onDestroy()方法会在服务销毁的时候调用。</p>
<p>通常情况下，如果我们希望服务一旦启动就立刻去执行某个动作，就可以将逻辑写在onStartCommand()方法里。而当服务销毁时，我们又应该在onDestroy()方法中去回收那些不再使用的资源。</p>
<p><strong>另外需要注意,每一个服务都需要在AndroidManifest.xml文件中进行注册才能生效</strong>。</p>
<h3 id="启动和停止服务"><a href="#启动和停止服务" class="headerlink" title="启动和停止服务"></a>启动和停止服务</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">startService</span> <span class="operator">=</span> findViewById(R.id.start_service);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">stopService</span> <span class="operator">=</span> findViewById(R.id.stop_service);</span><br><span class="line">        startService.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        stopService.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.start_service:</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">startIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>,MyService.class);</span><br><span class="line">                startService(startIntent);</span><br><span class="line">                <span class="comment">//启动服务</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.stop_service:</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">stopIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>,MyService.class);</span><br><span class="line">                stopService(stopIntent);</span><br><span class="line">                <span class="comment">//停止服务</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> <span class="keyword">extends</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyService</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IBinder <span class="title function_">onBind</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Not yet implemented&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate();</span><br><span class="line">        Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;onCreat executed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">onStartCommand</span><span class="params">(Intent intent, <span class="type">int</span> flags, <span class="type">int</span> startId)</span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;onStartCommand executed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;onDestroy executed&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;onDestroy executed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="活动和服务进行通信"><a href="#活动和服务进行通信" class="headerlink" title="活动和服务进行通信"></a>活动和服务进行通信</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyService.DownloadBinder downloadBinder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ServiceConnection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceConnection</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> &#123;</span><br><span class="line">            downloadBinder = (MyService.DownloadBinder) iBinder;</span><br><span class="line">            downloadBinder.startDownload();</span><br><span class="line">            downloadBinder.getProgress();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">startService</span> <span class="operator">=</span> findViewById(R.id.start_service);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">stopService</span> <span class="operator">=</span> findViewById(R.id.stop_service);</span><br><span class="line">        startService.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        stopService.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">bindService</span> <span class="operator">=</span> findViewById(R.id.bind_service);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">unbindService</span> <span class="operator">=</span> findViewById(R.id.unbind_service);</span><br><span class="line">        bindService.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        unbindService.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.start_service:</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">startIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>,MyService.class);</span><br><span class="line">                startService(startIntent);</span><br><span class="line">                <span class="comment">//启动服务</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.stop_service:</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">stopIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>,MyService.class);</span><br><span class="line">                stopService(stopIntent);</span><br><span class="line">                <span class="comment">//停止服务</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.bind_service:</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">bindIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>,MyService.class);</span><br><span class="line">                bindService(bindIntent,connection,BIND_AUTO_CREATE);</span><br><span class="line">                <span class="comment">//绑定服务</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.unbind_service:</span><br><span class="line">                unbindService(connection);</span><br><span class="line">                <span class="comment">//解绑服务</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> <span class="keyword">extends</span> <span class="title class_">Service</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">DownloadBinder</span> <span class="variable">mBinder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DownloadBinder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">DownloadBinder</span> <span class="keyword">extends</span> <span class="title class_">Binder</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startDownload</span><span class="params">()</span> &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;startDownload executed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getProgress</span><span class="params">()</span> &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;geetProgress executed&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyService</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IBinder <span class="title function_">onBind</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate();</span><br><span class="line">        Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;onCreat executed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">onStartCommand</span><span class="params">(Intent intent, <span class="type">int</span> flags, <span class="type">int</span> startId)</span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;onStartCommand executed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;onDestroy executed&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;onDestroy executed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当一个活动和服务绑定了之后，就可以调用该服务里的Binder提供的方法了。</p>
<p>这里我们首先创建了一个ServiceConnection的匿名类，在里面重写了onServiceConnected()方法和 onServiceDisconnected()方法，这两个方法分别会在活动与服务成功绑定以及解除绑定的时候调用。</p>
<p>在onServiceConnected()方法中，我们又通过向下转型得到了DownloadBinder的实例。</p>
<p>现在我们可以在活动中根据具体的场景来调用DownloadBinder中的任何public()方法，即实现了指挥服务干什么服务就去干什么的功能。</p>
<p>活动和服务的绑定是在 Bind Service按钮的点击事件里完成的。</p>
<p>这里我们仍然是构建出了一个Intent对象，然后调用bindService()方法将MainActivity和 MyService进行绑定。</p>
<p>bindService()方法接收3个参数，第一个参数就是刚刚构建出的Intent对象，第二个参数是前面创建出的ServiceConnection的实例，第三个参数则是一个标志位，这里传入BIND_AUTO_CREATE表示在活动和服务进行绑定后自动创建服务。这会使得 MyService中的oncreate()方法得到执行，但onStartCommand()方法不会执行。</p>
<p>解除活动和服务之间的绑定，调用一下unbindService()方法就可以了，这也是Unbind Service按钮的点击事件里实现的功能。</p>
<h3 id="使用前台服务"><a href="#使用前台服务" class="headerlink" title="使用前台服务"></a>使用前台服务</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;com.example.servicetest&quot;</span>;	<span class="comment">//这里的id里面输入自己的项目的包的路径</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Channel One&quot;</span>;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">       Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;onCreat executed&quot;</span>);</span><br><span class="line">       <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, MainActivity.class);</span><br><span class="line">       <span class="type">PendingIntent</span> <span class="variable">pi</span> <span class="operator">=</span> PendingIntent.getActivity(<span class="built_in">this</span>, <span class="number">0</span>, intent, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//使用Notificatio通知再Android8.0以上的的通知要设置渠道，否则就无法显示。</span></span><br><span class="line">       NotificationCompat.Builder notification; <span class="comment">//创建服务对象</span></span><br><span class="line">       <span class="type">NotificationManager</span> <span class="variable">manager</span> <span class="operator">=</span> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">       <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">           <span class="type">NotificationChannel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotificationChannel</span>(id, name, NotificationManager.IMPORTANCE_HIGH);</span><br><span class="line">           channel.enableLights(<span class="literal">true</span>);<span class="comment">//通知渠道是否让呼吸灯闪烁</span></span><br><span class="line">           channel.setShowBadge(<span class="literal">true</span>);<span class="comment">//通知渠道是否在应用图标的右上角展示小红点</span></span><br><span class="line">           channel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC);<span class="comment">//设置锁屏时候的可见性</span></span><br><span class="line">           manager.createNotificationChannel(channel);</span><br><span class="line">           notification = <span class="keyword">new</span> <span class="title class_">NotificationCompat</span>.Builder(<span class="built_in">this</span>).setChannelId(id);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           notification = <span class="keyword">new</span> <span class="title class_">NotificationCompat</span>.Builder(<span class="built_in">this</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       notification.setContentTitle(<span class="string">&quot;This is content title&quot;</span>)</span><br><span class="line">               .setContentText(<span class="string">&quot;This is content text&quot;</span>)</span><br><span class="line">               .setWhen(System.currentTimeMillis())</span><br><span class="line">               .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">               .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))</span><br><span class="line">               .setContentIntent(pi);</span><br><span class="line">       <span class="comment">//Notification notification1 = notification.build();</span></span><br><span class="line">       startForeground(<span class="number">1</span>, notification.build());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>这里调用了startForeground()方法。这个方法接收两个参数，第一个参数是通知的id，类似于notify()方法的第一个参数，第二个参数则是构建出的Notification对象。调用startForeground()方法后就会让 MyService变成一个前台服务，并在系统状态栏显示出来。</p>
<h3 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h3><p>为了可以简单地创建一个异步的、会自动停止的服务，Android 专门提供了一个IntentService类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.servicetest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.IntentService;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyIntentService</span> <span class="keyword">extends</span> <span class="title class_">IntentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyIntentService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;MyIntentService&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onHandleIntent</span><span class="params">(<span class="meta">@Nullable</span> Intent intent)</span> &#123;</span><br><span class="line">        <span class="comment">//打印当前线程的id</span></span><br><span class="line">        Log.d(<span class="string">&quot;MyIntentService&quot;</span>, <span class="string">&quot;Thread id is &quot;</span>+Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.d(<span class="string">&quot;MyIntentService&quot;</span>, <span class="string">&quot;onDestroy executed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyService.DownloadBinder downloadBinder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ServiceConnection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceConnection</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> &#123;</span><br><span class="line">            downloadBinder = (MyService.DownloadBinder) iBinder;</span><br><span class="line">            downloadBinder.startDownload();</span><br><span class="line">            downloadBinder.getProgress();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">startService</span> <span class="operator">=</span> findViewById(R.id.start_service);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">stopService</span> <span class="operator">=</span> findViewById(R.id.stop_service);</span><br><span class="line">        startService.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        stopService.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">bindService</span> <span class="operator">=</span> findViewById(R.id.bind_service);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">unbindService</span> <span class="operator">=</span> findViewById(R.id.unbind_service);</span><br><span class="line">        bindService.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        unbindService.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">startIntentService</span> <span class="operator">=</span> findViewById(R.id.start_intent_service);</span><br><span class="line">        startIntentService.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.start_service:</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">startIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>,MyService.class);</span><br><span class="line">                startService(startIntent);</span><br><span class="line">                <span class="comment">//启动服务</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.stop_service:</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">stopIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>,MyService.class);</span><br><span class="line">                stopService(stopIntent);</span><br><span class="line">                <span class="comment">//停止服务</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.bind_service:</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">bindIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>,MyService.class);</span><br><span class="line">                bindService(bindIntent,connection,BIND_AUTO_CREATE);</span><br><span class="line">                <span class="comment">//绑定服务</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.unbind_service:</span><br><span class="line">                unbindService(connection);</span><br><span class="line">                <span class="comment">//解绑服务</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.start_intent_service:</span><br><span class="line">                <span class="comment">//打印主线程的id</span></span><br><span class="line">                Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;Thread id is &quot;</span>+Thread.currentThread().getId());</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intentService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>,MyIntentService.class);</span><br><span class="line">                startService(intentService);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Android使用网络技术</title>
    <url>/2022/10/26/Android%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>主要讲述如何在手机端使用HTTP协议和服务器端进行网络交互,并对服务器返回的数据进行解析，这也是Android中最常使用到的网络技术。</p>
<h2 id="WebView的用法"><a href="#WebView的用法" class="headerlink" title="WebView的用法"></a>WebView的用法</h2><p>Android提供了一个WebView控件，借助它我们可以在自己的应用程序里嵌入一个浏览器，从而非常轻松地展示各种各样的网页。</p>
<p>新建一个WebViewTest项目。</p>
<p>activity_main.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/web_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MainActivity:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.webviewtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebView;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebViewClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">WebView</span> <span class="variable">webView</span> <span class="operator">=</span> findViewById(R.id.web_view);</span><br><span class="line">        webView.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">        webView.setWebViewClient(<span class="keyword">new</span> <span class="title class_">WebViewClient</span>());</span><br><span class="line">        webView.loadUrl(<span class="string">&quot;https://www.runoob.com/java/java-tutorial.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后还要声明权限：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;application</span><br></pre></td></tr></table></figure>

<h2 id="解析XML格式数据"><a href="#解析XML格式数据" class="headerlink" title="解析XML格式数据"></a>解析XML格式数据</h2><blockquote>
<p>一般我们都会在网络上传输一些格式化后的数据，这种数据会有一定的结构规格和语义，当另一方收到数据消息之后就可以按照相同的结构规格进行解析,从而取出他想要的那部分内容。</p>
</blockquote>
<blockquote>
<p>在网络上传输数据时最常用的格式有两种:XML和JSON。</p>
</blockquote>
<h3 id="Pull解析方式"><a href="#Pull解析方式" class="headerlink" title="Pull解析方式"></a>Pull解析方式</h3><p>修改MainActivity 中的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    TextView responseText;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">sendRequest</span> <span class="operator">=</span> findViewById(R.id.send_request);</span><br><span class="line">        responseText = findViewById(R.id.response_text);</span><br><span class="line">        sendRequest.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(view.getId() == R.id.send_request) &#123;</span><br><span class="line">            <span class="comment">//sendRequestWithHttpURLConnection();</span></span><br><span class="line">            sendRequestWithOkHttp();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendRequestWithHttpURLConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://blog.csdn.net/&quot;</span>);</span><br><span class="line">                    connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">                    connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">                    connection.setConnectTimeout(<span class="number">8000</span>);</span><br><span class="line">                    connection.setReadTimeout(<span class="number">8000</span>);</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> connection.getInputStream();</span><br><span class="line">                    <span class="comment">//下面对获取到的输入流进行读取</span></span><br><span class="line">                    reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line"></span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                    String line;</span><br><span class="line">                    <span class="keyword">while</span>((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        response.append(line);</span><br><span class="line">                    &#125;</span><br><span class="line">                    showResponse(response.toString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (reader != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            reader.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                        connection.disconnect();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendRequestWithOkHttp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">                    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                            .url(<span class="string">&quot;http://10.0.2.2/get_data.xml&quot;</span>)</span><br><span class="line">                            .build();</span><br><span class="line">                    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">responseData</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">                    parseXMLWithPull(responseData);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseXMLWithPull</span><span class="params">(String xmlData)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">XmlPullParserFactory</span> <span class="variable">factory</span> <span class="operator">=</span> XmlPullParserFactory.newInstance();</span><br><span class="line">            <span class="type">XmlPullParser</span> <span class="variable">xmlPullParser</span> <span class="operator">=</span> factory.newPullParser();</span><br><span class="line">            xmlPullParser.setInput(<span class="keyword">new</span> <span class="title class_">StringReader</span>(xmlData));</span><br><span class="line">            <span class="type">int</span> <span class="variable">evenType</span> <span class="operator">=</span> xmlPullParser.getEventType();</span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (evenType != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">nodeName</span> <span class="operator">=</span> xmlPullParser.getName();</span><br><span class="line">                <span class="keyword">switch</span> (evenType) &#123;</span><br><span class="line">                    <span class="keyword">case</span> XmlPullParser.START_TAG:&#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;id&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                            id = xmlPullParser.nextText();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;name&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                            name = xmlPullParser.nextText();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;version&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                            version = xmlPullParser.nextText();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//完成解析某个节点</span></span><br><span class="line">                    <span class="keyword">case</span> XmlPullParser.END_TAG: &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;app&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                            Log.d(TAG, TAG+<span class="string">&quot;: id is &quot;</span>+id);</span><br><span class="line">                            Log.d(TAG, TAG+<span class="string">&quot;: name is &quot;</span>+name);</span><br><span class="line">                            Log.d(TAG, TAG+<span class="string">&quot;: version is &quot;</span>+version);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                evenType = xmlPullParser.next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showResponse</span><span class="params">(<span class="keyword">final</span> String response)</span> &#123;</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//在这里进行UI操作，将结果显示到界面上</span></span><br><span class="line">                responseText.setText(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看到，这里首先是将HTTP请求的地址改成了<a href="http://10.0.2.2/get_data.xml%EF%BC%8C10.0.2.2%E5%AF%B9%E4%BA%8E%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%9D%A5%E8%AF%B4%E5%B0%B1%E6%98%AF%E7%94%B5%E8%84%91%E6%9C%AC%E6%9C%BA%E7%9A%84IP%E5%9C%B0%E5%9D%80%E3%80%82%E5%9C%A8%E5%BE%97%E5%88%B0%E4%BA%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%94%E5%9B%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E5%90%8E%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B9%B6%E4%B8%8D%E5%86%8D%E7%9B%B4%E6%8E%A5%E5%B0%86%E5%85%B6%E5%B1%95%E7%A4%BA%EF%BC%8C%E8%80%8C%E6%98%AF%E8%B0%83%E7%94%A8%E4%BA%86parseXMLwithPull()%E6%96%B9%E6%B3%95%E6%9D%A5%E8%A7%A3%E6%9E%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%94%E5%9B%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E3%80%82">http://10.0.2.2/get_data.xml，10.0.2.2对于模拟器来说就是电脑本机的IP地址。在得到了服务器返回的数据后，我们并不再直接将其展示，而是调用了parseXMLwithPull()方法来解析服务器返回的数据。</a></p>
</blockquote>
<blockquote>
<p>下面就来仔细看下parseXMLWithPull()方法中的代码吧。首先获取到一个XmlPullParserFactory 的实例，并借助这个实例得到XmlPullParser对象，然后调用XmlpullParser的setInput()方法将服务器返回的XML数据设置进去就可以开始解析了。</p>
<p>通过getEventType()可以得到当前的解析事件，然后在一个while循环中不断地进行解析，<strong>如果当前的解析事件不等于XmIPullParser.END_DOCUMENT，说明解析工作还没完成，调用next()方法后可以获取下一-个解析事件。</strong></p>
</blockquote>
<blockquote>
<p>在while循环中，我们通过getName()方法得到当前节点的名字，如果发现节点名等于 id、name或version，就调用nextText()方法来获取节点内具体的内容,每当解析完一个app节点后就将获取到的内容打印出来。</p>
</blockquote>
<h3 id="SAX解析方式"><a href="#SAX解析方式" class="headerlink" title="SAX解析方式"></a>SAX解析方式</h3><p>修改MainActivity 中的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.networktest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.content.ContentValues.TAG;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.util.Xml;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.xml.sax.InputSource;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.XMLReader;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParser;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserException;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.StringReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParser;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParserFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Request;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    TextView responseText;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">sendRequest</span> <span class="operator">=</span> findViewById(R.id.send_request);</span><br><span class="line">        responseText = findViewById(R.id.response_text);</span><br><span class="line">        sendRequest.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(view.getId() == R.id.send_request) &#123;</span><br><span class="line">            <span class="comment">//sendRequestWithHttpURLConnection();</span></span><br><span class="line">            sendRequestWithOkHttp();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendRequestWithHttpURLConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://blog.csdn.net/&quot;</span>);</span><br><span class="line">                    connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">                    connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">                    connection.setConnectTimeout(<span class="number">8000</span>);</span><br><span class="line">                    connection.setReadTimeout(<span class="number">8000</span>);</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> connection.getInputStream();</span><br><span class="line">                    <span class="comment">//下面对获取到的输入流进行读取</span></span><br><span class="line">                    reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line"></span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                    String line;</span><br><span class="line">                    <span class="keyword">while</span>((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        response.append(line);</span><br><span class="line">                    &#125;</span><br><span class="line">                    showResponse(response.toString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (reader != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            reader.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                        connection.disconnect();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendRequestWithOkHttp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">                    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                            .url(<span class="string">&quot;http://10.0.2.2/get_data.xml&quot;</span>)</span><br><span class="line">                            .build();</span><br><span class="line">                    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">responseData</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">                    parseXMLWithSAX(responseData);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseXMLWithSAX</span><span class="params">(String xmlData)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SAXParserFactory</span> <span class="variable">factory</span> <span class="operator">=</span> SAXParserFactory.newInstance();</span><br><span class="line">            <span class="type">XMLReader</span> <span class="variable">xmlReader</span> <span class="operator">=</span> factory.newSAXParser().getXMLReader();</span><br><span class="line">            <span class="type">ContentHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentHandler</span>();</span><br><span class="line"></span><br><span class="line">            xmlReader.setContentHandler(handler);</span><br><span class="line"></span><br><span class="line">            xmlReader.parse(<span class="keyword">new</span> <span class="title class_">InputSource</span>(<span class="keyword">new</span> <span class="title class_">StringReader</span>(xmlData)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseXMLWithPull</span><span class="params">(String xmlData)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">XmlPullParserFactory</span> <span class="variable">factory</span> <span class="operator">=</span> XmlPullParserFactory.newInstance();</span><br><span class="line">            <span class="type">XmlPullParser</span> <span class="variable">xmlPullParser</span> <span class="operator">=</span> factory.newPullParser();</span><br><span class="line">            xmlPullParser.setInput(<span class="keyword">new</span> <span class="title class_">StringReader</span>(xmlData));</span><br><span class="line">            <span class="type">int</span> <span class="variable">evenType</span> <span class="operator">=</span> xmlPullParser.getEventType();</span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (evenType != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">nodeName</span> <span class="operator">=</span> xmlPullParser.getName();</span><br><span class="line">                <span class="keyword">switch</span> (evenType) &#123;</span><br><span class="line">                    <span class="keyword">case</span> XmlPullParser.START_TAG:&#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;id&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                            id = xmlPullParser.nextText();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;name&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                            name = xmlPullParser.nextText();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;version&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                            version = xmlPullParser.nextText();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//完成解析某个节点</span></span><br><span class="line">                    <span class="keyword">case</span> XmlPullParser.END_TAG: &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;app&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                            Log.d(TAG, TAG+<span class="string">&quot;: id is &quot;</span>+id);</span><br><span class="line">                            Log.d(TAG, TAG+<span class="string">&quot;: name is &quot;</span>+name);</span><br><span class="line">                            Log.d(TAG, TAG+<span class="string">&quot;: version is &quot;</span>+version);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                evenType = xmlPullParser.next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showResponse</span><span class="params">(<span class="keyword">final</span> String response)</span> &#123;</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//在这里进行UI操作，将结果显示到界面上</span></span><br><span class="line">                responseText.setText(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>新建MyHandler类继承DefaultHandler：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.networktest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.xml.sax.Attributes;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.DefaultHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHandler</span> <span class="keyword">extends</span> <span class="title class_">DefaultHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startElement</span><span class="params">(String uri, String localName, String qName,</span></span><br><span class="line"><span class="params">                             Attributes attributes)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">characters</span><span class="params">(<span class="type">char</span>[] ch, <span class="type">int</span> start, <span class="type">int</span> length)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">endDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> startDocument()方法会在开始 XML解析的时候调用；</p>
<p>startElement()方法会在开始解析某个节点的时候调用；</p>
<p>characters()方法会在获取节点中内容的时候调用；</p>
<p>endElement()方法会在完成解析某个节点的时候调用；</p>
<p>endDocument()方法会在完成整个XML解析的时候调用。</p>
<p>需要注意的是，在获取节点中的内容时，<strong>characters()方法可能会被调用多次，一些换行符也被当作内容解析出来</strong>，我们需要针对这种情况在代码中做好控制。</p>
<p>新建ContentHandler类继承DefaultHandler：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.networktest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.xml.sax.Attributes;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.DefaultHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContentHandler</span> <span class="keyword">extends</span> <span class="title class_">DefaultHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String nodeName;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder id;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder name;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">        id = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        name = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        version = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startElement</span><span class="params">(String uri, String localName, String qName,</span></span><br><span class="line"><span class="params">                             Attributes attributes)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">        <span class="comment">//记录当前节点名</span></span><br><span class="line">        nodeName = localName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">characters</span><span class="params">(<span class="type">char</span>[] ch, <span class="type">int</span> start, <span class="type">int</span> length)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">        <span class="comment">//根据当前的节点名判断将内容添加到哪一个StringBuilder对象中</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;id&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">            id.append(ch,start,length);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;name&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">            name.append(ch,start,length);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;version&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">            version.append(ch,start,length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;app&quot;</span>.equals(localName)) &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;ContentHandler&quot;</span>, <span class="string">&quot;endElement: id is &quot;</span>+id.toString().trim());</span><br><span class="line">            Log.d(<span class="string">&quot;ContentHandler&quot;</span>, <span class="string">&quot;endElement: name is &quot;</span>+name.toString().trim());</span><br><span class="line">            Log.d(<span class="string">&quot;ContentHandler&quot;</span>, <span class="string">&quot;endElement: version is &quot;</span>+version.toString().trim());</span><br><span class="line">            id.setLength(<span class="number">0</span>);</span><br><span class="line">            name.setLength(<span class="number">0</span>);</span><br><span class="line">            version.setLength(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">endDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">        <span class="built_in">super</span>.endDocument();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>。每当开始解析某个节点的时候，startElement()方法就会得到调用，其中 localName 参数记录着当前节点的名字。</p>
</blockquote>
<blockquote>
<p>接着在解析节点中具体内容的时候就会调用characters()方法，我们会根据当前的节点名进行判断，将解析出的内容添加到哪一个 StringBuilder对象中。</p>
</blockquote>
<blockquote>
<p>最后在endElement()方法中进行判断，如果app节点已经解析完成，就打印出id、name和 version 的内容。</p>
</blockquote>
<blockquote>
<p>需要注意的是，目前id、name和 version中<strong>都可能是包括回车或换行符的</strong>，因此在打印之前我们还需要<strong>调用一下trim()方法，并且打印完成后还要将StringBuilder的内容清空掉</strong>,不然的话会影响下一次内容的读取。</p>
</blockquote>
<h2 id="解析JSON格式数据"><a href="#解析JSON格式数据" class="headerlink" title="解析JSON格式数据"></a>解析JSON格式数据</h2><blockquote>
<p>比起XML，JSON的主要优势在于它的体积更小，在网络上传输的时候可以更省流量。但缺点在于，它的语义性较差，看起来不如XML直观。</p>
</blockquote>
<h3 id="使用JSONObject"><a href="#使用JSONObject" class="headerlink" title="使用JSONObject"></a>使用JSONObject</h3><p>修改MainActivity 中的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.networktest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.content.ContentValues.TAG;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.util.Xml;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.InputSource;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.XMLReader;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParser;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserException;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.StringReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParser;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParserFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Request;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    TextView responseText;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">sendRequest</span> <span class="operator">=</span> findViewById(R.id.send_request);</span><br><span class="line">        responseText = findViewById(R.id.response_text);</span><br><span class="line">        sendRequest.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(view.getId() == R.id.send_request) &#123;</span><br><span class="line">            <span class="comment">//sendRequestWithHttpURLConnection();</span></span><br><span class="line">            sendRequestWithOkHttp();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendRequestWithHttpURLConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://blog.csdn.net/&quot;</span>);</span><br><span class="line">                    connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">                    connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">                    connection.setConnectTimeout(<span class="number">8000</span>);</span><br><span class="line">                    connection.setReadTimeout(<span class="number">8000</span>);</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> connection.getInputStream();</span><br><span class="line">                    <span class="comment">//下面对获取到的输入流进行读取</span></span><br><span class="line">                    reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                    String line;</span><br><span class="line">                    <span class="keyword">while</span>((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        response.append(line);</span><br><span class="line">                    &#125;</span><br><span class="line">                    showResponse(response.toString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (reader != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            reader.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                        connection.disconnect();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendRequestWithOkHttp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">                    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                            .url(<span class="string">&quot;http://10.0.2.2/get_data.json&quot;</span>)</span><br><span class="line">                            .build();</span><br><span class="line">                    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">responseData</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">                    parseJSONWIthJSONObject(responseData);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseJSONWIthJSONObject</span><span class="params">(String jsonData)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>(jsonData);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;i &lt; jsonArray.length(); i++) &#123;</span><br><span class="line">                <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> jsonArray.getJSONObject(i);</span><br><span class="line">                <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;parseJSONWIthJSONObject: id is &quot;</span> + id);</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;parseJSONWIthJSONObject: name is &quot;</span> + name);</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;parseJSONWIthJSONObject: version is &quot;</span> + version);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseXMLWithSAX</span><span class="params">(String xmlData)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SAXParserFactory</span> <span class="variable">factory</span> <span class="operator">=</span> SAXParserFactory.newInstance();</span><br><span class="line">            <span class="type">XMLReader</span> <span class="variable">xmlReader</span> <span class="operator">=</span> factory.newSAXParser().getXMLReader();</span><br><span class="line">            <span class="type">ContentHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentHandler</span>();</span><br><span class="line"></span><br><span class="line">            xmlReader.setContentHandler(handler);</span><br><span class="line"></span><br><span class="line">            xmlReader.parse(<span class="keyword">new</span> <span class="title class_">InputSource</span>(<span class="keyword">new</span> <span class="title class_">StringReader</span>(xmlData)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseXMLWithPull</span><span class="params">(String xmlData)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">XmlPullParserFactory</span> <span class="variable">factory</span> <span class="operator">=</span> XmlPullParserFactory.newInstance();</span><br><span class="line">            <span class="type">XmlPullParser</span> <span class="variable">xmlPullParser</span> <span class="operator">=</span> factory.newPullParser();</span><br><span class="line">            xmlPullParser.setInput(<span class="keyword">new</span> <span class="title class_">StringReader</span>(xmlData));</span><br><span class="line">            <span class="type">int</span> <span class="variable">evenType</span> <span class="operator">=</span> xmlPullParser.getEventType();</span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (evenType != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">nodeName</span> <span class="operator">=</span> xmlPullParser.getName();</span><br><span class="line">                <span class="keyword">switch</span> (evenType) &#123;</span><br><span class="line">                    <span class="keyword">case</span> XmlPullParser.START_TAG:&#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;id&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                            id = xmlPullParser.nextText();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;name&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                            name = xmlPullParser.nextText();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;version&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                            version = xmlPullParser.nextText();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//完成解析某个节点</span></span><br><span class="line">                    <span class="keyword">case</span> XmlPullParser.END_TAG: &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;app&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                            Log.d(TAG, TAG+<span class="string">&quot;: id is &quot;</span>+id);</span><br><span class="line">                            Log.d(TAG, TAG+<span class="string">&quot;: name is &quot;</span>+name);</span><br><span class="line">                            Log.d(TAG, TAG+<span class="string">&quot;: version is &quot;</span>+version);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                evenType = xmlPullParser.next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showResponse</span><span class="params">(<span class="keyword">final</span> String response)</span> &#123;</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//在这里进行UI操作，将结果显示到界面上</span></span><br><span class="line">                responseText.setText(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在得到了服务器返回的数据后调用parseJSONWithJSONObject()方法来解析数据。</p>
<p>由于我们在服务器中定义的是一个JSON数组，因此这里首先是将服务器返回的数据传入到了一个JSONArray对象中。</p>
<p>然后循环遍历这个JSONArray，从中取出的每一个元素都是一个JSONObject对象，每个JSONObject对象中又会包含id、name和 version这些数据。</p>
<p>接下来只需要调用getString()方法将这些数据取出，并打印出来即可。</p>
<h3 id="使用GSON"><a href="#使用GSON" class="headerlink" title="使用GSON"></a>使用GSON</h3><p>首先要添加依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &#x27;com.google.code.gson:gson:2.7&#x27;</span><br></pre></td></tr></table></figure>

<p>新建一个App类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.networktest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVersion</span><span class="params">(String version)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.version = version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> version;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后修改MainActivity：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.networktest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.content.ContentValues.TAG;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.util.Xml;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.reflect.TypeToken;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.InputSource;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.XMLReader;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParser;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserException;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.StringReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParser;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParserFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Request;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    TextView responseText;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">sendRequest</span> <span class="operator">=</span> findViewById(R.id.send_request);</span><br><span class="line">        responseText = findViewById(R.id.response_text);</span><br><span class="line">        sendRequest.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(view.getId() == R.id.send_request) &#123;</span><br><span class="line">            <span class="comment">//sendRequestWithHttpURLConnection();</span></span><br><span class="line">            sendRequestWithOkHttp();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendRequestWithHttpURLConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://blog.csdn.net/&quot;</span>);</span><br><span class="line">                    connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">                    connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">                    connection.setConnectTimeout(<span class="number">8000</span>);</span><br><span class="line">                    connection.setReadTimeout(<span class="number">8000</span>);</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> connection.getInputStream();</span><br><span class="line">                    <span class="comment">//下面对获取到的输入流进行读取</span></span><br><span class="line">                    reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                    String line;</span><br><span class="line">                    <span class="keyword">while</span>((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        response.append(line);</span><br><span class="line">                    &#125;</span><br><span class="line">                    showResponse(response.toString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (reader != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            reader.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                        connection.disconnect();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendRequestWithOkHttp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">                    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                            .url(<span class="string">&quot;http://10.0.2.2/get_data.json&quot;</span>)</span><br><span class="line">                            .build();</span><br><span class="line">                    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">responseData</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">                    parseJSONWithGSON(responseData);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseJSONWithGSON</span><span class="params">(String jsonData)</span> &#123;</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        List&lt;App&gt; appList = gson.fromJson(jsonData, <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;List&lt;App&gt;&gt;()</span><br><span class="line">        &#123;&#125;.getType());</span><br><span class="line">        <span class="keyword">for</span> (App app : appList) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;parseJSONWithGSON: id is &quot;</span>+app.getId());</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;parseJSONWithGSON: name is &quot;</span>+app.getName());</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;parseJSONWithGSON: id version &quot;</span>+app.getVersion());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseJSONWIthJSONObject</span><span class="params">(String jsonData)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>(jsonData);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;i &lt; jsonArray.length(); i++) &#123;</span><br><span class="line">                <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> jsonArray.getJSONObject(i);</span><br><span class="line">                <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;parseJSONWIthJSONObject: id is &quot;</span> + id);</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;parseJSONWIthJSONObject: name is &quot;</span> + name);</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;parseJSONWIthJSONObject: version is &quot;</span> + version);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseXMLWithSAX</span><span class="params">(String xmlData)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SAXParserFactory</span> <span class="variable">factory</span> <span class="operator">=</span> SAXParserFactory.newInstance();</span><br><span class="line">            <span class="type">XMLReader</span> <span class="variable">xmlReader</span> <span class="operator">=</span> factory.newSAXParser().getXMLReader();</span><br><span class="line">            <span class="type">ContentHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentHandler</span>();</span><br><span class="line"></span><br><span class="line">            xmlReader.setContentHandler(handler);</span><br><span class="line"></span><br><span class="line">            xmlReader.parse(<span class="keyword">new</span> <span class="title class_">InputSource</span>(<span class="keyword">new</span> <span class="title class_">StringReader</span>(xmlData)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseXMLWithPull</span><span class="params">(String xmlData)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">XmlPullParserFactory</span> <span class="variable">factory</span> <span class="operator">=</span> XmlPullParserFactory.newInstance();</span><br><span class="line">            <span class="type">XmlPullParser</span> <span class="variable">xmlPullParser</span> <span class="operator">=</span> factory.newPullParser();</span><br><span class="line">            xmlPullParser.setInput(<span class="keyword">new</span> <span class="title class_">StringReader</span>(xmlData));</span><br><span class="line">            <span class="type">int</span> <span class="variable">evenType</span> <span class="operator">=</span> xmlPullParser.getEventType();</span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (evenType != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">nodeName</span> <span class="operator">=</span> xmlPullParser.getName();</span><br><span class="line">                <span class="keyword">switch</span> (evenType) &#123;</span><br><span class="line">                    <span class="keyword">case</span> XmlPullParser.START_TAG:&#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;id&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                            id = xmlPullParser.nextText();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;name&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                            name = xmlPullParser.nextText();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;version&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                            version = xmlPullParser.nextText();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//完成解析某个节点</span></span><br><span class="line">                    <span class="keyword">case</span> XmlPullParser.END_TAG: &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;app&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                            Log.d(TAG, TAG+<span class="string">&quot;: id is &quot;</span>+id);</span><br><span class="line">                            Log.d(TAG, TAG+<span class="string">&quot;: name is &quot;</span>+name);</span><br><span class="line">                            Log.d(TAG, TAG+<span class="string">&quot;: version is &quot;</span>+version);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                evenType = xmlPullParser.next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showResponse</span><span class="params">(<span class="keyword">final</span> String response)</span> &#123;</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//在这里进行UI操作，将结果显示到界面上</span></span><br><span class="line">                responseText.setText(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>重新运行程序，点击Send Request按钮后观察logcat中的日志，结果和上次一样。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Android控件与布局</title>
    <url>/2022/07/06/Android%E6%8E%A7%E4%BB%B6%E4%B8%8E%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>控件与布局，UI开发</p>
<h2 id="控件的使用"><a href="#控件的使用" class="headerlink" title="控件的使用"></a>控件的使用</h2><p>Android提供了大量的UI控件，合理地使用这些控件就可以轻松地编写出相当不错的界面。</p>
<h3 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h3><p>TextView主要用于在界面上显示一段文本信息。  <br>修改activity_main.xml中的代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">    	  android:id=&quot;@+id/text_view&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:gravity=&quot;center&quot;</span><br><span class="line">        android:textSize=&quot;24sp&quot;</span><br><span class="line">        android:textColor=&quot;#00ff00&quot;</span><br><span class="line">        android:text=&quot;This is TextView&quot; /&gt;</span><br><span class="line">        </span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<p>android:layout_width指定控件的宽度，android:layout_height指定控件的高度。可选值有三种：</p>
<ul>
<li>match_parent: 让当前空间大小和父布局的大小一样</li>
<li>fill_parent: 与match_parent意义相同，官方更推荐match_parent</li>
<li>wrap_content: 让当前控件能够刚好包含住里边的内容</li>
</ul>
<p>android:gravity指定文字的对齐方式，可选值有：top、bottom、left、right、center等，可以用“|”指定多个值。<br>android:textSize指定文字的大小<br>android:textColor指定文字的颜色<br>android:text指定TextView中显示的文本内容  </p>
<h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><p>Button是程序用于与用户进行交互的一个重要控件。<br>在activity_main.xml中添加代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;Button&quot;</span><br><span class="line">        android:textAllCaps=&quot;false&quot;/&gt;</span><br><span class="line">        </span><br><span class="line">      </span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<p>android:textAllCaps&#x3D;”false”禁用自动大写转换  <br>接下来我们可以再MainActivity中为Button的点击事件注册一个监听器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button button = (Button) findViewById(R.id.button);</span><br><span class="line">        button.setsetOnClickListener(new View.OnClickListener()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v)&#123;</span><br><span class="line">                //在此添加逻辑</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以使用接口的方式注册</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button button = (Button) findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v)&#123;</span><br><span class="line">        switch(v.getId())&#123;</span><br><span class="line">            case R.id.button:</span><br><span class="line">                //在此添加逻辑</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h3><p>EditText是程序与用户进行交互的另一个重要控件，它允许用户在控件里输入和编辑内容，并可以在程序中对这些内容进行处理。<br>在activity_main.xml中添加代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id=&quot;@+id/edit_text&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:hint=&quot;Type something here&quot;</span><br><span class="line">        android:maxLines=&quot;2&quot;/&gt;</span><br><span class="line">        </span><br><span class="line">      </span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<p>android:hint属性指定了一段提示性的文本。<br>android:maxLines&#x3D;”2”指定了EditText的最大行数为两行，这样当输入的内容超过两行时，文本就会向上滚动。</p>
<h3 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h3><p>ImageView是用于界面上展示图片的一个控件。<br>在activity_main.xml中添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id=&quot;@+id/image_view&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:src=&quot;@drawable/img_1&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        </span><br><span class="line">      </span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<p>这里使用android:src属性给ImageView指定了一张图片。</p>
<h3 id="ProgressBar"><a href="#ProgressBar" class="headerlink" title="ProgressBar"></a>ProgressBar</h3><p>ProgressBar用于在界面上显示一个进度条，表示程序正在加载一些数据。<br>在activity_main.xml中添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    &lt;ProgressBar</span><br><span class="line">        android:id = &quot;@+id/progress_bar&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        style=&quot;?android:attr/progressBarStyleHorizontal&quot;</span><br><span class="line">        android:max=&quot;100&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        </span><br><span class="line">      </span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<p>style&#x3D;”?android:attr&#x2F;progressBarStyleHorizontal”将其指定为水平进度条，去掉则为圆形进度条。</p>
<h3 id="AlertDialog"><a href="#AlertDialog" class="headerlink" title="AlertDialog"></a>AlertDialog</h3><p>AlertDialog可以在当前的界面弹出一个对话框，其置于所有界面元素之上，能够屏蔽掉其他控件的交互能力。所以AlertDialog一般用于提示一些非常重要的信息。<br>修改MainActivity中的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">		...</span><br><span class="line">		</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v)&#123;</span><br><span class="line">        switch(v.getId())&#123;</span><br><span class="line">            case R.id.button:</span><br><span class="line">                AlertDialog.Builder dialog = new AlertDialog.Builder(MainActivity.this);</span><br><span class="line">                dialog.setTitle(&quot;This is Dialog&quot;);</span><br><span class="line">                dialog.setMessage(&quot;Something important.&quot;);</span><br><span class="line">                dialog.setCancelable(false);</span><br><span class="line">                dialog.setPositiveButton(&quot;OK&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(DialogInterface dialog,int which)&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                dialog.setNegativeButton(&quot;Cancel&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(DialogInterface dialog,int which)&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                dialog.show();</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以为对话框设置标题、内容、可否用Back键关闭等属性。<br>调用setPositiveButton方法为对话框设置确定按钮的点击事件。  </p>
<h2 id="4种基本布局"><a href="#4种基本布局" class="headerlink" title="4种基本布局"></a>4种基本布局</h2><p>布局是一种可用于放置很多控件的容器，它可以按照一定的规律调整内部控件的位置。</p>
<h3 id="线性布局"><a href="#线性布局" class="headerlink" title="线性布局"></a>线性布局</h3><p>LinearLayout又叫线性布局。线性布局会将它所包含的控件在线性方向上依次排序。<br>修改activity_main.xml中的代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    android:orientation=&quot;horizontal&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button1&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_gravity=&quot;top&quot;</span><br><span class="line">        android:text=&quot;Button 1&quot;</span><br><span class="line">        android:textAllCaps=&quot;false&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button2&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_gravity=&quot;center_vertical&quot;</span><br><span class="line">        android:text=&quot;Button 2&quot;</span><br><span class="line">        android:textAllCaps=&quot;false&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button3&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_gravity=&quot;bottom&quot;</span><br><span class="line">        android:text=&quot;Button 3&quot;</span><br><span class="line">        android:textAllCaps=&quot;false&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<p>android:orientation&#x3D;”horizontal”指定线性布局方向为水平,<br>android:orientation&#x3D;”vertical” 指定线性布局方向为垂直。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    android:orientation=&quot;horizontal&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id=&quot;@+id/et1&quot;</span><br><span class="line">        android:layout_width=&quot;0dp&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;</span><br><span class="line">        android:hint=&quot;Type something&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;Button</span><br><span class="line">        android:layout_width=&quot;0dp&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;</span><br><span class="line">        android:text=&quot;send&quot;</span><br><span class="line">        android:textAllCaps=&quot;false&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<p>通过设置控件的android:layout_weight属性来设置控件与控件之间，在宽度上的权重比例大小</p>
<h3 id="相对布局"><a href="#相对布局" class="headerlink" title="相对布局"></a>相对布局</h3><p>RelativeLayout又叫相对布局，控件的位置是按照相对位置来计算的，后一个控件在什么位置依赖于前一个控件的基本位置，是布局最常用，也是最灵活的一种布局。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button3&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_centerInParent=&quot;true&quot;</span><br><span class="line">        android:text=&quot;Button 3&quot;/&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button1&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_above=&quot;@+id/button3&quot;</span><br><span class="line">        android:layout_toLeftOf=&quot;@+id/button3&quot;</span><br><span class="line">        android:text=&quot;Button 1&quot;/&gt;    </span><br><span class="line">        </span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button2&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_above=&quot;@+id/button3&quot;</span><br><span class="line">        android:layout_toRightOf=&quot;@+id/button3&quot;</span><br><span class="line">        android:text=&quot;Button 2&quot;/&gt;    </span><br><span class="line">    </span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>
<p>android:layout_above属性可以让一个控件位于另一个控件的上方，需要为其指定相对控件id的引用。</p>
<h3 id="帧布局"><a href="#帧布局" class="headerlink" title="帧布局"></a>帧布局</h3><p>FrameLayout又叫帧布局，是最为简单的一种布局。<br>采用帧布局时，所有控件都默认显示在屏幕左上角，并按照先后放入的顺序重叠摆放，先放入的将会在最底层，后放入的控件显示在最顶层。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;TextView</span><br><span class="line">    	android:id=&quot;@+id/text_view&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;This is TextView&quot; /&gt; </span><br><span class="line">        </span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id=&quot;@+id/button&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:src=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/FrameLayout&gt;</span><br></pre></td></tr></table></figure>
<p>这时，所有控件位于左上角，并且图显示在顶端。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;TextView</span><br><span class="line">    	android:id=&quot;@+id/text_view&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:gravity=&quot;left&quot;</span><br><span class="line">        android:text=&quot;This is TextView&quot; /&gt; </span><br><span class="line">        </span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id=&quot;@+id/button&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:gravity=&quot;right&quot;</span><br><span class="line">        android:src=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/FrameLayout&gt;</span><br></pre></td></tr></table></figure>
<h3 id="百分比布局"><a href="#百分比布局" class="headerlink" title="百分比布局"></a>百分比布局</h3><p>百分比布局只为FrameLayout和RelativeLayout进行了功能拓展，提供了PercentFrameLayout和PercentRelativeLayout<br>Android团队将百分比布局定义在了support库当中，我们只需要在项目的build.gradle中添加百分比布局库的依赖即可使用。  <br>打开app&#x2F;build.gradle文件，在dependencies闭包中添加如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation&#x27;com.android.support:percent:26.0.0&#x27;</span><br></pre></td></tr></table></figure>
<p>然后会弹出提示：</p>
<blockquote>
<p>Gradle files have changed since last project sync. A project sync may be necessary for the IDE to work properly.  Sync Now  </p>
</blockquote>
<p>点击Sync Now 再次同步即可。  <br>接下来修改activity_main.xml中的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;android.support.percent.PercentFrameLayout</span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://scheme.android.com/apk/res-auto&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button1&quot;</span><br><span class="line">        android:text=&quot;Button 1&quot;</span><br><span class="line">        android:layout_gravity=&quot;left|top&quot;</span><br><span class="line">        app:layout_widthPercent=&quot;50%&quot;</span><br><span class="line">        app:layout_heightPercent=&quot;50%&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button2&quot;</span><br><span class="line">        android:text=&quot;Button 2&quot;</span><br><span class="line">        android:layout_gravity=&quot;right|top&quot;</span><br><span class="line">        app:layout_widthPercent=&quot;50%&quot;</span><br><span class="line">        app:layout_heightPercent=&quot;50%&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button3&quot;</span><br><span class="line">        android:text=&quot;Button 3&quot;</span><br><span class="line">        android:layout_gravity=&quot;left|bottom&quot;</span><br><span class="line">        app:layout_widthPercent=&quot;50%&quot;</span><br><span class="line">        app:layout_heightPercent=&quot;50%&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button4&quot;</span><br><span class="line">        android:text=&quot;Button 4&quot;</span><br><span class="line">        android:layout_gravity=&quot;right|bottom&quot;</span><br><span class="line">        app:layout_widthPercent=&quot;50%&quot;</span><br><span class="line">        app:layout_heightPercent=&quot;50%&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.percent.PercentFrameLayout&gt;</span><br></pre></td></tr></table></figure>
<h2 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a>自定义控件</h2><h3 id="引入布局"><a href="#引入布局" class="headerlink" title="引入布局"></a>引入布局</h3><p>首先，创建一个UICustomViews项目。  <br>新建一个布局title.xml。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">    android:background=&quot;@drawable/img_2&quot;&gt;</span><br><span class="line">    &lt;!--&quot;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/title_back&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_gravity=&quot;center&quot;</span><br><span class="line">        android:layout_margin=&quot;5dp&quot;</span><br><span class="line"></span><br><span class="line">        android:text=&quot;Back&quot;</span><br><span class="line">        android:textColor=&quot;#fff&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;!--android:background=&quot;@drawable/img_1&quot;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/title_text&quot;</span><br><span class="line">        android:layout_width=&quot;0dp&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_gravity=&quot;center&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;</span><br><span class="line">        android:gravity=&quot;center&quot;</span><br><span class="line">        android:text=&quot;Title Text&quot;</span><br><span class="line">        android:textColor=&quot;#fff&quot;</span><br><span class="line">        android:textSize=&quot;24sp&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/title_edit&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_gravity=&quot;center&quot;</span><br><span class="line">        android:layout_margin=&quot;5dp&quot;</span><br><span class="line"></span><br><span class="line">        android:text=&quot;Edit&quot;</span><br><span class="line">        android:textColor=&quot;#fff&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;!--android:background=&quot;@drawable/img_2&quot;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<p>然后通过一行include语句将这个布局引入<br>activity_main.xml代码修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;include layout=&quot;@layout/title&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<h3 id="自定义控件-1"><a href="#自定义控件-1" class="headerlink" title="自定义控件"></a>自定义控件</h3><p>新建一个TitleLayout继承自LinearLayout</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TitleLayout extends LinearLayout &#123;</span><br><span class="line">    public TitleLayout(Context context, AttributeSet attrs)&#123;</span><br><span class="line">        super(context,attrs);</span><br><span class="line">        LayoutInflater.from(context).inflate(R.layout.title,this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在布局文件中添加这个自定义控件<br>activity_main.xml代码修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--&lt;include layout=&quot;@layout/title&quot;/&gt;--&gt;</span><br><span class="line">    &lt;com.example.uicustomviews.TitleLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<p>为按钮注册点击事件,修改TitleLayout中的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public class TitleLayout extends LinearLayout &#123;</span><br><span class="line">    public TitleLayout(Context context, AttributeSet attrs)&#123;</span><br><span class="line">        super(context,attrs);</span><br><span class="line">        LayoutInflater.from(context).inflate(R.layout.title,this);</span><br><span class="line">        Button titleBack = (Button) findViewById(R.id.title_back);</span><br><span class="line">        Button titleEdit = (Button) findViewById(R.id.title_edit);</span><br><span class="line">        titleBack.setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                ((Activity)getContext()).finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        titleEdit.setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                Toast.makeText(getContext(), &quot;You clicked Edit button&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就完成了。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Android广播机制</title>
    <url>/2022/08/09/Android%E5%B9%BF%E6%92%AD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>在Android开发中，BroadcastReceiver（广播接收器）的应用场景非常多，是一个全局的监听器，属于Android四大组件之一。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Android中的每一个应用都可以对自己感兴趣的广播进行注册，这样程序就只会受到自己所关心的广播内容。  <br>Android中的广播主要可以分为两种类型：标准广播和有序广播。  </p>
<ul>
<li><strong>标准广播</strong>（Normal broadcasts）是一种完全异步执行的广播。在广播发出后，所有的广播接收器几乎都会在同一时刻接收到这条广播信息，然后各自进行相应的逻辑处理。标准广播的优点是效率高，但与此同时，也意味着标准广播是无法被截断的，所有的广播接收器都可以接收到。</li>
<li><strong>有序广播</strong>（Ordered broadcasts）是一种同步执行的广播。在广播发出后，同一时间只能有一个优先级最高的广播接收器来接收。在优先级高的广播接收器接收到广播并且执行完内部逻辑后，广播才会继续往优先级低的广播接收器传递，或者优先级高的广播接收器判定广播不需要继续往下传递的时候，则会截断广播，这样后面的广播接收器就不会接收到广播了。</li>
</ul>
<h2 id="接受系统广播"><a href="#接受系统广播" class="headerlink" title="接受系统广播"></a>接受系统广播</h2><p>Android内置了很多系统级别的广播，我们可以再应用程序中通过监听这些广播来得到各种系统的状态信息。<br>广播有两种注册方式：动态注册和静态注册。<br>动态注册就是在代码中注册，当你需要用到广播接收器的时候直接在代码中注册；<br>而静态注册则是在AndroidManifest.xml文件中进行注册。</p>
<h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p><strong>如何创建一个广播接收器呢？</strong>  <br>只需要新建一个类，让它继承自BroadcastReceiver，并重写父类的onReceive()方法就可以了。这样当广播到来时，onReceive()方法就会得到执行。  <br>新建一个BroadcastTest项目，修改MainActivity中的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IntentFilter intentFilter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NetworkChangeReceiver networkChangeReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        intentFilter  = <span class="keyword">new</span> <span class="title class_">IntentFilter</span>();</span><br><span class="line">        intentFilter.addAction(<span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>);</span><br><span class="line">        networkChangeReceiver = <span class="keyword">new</span> <span class="title class_">NetworkChangeReceiver</span>();</span><br><span class="line">        registerReceiver(networkChangeReceiver,intentFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        unregisterReceiver(networkChangeReceiver);<span class="comment">//取消注册</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">NetworkChangeReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">            Toast.makeText(context, <span class="string">&quot;network changes&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后很重要的一点是：<strong>动态注册的广播接收器一定都要取消注册才行。</strong>  <br>这样就能网络发生变化时出现提示了。  <br>下面可以对代码进行优化，在网络变化时告诉你时有网络还是没有网络。  <br>修改MainActivity中的代码。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IntentFilter intentFilter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NetworkChangeReceiver networkChangeReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        intentFilter  = <span class="keyword">new</span> <span class="title class_">IntentFilter</span>();</span><br><span class="line">        intentFilter.addAction(<span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>);</span><br><span class="line">        networkChangeReceiver = <span class="keyword">new</span> <span class="title class_">NetworkChangeReceiver</span>();</span><br><span class="line">        registerReceiver(networkChangeReceiver,intentFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        unregisterReceiver(networkChangeReceiver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">NetworkChangeReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">            <span class="type">ConnectivityManager</span> <span class="variable">connectivityManager</span> <span class="operator">=</span> (ConnectivityManager)</span><br><span class="line">                    getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">            <span class="type">NetworkInfo</span> <span class="variable">networkInfo</span> <span class="operator">=</span> connectivityManager.getActiveNetworkInfo();</span><br><span class="line">            <span class="keyword">if</span>(networkInfo != <span class="literal">null</span> &amp;&amp; networkInfo.isAvailable())&#123;</span><br><span class="line">                Toast.makeText(context,<span class="string">&quot;network is available&quot;</span>,</span><br><span class="line">                        Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                Toast.makeText(context,<span class="string">&quot;network is unavailable&quot;</span>,</span><br><span class="line">                        Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在onReceive()方法中，首先通过getSystemService()方法得到了ConnectivityManager的实例，这是一个系统服务类，专门用于管理网络连接，然后调用它的getActiveNetworkInfo()方法可以得到NetworkInfo的实例，接着调用NetworkInfo的isAvailable()方法，就可以判断当前是否有网络了。<br>另外，Android系统为了保护用户的安全和隐私，做了严格的规定：<strong>如果程序需要进行一些对用户来说比较敏感的操作，就必须在配置文件中声明权限</strong>，否则程序将会直接崩溃。  <br>在AndroidManifest.xml文件中加入如下权限：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.broadcasttest&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">       .......</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>动态注册广播接收器比较灵活，但是动态注册的广播接收器只能在程序启动之后才能接收到广播。  <br>所以，使用静态注册的方式就可以在程序未启动的情况下就能收到广播。<br>通过快捷方式创建一个广播接收器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BootCompleteReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> This method is called when the BroadcastReceiver is receiving</span></span><br><span class="line">        <span class="comment">// an Intent broadcast.</span></span><br><span class="line">        Toast.makeText(context, <span class="string">&quot;Boot Complete&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>静态的广播接收器一定要在AndroidManifest.xml中注册，这一步因为快捷创建已被自动完成。  <br>修改AndroidManifest.xml。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.broadcasttest&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:dataExtractionRules</span>=<span class="string">&quot;@xml/data_extraction_rules&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fullBackupContent</span>=<span class="string">&quot;@xml/backup_rules&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.BroadcastTest&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:targetApi</span>=<span class="string">&quot;31&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.BootCompleteReceiver&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后就完成了。</p>
<h2 id="自定义广播"><a href="#自定义广播" class="headerlink" title="自定义广播"></a>自定义广播</h2><h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>主要步骤如下：<br>1.定义一个广播接收器来准备接受此广播；  <br>2.在AndroidManifest.xml中对这个广播进行修改；  <br>3.构建Intent对象，传入要发送的广播的值。<br>4.调用sendBroadacst()方法发送。</p>
<h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>主要步骤：<br>1.定义一个广播接收器；  <br>2.创建Intent()对象的实例，使用构造函数进行初始化对象，在此传入想要发送的广播类型；<br>3.调用sendOrdeBroadacst()方法；<br>4.进行有序广播的编写，即进行优先度的考虑。<br>在XML注册文件中广播接收器中进行写入<br><code>&lt;intent-filter android:priority=&quot;100&quot;&gt;</code><br>，100代表对优先级的描述。</p>
<h2 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h2><p>标准广播和有序广播都是全局广播，发出的广播任意一个程序都可以接收到，这就很容易导致安全性问题，比如有时候发送的广播携带有关键性数据，有可能会被别的应用程序拦截。<br>为了解决全局广播的安全性问题，Android引进了本地广播机制。本地广播发出后只能够在应用程序内部传递，也只有应用程序内部的接收器能接收到本地广播，这样广播的安全问题就能解决了。<br>本地广播和全局广播不同的地方在于本地广播主要使用LocalBroadcastManager对广播进行管理。<br>修改MainActivity中的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IntentFilter intentFilter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalReceiver localReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalBroadcastManager localBroadcastManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        localBroadcastManager = LocalBroadcastManager.getInstance(<span class="built_in">this</span>);<span class="comment">//获取实例</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> (Button) findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="string">&quot;com.example.broadcasttest.Local_BROADCAST&quot;</span>);</span><br><span class="line">                localBroadcastManager.sendBroadcast(intent);<span class="comment">//发送本地广播</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        intentFilter = <span class="keyword">new</span> <span class="title class_">IntentFilter</span>();</span><br><span class="line">        intentFilter.addAction(<span class="string">&quot;com.example.broadcasttest.Local_BROADCAST&quot;</span>);</span><br><span class="line">        localReceiver = <span class="keyword">new</span> <span class="title class_">LocalReceiver</span>();</span><br><span class="line">        localBroadcastManager.registerReceiver(localReceiver,intentFilter);</span><br><span class="line">        <span class="comment">//注册本地广播监听器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        localBroadcastManager.unregisterReceiver(localReceiver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">LocalReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">                Toast.makeText(context,<span class="string">&quot;receive local broadcast&quot;</span>,</span><br><span class="line">                        Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本地广播的应用和前面的动态注册广播接收器和发送标准广播差别并不大，只是本地广播需要先通过LocalBroadcastManager的getInstance(this)方法来获取一个LocalBroadcastManager的实例，然后在发送本地广播、注册广播接收器和注销广播接收器的时候都是通过这个实例进行操作。<br>另外，本地广播无法静态注册，因为完全没有必要的。</p>
<blockquote>
<p>本地广播的优势：</p>
<ul>
<li>不必担心数据泄露等问题；</li>
<li>程序无法将广播发送到我们程序的内部，不会导致安全性问题；</li>
<li>本地广播相对于标准广播更加高效。</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Android数据存储</title>
    <url>/2022/08/19/Android%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<p>瞬时数据指那些存储在内存当中，有可能因为程序关闭或其他原因导致内存被回收而丢失的数据。  <br>数据持久化就是指将那些内存中的瞬时数据保存在存储设备中，保证即使在手机或电脑关机的情况下，这些数据仍然不会丢失。<br>Android中主要有3种方式实现数据持久化：文件存储、SharePreferences和数据库存储。</p>
<h2 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h2><p>文件存储比较适用于存储一些简单的文本数据或二进制数据。</p>
<h3 id="将数据存储在文件中"><a href="#将数据存储在文件中" class="headerlink" title="将数据存储在文件中"></a>将数据存储在文件中</h3><p>Context类中提供了一个openFileOutput方法，可以将数据存储到指定的文件中。<br>它接收两个参数：第一个参数是文件名，不包含路径，默认保存到&#x2F;data&#x2F;data&#x2F;package&#x2F;files目录下；第二个参数是文件的操作模式，主要有两种模式：MODE_PRIVATE和MODE_APPEND.<br>其中MODE_PRIVATE是默认的操作模式，表示当指定同样文件名的时候，所写入的内容将会覆盖原文件中的内容；而MODE_APPEND则表示如果该文件已经存在，就往文件中追加内容，不存在就创建新文件。<br>openFileOutput返回的是一个FileOutputStream对象。<br>新建一个FilePersistenceTest项目。主要代码如下：<br>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/activity_main&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.fkq.filepersistencetest.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/edit&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;Type someing here&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText editText;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        editText = (EditText) findViewById(R.id.edit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.e(<span class="string">&quot;MainActivity&quot;</span>,<span class="string">&quot;进来了吗&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputText</span> <span class="operator">=</span> editText.getText().toString();</span><br><span class="line">        save(inputText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(String inputText)</span> &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = openFileOutput(<span class="string">&quot;data&quot;</span>, Context.MODE_PRIVATE);</span><br><span class="line">            writer = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(out));</span><br><span class="line">            writer.write(inputText);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (writer != <span class="literal">null</span>) &#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以通过Android Studio右侧的Device File Explorer的&#x2F;data&#x2F;data&#x2F;com.example.filepersistencetest&#x2F;files&#x2F;目录查看文件。</p>
<h3 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h3><p>Context类中提供了一个openFileInput方法，用于从文件中读取数据。它只接收一个参数，即要读取的文件名，然后系统会自动到&#x2F;data&#x2F;data&#x2F;package name&#x2F;files目录下去加载这个文件，并返回一个FileInputStream对象，得到了这个对象之后再通过java流的方式将数据读取出来。<br>修改MainActivity中的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText edit;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        edit = (EditText) findViewById(R.id.edit);</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputText</span> <span class="operator">=</span> load();</span><br><span class="line">        <span class="keyword">if</span>(!TextUtils.isEmpty(inputText))&#123;</span><br><span class="line">            edit.setText(inputText);</span><br><span class="line">            edit.setSelection(inputText.length());</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Restoring succeeded&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputText</span> <span class="operator">=</span> edit.getText().toString();</span><br><span class="line">        save(inputText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(String inputText)</span>&#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = openFileOutput(<span class="string">&quot;data&quot;</span>, Context.MODE_PRIVATE);</span><br><span class="line">            writer = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(out));</span><br><span class="line">            writer.write(inputText);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(writer != <span class="literal">null</span>)&#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">load</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            in = openFileInput(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">            reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span>((line = reader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                content.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(reader != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> content.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SharePreferences存储"><a href="#SharePreferences存储" class="headerlink" title="SharePreferences存储"></a>SharePreferences存储</h2><p>SharedPreferences是使用键值对的方式存储数据的，并且支持多种不同的数据类型存储。  </p>
<h3 id="将数据存储到SharePreferences中"><a href="#将数据存储到SharePreferences中" class="headerlink" title="将数据存储到SharePreferences中"></a>将数据存储到SharePreferences中</h3><p>首先要获得SharePreferences对象，有三种方法：</p>
<ul>
<li>Context类中的getSharedPreferences方法：</li>
<li>Activity类中的getPreferences方法：</li>
<li>PreferenceManager类中的getDefaultSharedPreferences方法</li>
</ul>
<p>得到SharePreferences对象后，向SharePreferences文件中存储数据三步骤：</p>
<ul>
<li>调用SharePreferences对象的edit()方法来获取一个SharedPreferences.Editor对象。</li>
<li>向SharedPreferences.Editor对象中添加数据。</li>
</ul>
<ul>
<li>调用apply()方法将添加的数据提交，从而完成数据存储操作。</li>
</ul>
<p>主要部分代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SharedPreferences.<span class="type">Editor</span> <span class="variable">editor</span> <span class="operator">=</span> getSharedPreferences(<span class="string">&quot;data&quot;</span>, MODE_PRIVATE).edit();</span><br><span class="line">editor.putString(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">editor.putInt(<span class="string">&quot;age&quot;</span>, <span class="number">28</span>);</span><br><span class="line">editor.putBoolean(<span class="string">&quot;married&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">editor.apply();</span><br></pre></td></tr></table></figure>

<h3 id="从SharePreferences中读取数据"><a href="#从SharePreferences中读取数据" class="headerlink" title="从SharePreferences中读取数据"></a>从SharePreferences中读取数据</h3><p>SharePreferences对象中提供了一系列的get方法，用于对存储的数据进行读取，每种get方法都对应了SharedPreferences.Editor中的一种put方法，比如读取取布尔型数据就用getBoolean方法，读取字符串数据就用getString方法。<br>这些get方法接收两个参数，第一个参数是键，传入存储数据时使用的键就可以得到响相应的值了；第二个参数是默认值，即表示当传入的键找不到对应的值时会以什么样的默认值进行返回。<br>主要部分代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SharedPreferences</span> <span class="variable">preferences</span> <span class="operator">=</span> getSharedPreferences(<span class="string">&quot;data&quot;</span>,MODE_PRIVATE);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> preferences.getString(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> preferences.getInt(<span class="string">&quot;age&quot;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">married</span> <span class="operator">=</span> preferences.getBoolean(<span class="string">&quot;married&quot;</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<h2 id="SQLite数据库存储"><a href="#SQLite数据库存储" class="headerlink" title="SQLite数据库存储"></a>SQLite数据库存储</h2><p>SQLite是一款轻量级的关系型数据库，它的运算速度非常快，占用资源很少。它不仅支持标准的SQL语法，还遵循了数据库的ACID事务。他甚至不需要设置用户名和密码就可以使用。</p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote>
<p>Android 提供了SQLiteOpenHelper帮助类，借助这个类可以非常简单地对数据库进行创建和升级。  </p>
</blockquote>
<blockquote>
<p>SQLiteOpenHelper是一个抽象类，想使用它，就需要创建一个自己的帮助类去继承它。SQLiteOpenHelper中有两个抽象方法，分别是onCreate()和onUpgrade(),我们必须在自己的帮助类里重写这两个方法，然后分别在两个方法中去实现创建、升级数据库的逻辑。  </p>
</blockquote>
<blockquote>
<p>SQLiteOpenHelper还有两个非常重要的实例方法：getReadableDatabase()和getWriteableDatabase()。这两个方法都可以创建或打开一个现有的数据库（如果数据库已存在则打开，否则创建一个新的数据库），并返回一个可对数据库进行读写操作的对象。不同的是，当数据库不可写入的时候（如磁盘空间已满），getReadableDatabase方法返回的对象将以只读的方式去打开数据库，而getWritableDatabase方法则将出现异常。  </p>
</blockquote>
<blockquote>
<p>SQLiteOpenHelper中有两个构造方法可重写，一般使用参数少一点的即可。这个构造方法一共接收4个参数，第一个参数是Context，第二个参数是数据库名，第三个参数允许我们在查询数据的时候返回一个自定的Cursor，一般都是传入null，第四个参数表示当前数据库的版本号，可用于对数据库进行升级操作。构建出SQLiteOpenHelper的实例后，再调用它的getReadableDatabase()或getWritableDatabase()方法就能够创建数据库了。此时onCreate方法也会执行，通常会在这里处理一些创建表的逻辑。</p>
</blockquote>
<p>新建一个DatabaseTest项目。<br>SQLite的数据类型：integer表示整型，real表示浮点型，text表示文本类型，blob表示二进制类型。此外，使用primary key将id设为主键，并用autoincrement关键字表示id列是自增长的。<br>新建MyDatabaseOpenHelper类继承自SQLiteOpenHelper：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDatabaseOpenHelper</span> <span class="keyword">extends</span> <span class="title class_">SQLiteOpenHelper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CREATE_BOOK</span> <span class="operator">=</span> <span class="string">&quot;create table Book(&quot;</span></span><br><span class="line">            + <span class="string">&quot;id integer primary key autoincrement,&quot;</span></span><br><span class="line">            + <span class="string">&quot;author text,&quot;</span></span><br><span class="line">            + <span class="string">&quot;price real,&quot;</span></span><br><span class="line">            + <span class="string">&quot;pages integer,&quot;</span></span><br><span class="line">            + <span class="string">&quot;name text)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDatabaseOpenHelper</span><span class="params">(Context context, String name, SQLiteDatabase.CursorFactory factory, <span class="type">int</span> version)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, name, factory, version);</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(SQLiteDatabase db)</span> &#123;</span><br><span class="line">        db.execSQL(CREATE_BOOK);</span><br><span class="line">        Toast.makeText(mContext, <span class="string">&quot;Create succeeded&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="type">int</span> oldVersion, <span class="type">int</span> newVersion)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 我们把建表语句定义成了一个字符串常量，然后在onCreate()方法中又调用了SQLiteDatabase的exexSQL()方法去执行这条建表语句，并弹出Toast.<br> 然后在布局文件中添加一个按钮，再修改MainActivity中的代码：<br> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">       setContentView(R.layout.activity_main);</span><br><span class="line">       dbHelper = <span class="keyword">new</span> <span class="title class_">MyDatabaseHelper</span>(<span class="built_in">this</span>,<span class="string">&quot;BookStore.db&quot;</span>,<span class="literal">null</span>,<span class="number">2</span>);</span><br><span class="line">       <span class="type">Button</span> <span class="variable">crateDatabase</span> <span class="operator">=</span> findViewById(R.id.create_database);</span><br><span class="line">       crateDatabase.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">               dbHelper.getWritableDatabase();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><br>这样，点击按钮后就会创建成功了。</p>
<h3 id="使用adb-shell检查数据库"><a href="#使用adb-shell检查数据库" class="headerlink" title="使用adb shell检查数据库"></a>使用adb shell检查数据库</h3><p>adb 是Android SDK自带的调试工具，它在Android SDK的platform-tools目录下。  <br>首先配置好环境，把sdk下的platform-tools路径配置到Path下。  <br>配置好后，打开命令行界面，输入adb shell，进入设备的控制台。<br>$代表普通管理员，输入su就可以切换成超级管理员，符号为#，这样才能继续。  <br>然后cd &#x2F;data&#x2F;data&#x2F;com.example.databasetest&#x2F;databases 进入目录。<br>ls 查看该目录下的文件<br>sqlite3 BookStore.db 打开数据库<br>.table 查看数据库中有哪些表<br>.schema 查看建表语句<br>.exit或.quit 退出数据库的编辑<br>再输入exit就可以退出设备控制台  </p>
<h3 id="升级数据库"><a href="#升级数据库" class="headerlink" title="升级数据库"></a>升级数据库</h3><p>onUpgrade()方法是用来对数据库进行升级的。<br>现在需要再添加一张Category表用于记录图书的分类，这个时候就需要升级数据库。  <br>修改MyDatabaseHelper类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDatabaseHelper</span> <span class="keyword">extends</span> <span class="title class_">SQLiteOpenHelper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CREATE_BOOK</span> <span class="operator">=</span> <span class="string">&quot;create table Book(&quot;</span></span><br><span class="line">            + <span class="string">&quot;id integer primary key autoincrement,&quot;</span></span><br><span class="line">            + <span class="string">&quot;author text,&quot;</span></span><br><span class="line">            + <span class="string">&quot;price real,&quot;</span></span><br><span class="line">            + <span class="string">&quot;pages integer,&quot;</span></span><br><span class="line">            + <span class="string">&quot;name text)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CREATE_CATEGORY</span> <span class="operator">=</span> <span class="string">&quot;create table Category(&quot;</span></span><br><span class="line">            + <span class="string">&quot;id integer primary key autoincrement,&quot;</span></span><br><span class="line">            + <span class="string">&quot;category_name text,&quot;</span></span><br><span class="line">            + <span class="string">&quot;category_code integer)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDatabaseHelper</span><span class="params">(Context context, String name,</span></span><br><span class="line"><span class="params">                            SQLiteDatabase.CursorFactory factory, <span class="type">int</span> version)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(context,name,factory,version);</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(SQLiteDatabase db)</span> &#123;</span><br><span class="line">        db.execSQL(CREATE_BOOK);</span><br><span class="line">        db.execSQL(CREATE_CATEGORY);</span><br><span class="line">        Toast.makeText(mContext, <span class="string">&quot;Create succeeded&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="type">int</span> oldVersion, <span class="type">int</span> newVersion)</span> &#123;</span><br><span class="line">        db.execSQL(<span class="string">&quot;drop table if exists Book&quot;</span>);</span><br><span class="line">        db.execSQL(<span class="string">&quot;drop table if exists Category&quot;</span>);</span><br><span class="line">        onCreate(db);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们在onUpgrade方法中执行了两条DROP语句，如果发现数据库中已经存在Book表或Category表，就将这两张表删除掉，然后再调用onCreate()方法重新创建。<br>然后修改MainActivity中的代码。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">databaseOpenHelper = <span class="keyword">new</span> <span class="title class_">MyDatabaseOpenHelper</span>(<span class="built_in">this</span>, <span class="string">&quot;BookStore.db&quot;</span>, <span class="literal">null</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>为了让onUpgrade方法得到执行，修改数据库的版本号为2，表示对数据库进行升级。  </p>
<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>SQLiteDatabase的insert()方法专用于添加数据，它接收3个参数：第一个参数是表名，第二个参数用于在未指定添加数据的情况下给某些可为空的列自动赋值NULL，传入null即可，第三个参数是一个ContentValues对象，它提供了一系列的put()方法重载，用于向ContentValues中添加数据。  <br>主要代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">addData</span> <span class="operator">=</span> findViewById(R.id.add_data);</span><br><span class="line">addData.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="type">SQLiteDatabase</span> <span class="variable">db</span> <span class="operator">=</span> dbHelper.getWritableDatabase();</span><br><span class="line">                <span class="type">ContentValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentValues</span>();</span><br><span class="line">                <span class="comment">//开始组装第一条数据</span></span><br><span class="line">                values.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;The Da Vinci Code&quot;</span>);</span><br><span class="line">                values.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;Dan Brown&quot;</span>);</span><br><span class="line">                values.put(<span class="string">&quot;pages&quot;</span>,<span class="number">454</span>);</span><br><span class="line">                values.put(<span class="string">&quot;price&quot;</span>,<span class="number">16.96</span>);</span><br><span class="line">                db.insert(<span class="string">&quot;Book&quot;</span>,<span class="literal">null</span>,values);<span class="comment">//插入第一条数据</span></span><br><span class="line">                values.clear();</span><br><span class="line">                <span class="comment">//开始组装第二条数据</span></span><br><span class="line">                values.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;The Lost Symbol&quot;</span>);</span><br><span class="line">                values.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;Dan Brown&quot;</span>);</span><br><span class="line">                values.put(<span class="string">&quot;pages&quot;</span>,<span class="number">510</span>);</span><br><span class="line">                values.put(<span class="string">&quot;price&quot;</span>,<span class="number">19.95</span>);</span><br><span class="line">                db.insert(<span class="string">&quot;Book&quot;</span>,<span class="literal">null</span>,values);<span class="comment">//插入第二条数据</span></span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>,</span><br><span class="line">                        <span class="string">&quot;Succeeded&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);        </span><br></pre></td></tr></table></figure>
<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>利用update()方法更新数据，方法接收4个参数：第一个参数是表名；第二个参数是ContentValues对象，要把更新数据在这里组装进去；第三个和第四个参数用于约束更新某一行或某几行中的数据，不指定的话默认就是更新所有行。  <br>主要代码：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">updateData</span> <span class="operator">=</span> findViewById(R.id.update_data);</span><br><span class="line"> updateData.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="type">SQLiteDatabase</span> <span class="variable">db</span> <span class="operator">=</span> dbHelper.getWritableDatabase();</span><br><span class="line">                <span class="type">ContentValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentValues</span>();</span><br><span class="line">                values.put(<span class="string">&quot;price&quot;</span>,<span class="number">10.99</span>);</span><br><span class="line">                db.update(<span class="string">&quot;Book&quot;</span>,values,<span class="string">&quot;name = ?&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;The Da Vinci Code&quot;</span>&#125;);</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>,</span><br><span class="line">                        <span class="string">&quot;Succeeded&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>第三个参数相当于SQL语句的where部分，表示更新所有name等于？的行，？是一个占位符。第四个参数中数组中的内容为这个占位符指定了相应的内容。  </p>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>SQLiteDatabase中提供了一个delete()方法，专门用于删除数据。方法接收3个参数：第一个参数仍然是表名，第二、第三个参数又是用于约束删除某一行或者某几行的数据，不指定的话默认就是删除所有行。<br>主要代码部分：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">deleteButton</span> <span class="operator">=</span> findViewById(R.id.delete_data);</span><br><span class="line">deleteButton.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">SQLiteDatabase</span> <span class="variable">db</span> <span class="operator">=</span> dbHelper.getWritableDatabase();</span><br><span class="line">        db.delete(<span class="string">&quot;Book&quot;</span>,<span class="string">&quot;pages &gt; ?&quot;</span>,<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;500&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>SQLiteDatabase中提供了query()方法对数据库进行查询。这个方法最短的一个方法重载也需要传递7个参数。<br>第一个参数表名；<br>第二个参数用于指定查询哪几列，如果不指定默认查询所有列；<br>第三、第四个参数用于约束查询某一行或某几行的数据，如果不指定则默认查询所有航的数据。<br>第五个参数用于指定需要去group by的列，不指定则表示不对查询结构进行group by操作。<br>第六个参数用于对group by 之后的数据进行进一步的过滤，不指定则表示不进行过滤。<br>第七个参数用于指定查询结果的排序方式，不指定则表示使用默认的排序方式。  </p>
<table>
<thead>
<tr>
<th>query()方法参数</th>
<th>对应SQL部分</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>table</td>
<td>from tanle_name</td>
<td>指定查询的表名</td>
</tr>
<tr>
<td>columns</td>
<td>select colum1,column2</td>
<td>指定查询的列名</td>
</tr>
<tr>
<td>selection</td>
<td>where column &#x3D; value</td>
<td>指定where的约束条件</td>
</tr>
<tr>
<td>selectionArgs</td>
<td>-</td>
<td>为where中的占位符提供具体的值</td>
</tr>
<tr>
<td>groupBy</td>
<td>group by column</td>
<td>指定需要group by的列</td>
</tr>
<tr>
<td>having</td>
<td>having column &#x3D; value</td>
<td>对group by后的结果进一步约束</td>
</tr>
<tr>
<td>orderBy</td>
<td>order by column1,column2</td>
<td>指定查询结果的排序方式</td>
</tr>
</tbody></table>
<p>调用query()方法后返回一个Cursor对象，查询到的所有的数据都是从这个对象中取出。  <br>主要代码： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">queryButton</span> <span class="operator">=</span> findViewById(R.id.query_data);</span><br><span class="line">queryButton.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="type">SQLiteDatabase</span> <span class="variable">db</span> <span class="operator">=</span> dbHelper.getWritableDatabase();</span><br><span class="line">                <span class="comment">//查询Book表中的所有数据</span></span><br><span class="line">                <span class="type">Cursor</span> <span class="variable">cursor</span> <span class="operator">=</span> db.query(<span class="string">&quot;Book&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,</span><br><span class="line">                        <span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">if</span>(cursor.moveToFirst())&#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="comment">//遍历Cursor对象，取出数据并打印</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cursor.getString(cursor.getColumnIndex(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                        <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> cursor.getString(cursor.getColumnIndex(<span class="string">&quot;author&quot;</span>));</span><br><span class="line">                        <span class="type">int</span> <span class="variable">pages</span> <span class="operator">=</span> cursor.getInt(cursor.getColumnIndex(<span class="string">&quot;pages&quot;</span>));</span><br><span class="line">                        <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> cursor.getDouble(cursor.getColumnIndex(<span class="string">&quot;price&quot;</span>));</span><br><span class="line">                        Log.d(TAG, <span class="string">&quot;book name is &quot;</span>+name);</span><br><span class="line">                        Log.d(TAG, <span class="string">&quot;book author is &quot;</span>+author);</span><br><span class="line">                        Log.d(TAG, <span class="string">&quot;book pages is &quot;</span>+pages);</span><br><span class="line">                        Log.d(TAG, <span class="string">&quot;book price is &quot;</span>+price);</span><br><span class="line">                    &#125;<span class="keyword">while</span> (cursor.moveToNext());</span><br><span class="line">                &#125;</span><br><span class="line">                cursor.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="使用SQL操作数据库"><a href="#使用SQL操作数据库" class="headerlink" title="使用SQL操作数据库"></a>使用SQL操作数据库</h3><p>添加数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">db.execSQL(<span class="string">&quot;insert into Book(name, author, pages,price) values(?,?,?,?)&quot;</span>,</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;Love and Peace&quot;</span>,<span class="string">&quot;W&quot;</span>,<span class="string">&quot;488&quot;</span>,<span class="string">&quot;20.25&quot;</span>&#125;);</span><br><span class="line">db.execSQL(<span class="string">&quot;insert into Book(name, author, pages,price) values(?,?,?,?)&quot;</span>,</span><br><span class="line">   <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;I Find It&quot;</span>,<span class="string">&quot;H&quot;</span>,<span class="string">&quot;688&quot;</span>,<span class="string">&quot;10.95&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>更新数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">db.execSQL(<span class="string">&quot;update Book set price = ? where name = ?&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;10.99&quot;</span>,<span class="string">&quot;The Da Vinci Code&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>删除数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">db.execSQL(<span class="string">&quot;delete from Book where pages &lt; ?&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;500&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>查询数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cursor</span> <span class="variable">cursor</span> <span class="operator">=</span> db.rawQuery(<span class="string">&quot;select * from Book&quot;</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<h2 id="使用LitePal操作数据库"><a href="#使用LitePal操作数据库" class="headerlink" title="使用LitePal操作数据库"></a>使用LitePal操作数据库</h2><p>LitePal是一款开源的Android数据库框架，它采用了对象关系映射（ORM）的模式，并将我们平时开发最常用到的一些数据库功能进行了封装，不用编写一行SQL语句就可以完成各种建表和增删改查的操作。  </p>
<h3 id="配置LitePal"><a href="#配置LitePal" class="headerlink" title="配置LitePal"></a>配置LitePal</h3><p>首先是再app&#x2F;build.gradle文件中添加依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"></span><br><span class="line">    implementation &#x27;androidx.appcompat:appcompat:1.3.0&#x27;</span><br><span class="line">    implementation &#x27;com.google.android.material:material:1.4.0&#x27;</span><br><span class="line">    implementation &#x27;androidx.constraintlayout:constraintlayout:2.0.4&#x27;</span><br><span class="line">    testImplementation &#x27;junit:junit:4.13.2&#x27;</span><br><span class="line">    androidTestImplementation &#x27;androidx.test.ext:junit:1.1.3&#x27;</span><br><span class="line">    androidTestImplementation &#x27;androidx.test.espresso:espresso-core:3.4.0&#x27;</span><br><span class="line">    implementation &#x27;org.litepal.guolindev:core:3.2.3&#x27;//这里</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来配置litepal.xml文件  <br>右击app&#x2F;src&#x2F;main目录→NEW→Folder→Assets Folder，新建好assets文件夹，然后右击assets文件夹，新建文件，起名为litepal.xml。<br>其中代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">&quot;BookStore&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dbname</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>dbname标签用于指定数据库名，version标签用于指定数据库版本号，list标签用于指定所有的映射模型。<br>最后配置LitePalApplication，修改AndroidManifest.xml中的代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    package=&quot;com.example.litepaltest&quot;&gt;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;org.litepal.LitePalApplication&quot;</span></span></span><br></pre></td></tr></table></figure>
<p>正常情况已经完成了。我在这里报错了，之后在项目的根目录对应的settings.gradle中修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pluginManagement &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        gradlePluginPortal()</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencyResolutionManagement &#123;</span><br><span class="line">    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        jcenter()//这里</span><br><span class="line">        maven &#123; url &#x27;https://jitpack.io&#x27; &#125;//这里</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">rootProject.name = &quot;LitePalTest&quot;</span><br><span class="line">include &#x27;:app&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果还是无法解决，然后在项目根目录（app目录外面那个）的build.gradle里添加几行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line"></span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven&#123; url &#x27;https://maven.aliyun.com/repository/google&#x27;&#125;</span><br><span class="line">        maven&#123; url &#x27;https://maven.aliyun.com/repository/gradle-plugin&#x27;&#125;</span><br><span class="line">        maven&#123; url &#x27;https://maven.aliyun.com/repository/public&#x27;&#125;</span><br><span class="line">        maven&#123; url &#x27;https://maven.aliyun.com/repository/jcenter&#x27;&#125;</span><br><span class="line"></span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &#x27;com.android.tools.build:gradle:3.2.0&#x27;</span><br><span class="line">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class="line">        // in the individual module build.gradle files</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//以上为新添加</span><br><span class="line"></span><br><span class="line">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br><span class="line">plugins &#123;</span><br><span class="line">    id &#x27;com.android.application&#x27; version &#x27;7.2.2&#x27; apply false</span><br><span class="line">    id &#x27;com.android.library&#x27; version &#x27;7.2.2&#x27; apply false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是添加镜像仓库的代码。最后没有报错了。</p>
<h3 id="创建和升级数据库"><a href="#创建和升级数据库" class="headerlink" title="创建和升级数据库"></a>创建和升级数据库</h3><blockquote>
<p>LitePal采取的是对象关系映射（ORM）的模式，那什么是对象关系映射呢？简单点说：我们的编程语言是面向对象语言，而使用的数据库是关系型数据库，那么将面向对象的语言和面向对象的数据库之间建立一种映射关系，这就是对象关系映射。</p>
</blockquote>
<p>新建LitePalTest项目，布局文件与上一个项目相同。  <br>定义一个Book类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pages;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAuthor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthor</span><span class="params">(String author)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPages</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPages</span><span class="params">(<span class="type">int</span> pages)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pages = pages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来将Book类添加到映射模型列表中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;litepal&gt;</span><br><span class="line">    &lt;dbname value=&quot;BookStore&quot;&gt;&lt;/dbname&gt;</span><br><span class="line"></span><br><span class="line">    &lt;version value=&quot;2&quot;&gt;&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;list&gt;</span><br><span class="line">        &lt;mapping class=&quot;com.example.litepaltest.Book&quot;&gt;&lt;/mapping&gt;</span><br><span class="line">    &lt;/list&gt;</span><br><span class="line">&lt;/litepal&gt;</span><br></pre></td></tr></table></figure>
<p>修改MainActivity代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    <span class="type">Button</span> <span class="variable">createDatabase</span> <span class="operator">=</span> findViewById(R.id.create_database);</span><br><span class="line">    createDatabase.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">            LitePal.getDatabase();</span><br><span class="line">            Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;Succeeded&quot;</span>,</span><br><span class="line">                    Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>LitePal.getDatabase()方法就是一次最简单的数据库操作，点击一下按钮后数据库就会自动创建完成。</p>
<p>LitePal升级数据库不会像SQLiteOpenHelper升级数据库需要先把之前的drop掉，然后再重新创建。<br>LitePal升级数据库非常简单，只需要改你想改的任何内容，然后将版本号加1就行了。<br>例如：向Book表添加一个press（出版社）列；向数据库添加一张Category表。<br>修改Book类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.litepaltest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.litepal.crud.LitePalSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pages;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String press;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAuthor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthor</span><span class="params">(String author)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPages</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPages</span><span class="params">(<span class="type">int</span> pages)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pages = pages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> press;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPress</span><span class="params">(String press)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.press = press;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>新建一个Category类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.litepaltest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> categoryCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCategoryCode</span><span class="params">(<span class="type">int</span> categoryCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.categoryCode = categoryCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCategoryName</span><span class="params">(String categoryName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.categoryName = categoryName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改litepal.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">&quot;BookStore&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dbname</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">&quot;com.example.litepaltest.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">&quot;com.example.litepaltest.Category&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样就可以了。</p>
<h3 id="添加数据-1"><a href="#添加数据-1" class="headerlink" title="添加数据"></a>添加数据</h3><p>进行CRUD操作必须要让现有的模型类继承自LitePalSupport类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> <span class="keyword">extends</span> <span class="title class_">LitePalSupport</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br></pre></td></tr></table></figure>
<p>添加数据的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">addData</span> <span class="operator">=</span> findViewById(R.id.add_data);</span><br><span class="line">addData.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setName(<span class="string">&quot;The Da Vinci Code&quot;</span>);</span><br><span class="line">        book.setAuthor(<span class="string">&quot;Dan Brown&quot;</span>);</span><br><span class="line">        book.setPages(<span class="number">454</span>);</span><br><span class="line">        book.setPrice(<span class="number">16.96</span>);</span><br><span class="line">        book.setPress(<span class="string">&quot;Unknow&quot;</span>);</span><br><span class="line">        book.save();</span><br><span class="line">        Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;Succeeded&quot;</span>,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>只需要创建一个Book实例，然后将所有要存储的数据设置好，最后调用下save()方法就可以了。<br>save()方法是从LitePalSupport中继承而来。</p>
<h3 id="更新数据-1"><a href="#更新数据-1" class="headerlink" title="更新数据"></a>更新数据</h3><p>对于LitePal来说，对象是否已存储就是根据调用model.isSaved()方法的结果来判断的，返回true就表示已存储，返回false就表示未存储。<br>只有两种情况下返回true：一种情况是已经调用过model.save()方法添加数据，一种情况是model对象是通过LitePal提供的查询API查出来的，由于是从数据库查出来的，所以会被认为是已存储的对象。  </p>
<p>更新数据的第一种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">updateData</span> <span class="operator">=</span> findViewById(R.id.update_data);</span><br><span class="line">updateData.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setName(<span class="string">&quot;The Lost Symbol&quot;</span>);</span><br><span class="line">        book.setAuthor(<span class="string">&quot;Dan Brown&quot;</span>);</span><br><span class="line">        book.setPages(<span class="number">510</span>);</span><br><span class="line">        book.setPrice(<span class="number">19.95</span>);</span><br><span class="line">        book.setPress(<span class="string">&quot;Unknow&quot;</span>);</span><br><span class="line">        book.save();</span><br><span class="line">        book.setPrice(<span class="number">10.99</span>);</span><br><span class="line">        book.save();</span><br><span class="line">        Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;Succeeded&quot;</span>,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>LitePal会发现当前的Book对象是已存储的，因此不会添加而是直接更新。  但是只能对已存储的对象进行操作，限制较大。<br>更新数据的第二种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">updateData</span> <span class="operator">=</span> findViewById(R.id.update_data);</span><br><span class="line">updateData.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setPrice(<span class="number">14.95</span>);</span><br><span class="line">        book.setPress(<span class="string">&quot;Anchor&quot;</span>);</span><br><span class="line">        book.updateAll(<span class="string">&quot;name= ? and author = ?&quot;</span>,</span><br><span class="line">                <span class="string">&quot;The Lost Symbol&quot;</span>,<span class="string">&quot;Dan Brown&quot;</span>);</span><br><span class="line">        Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;Succeeded&quot;</span>,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>set指定的是要更新的内容；updateAll是更新的条件限制，不指定就代表对说有的数据生效。  <br>int类型的默认值是0，boolen类型的默认值是false，String类型的默认值是null。  <br>更新为默认值；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">updateData</span> <span class="operator">=</span> findViewById(R.id.update_data);</span><br><span class="line">updateData.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setToDefault(<span class="string">&quot;pages&quot;</span>);</span><br><span class="line">        book.updateAll();</span><br><span class="line">        Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;Succeeded&quot;</span>,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="删除数据-1"><a href="#删除数据-1" class="headerlink" title="删除数据"></a>删除数据</h3><p>删除数据的方式主要有2种。  <br>第一种是直接调用已存储对象的delete()方法。  <br>第二种如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">deleteData</span> <span class="operator">=</span> findViewById(R.id.delete_data);</span><br><span class="line">deleteData.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        LitePal.deleteAll(Book.class,<span class="string">&quot;price &lt; ?&quot;</span>,<span class="string">&quot;15&quot;</span>);</span><br><span class="line">        Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;Succeeded&quot;</span>,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>另外，deleteAll()如果不指定条件就意味着删除表中所有数据。</p>
<h3 id="查询数据-1"><a href="#查询数据-1" class="headerlink" title="查询数据"></a>查询数据</h3><p>查询这张表里的所有数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">queryData</span> <span class="operator">=</span> findViewById(R.id.query_data);</span><br><span class="line">queryData.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        List&lt;Book&gt; books = LitePal.findAll(Book.class);</span><br><span class="line">        <span class="keyword">for</span>(Book book: books)&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;book name is &quot;</span>+book.getName());</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;book author is &quot;</span>+book.getAuthor());</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;book pages is &quot;</span>+book.getPages());</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;book price is &quot;</span>+book.getPrice());</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;book press is &quot;</span>+book.getPress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查询表中第一条数据：<br><code>Book firstbook = LitePal.findFirst(Book.class);</code>  </p>
</blockquote>
<blockquote>
<p>查询表中最后一条数据：<br><code>Book lastbook = LitePal.findLast(Book.class);</code>  </p>
</blockquote>
<blockquote>
<p>select()方法用于指定查询哪几列的数据，对应了SQL当中的select关键字。比如只查name和author这两列的数据：<br><code>List&lt;Book&gt; books = LitePal.select(&quot;name&quot;,&quot;author&quot;).find(Book.class);</code>  </p>
</blockquote>
<blockquote>
<p>where()方法用于指定查询的约束条件，对应了SQL当中的where关键字。比如只查页数大于400的数据：  </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;Book&gt; books = LitePal.where(&quot;pages&gt;?&quot;, &quot;400&quot;).find(Book.class);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>order()方法用于指定结果的排序方式，对应了SQL当中的order by 关键字。比如将查询结果按照书价从高到低排序：<br><code>List&lt;Book&gt; books = LitePal.order(&quot;price desc&quot;).find(Book.class);</code><br>降序：desc ; 升序: asc或者不写。   </p>
</blockquote>
<blockquote>
<p>limit()方法用于指定查询结果的数量，比如只查询表中的前3条数据：<br><code>List&lt;Book&gt; books = LitePal.limit(3).find(Book.class);</code>  </p>
</blockquote>
<blockquote>
<p>offset()方法用于指定查询结果的偏移量，比如查询表中的第2条、第3条、第4条数据：<br><code>List&lt;Book&gt; books = LitePal.limit(3).offset(1).find(Book.class);</code><br>由于limit（3）查询到的是前3条数据，再加上offset（1）进行一个位置的偏移，就能实现查询第2条、第3条、第4条数据的功能。  </p>
</blockquote>
<blockquote>
<p>对以上5个方法进行任意的连缀组合：  </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;Book&gt; books = LitePal.select(&quot;name&quot;, &quot;author&quot;, &quot;pages&quot;)</span><br><span class="line">                        .where(&quot;pages&gt;?&quot;, &quot;400&quot;)</span><br><span class="line">                        .order(&quot;pages&quot;)</span><br><span class="line">                        .limit(10)</span><br><span class="line">                        .offset(10)</span><br><span class="line">                        .find(Book.class);</span><br></pre></td></tr></table></figure>

<p>上述API满足不了的时候，支持SQL查询，利用findBySQL()方法进行查询：</p>
<pre><code>Cursor c = LitePal.findBySQL(&quot;select * from Book where pages &gt; ? and price &lt; ?&quot;,&quot;400&quot;,&quot;20&quot;);
</code></pre>
<p>其中第一个参数自定SQL语句，后面的参数指定占位符的值。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Android的ListView与RecyclerView</title>
    <url>/2022/07/18/Android%E7%9A%84ListView%E4%B8%8ERecyclerView/</url>
    <content><![CDATA[<p>ListView是Android中最常用的控件之一，而RecyclerView是一个更强大的滚动控件，可以说是一个增强版的ListView。  </p>
<h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><p>ListView允许用户通过手指上下滑动的方式将屏幕外的数据滚动到屏幕内，同时屏幕上原有的数据则会滚动出屏幕。  </p>
<h3 id="ListView的简单用法"><a href="#ListView的简单用法" class="headerlink" title="ListView的简单用法"></a>ListView的简单用法</h3><p>首先建立一个项目，然后修改activity_main.xml中的代码。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/list_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接下来修改MainActivity中的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] data = &#123;<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>, <span class="string">&quot;Pineapple&quot;</span>, <span class="string">&quot;Strawberry&quot;</span>, <span class="string">&quot;Cherry&quot;</span>, <span class="string">&quot;Mango&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>, <span class="string">&quot;Pineapple&quot;</span>, <span class="string">&quot;Strawberry&quot;</span>, <span class="string">&quot;Cherry&quot;</span>, <span class="string">&quot;Mango&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initFruits();<span class="comment">//初始化水果数据</span></span><br><span class="line">        <span class="type">FruitAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FruitAdapter</span>(MainActivity.<span class="built_in">this</span>,R.layout.fruit_item,fruitList);</span><br><span class="line">        <span class="type">ListView</span> <span class="variable">listView</span> <span class="operator">=</span> (ListView) findViewById(R.id.list_view);</span><br><span class="line">        listView.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要注意的一点是数组中的数据是无法直接传递给ListView的，需要借助适配器来完成。  <br>ArrayAdapter可以通过泛型来指定要适配的数据类型，然后在构造器中把要适配的数据传入。  <br>在这里，我们将ArrayAdapter的泛型指定为String，然后在ArrayAdapter的构造函数中传入当前上下文、ListView的子项布局的id，以及要适配的数据。  <br>最后调用ListView的setAdapter方法，将构建好的适配器对象传递进去，这样ListView和数据之间的关联就完成了。  </p>
<h3 id="定制ListView的界面"><a href="#定制ListView的界面" class="headerlink" title="定制ListView的界面"></a>定制ListView的界面</h3><p>通过对ListView的界面进行定制，可以让它显示更加丰富的内容。  <br>新建一个实体类Fruit，作为ListView适配器的适配类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listviewtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//水果名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> imageId;<span class="comment">//水果对应图片的资源id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fruit</span><span class="params">(String name, <span class="type">int</span> imageId)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.imageId = imageId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getImageId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> imageId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后为ListView的子项指定一个我们自定义的布局，新建fruit_item.xml。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_image&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接下来创建一个自定义的适配器，继承自ArrayAdapter。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FruitAdapter</span> <span class="keyword">extends</span> <span class="title class_">ArrayAdapter</span>&lt;Fruit&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> resourceId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FruitAdapter</span><span class="params">(Context context, <span class="type">int</span> textViewResourceId,</span></span><br><span class="line"><span class="params">                        List&lt;Fruit&gt; objects)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(context,textViewResourceId,objects);</span><br><span class="line">        resourceId = textViewResourceId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getView</span><span class="params">(<span class="type">int</span> position, View convertView, ViewGroup parent)</span> &#123;</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> getItem(position);<span class="comment">//获取当前的Fruit实例</span></span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(getContext()).inflate(resourceId,parent,<span class="literal">false</span>);</span><br><span class="line">        <span class="type">ImageView</span> <span class="variable">fruitImage</span> <span class="operator">=</span> (ImageView) view.findViewById(R.id.fruit_image);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">fruitName</span> <span class="operator">=</span> (TextView) view.findViewById(R.id.fruit_name);</span><br><span class="line">        fruitImage.setImageResource(fruit.getImageId());</span><br><span class="line">        fruitName.setText(fruit.getName());</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下面修改MainActivity中的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Fruit&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initFruits(); <span class="comment">// 初始化水果数据</span></span><br><span class="line">        <span class="type">FruitAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FruitAdapter</span>(MainActivity.<span class="built_in">this</span>, R.layout.fruit_item, fruitList);</span><br><span class="line">        <span class="type">ListView</span> <span class="variable">listView</span> <span class="operator">=</span> (ListView) findViewById(R.id.list_view);</span><br><span class="line">        listView.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initFruits</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Apple&quot;</span>, R.drawable.apple_pic);</span><br><span class="line">        fruitList.add(apple);</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">banana</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Banana&quot;</span>, R.drawable.banana_pic);</span><br><span class="line">        fruitList.add(banana);</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">orange</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Orange&quot;</span>, R.drawable.orange_pic);</span><br><span class="line">        fruitList.add(orange);</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">watermelon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Watermelon&quot;</span>, R.drawable.watermelon_pic);</span><br><span class="line">        fruitList.add(watermelon);</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">pear</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Pear&quot;</span>, R.drawable.pear_pic);</span><br><span class="line">        fruitList.add(pear);</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">grape</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Grape&quot;</span>, R.drawable.grape_pic);</span><br><span class="line">        fruitList.add(grape);</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">pineapple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Pineapple&quot;</span>, R.drawable.pineapple_pic);</span><br><span class="line">        fruitList.add(pineapple);</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">strawberry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Strawberry&quot;</span>, R.drawable.strawberry_pic);</span><br><span class="line">        fruitList.add(strawberry);</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">cherry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Cherry&quot;</span>, R.drawable.cherry_pic);</span><br><span class="line">        fruitList.add(cherry);</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">mango</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Mango&quot;</span>, R.drawable.mango_pic);</span><br><span class="line">        fruitList.add(mango);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就完成了。</p>
<h3 id="ListView点击事件"><a href="#ListView点击事件" class="headerlink" title="ListView点击事件"></a>ListView点击事件</h3><p>修改MainActivity中的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initFruits();<span class="comment">//初始化水果数据</span></span><br><span class="line">        <span class="type">FruitAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FruitAdapter</span>(MainActivity.<span class="built_in">this</span>,R.layout.fruit_item,fruitList);</span><br><span class="line">        <span class="type">ListView</span> <span class="variable">listView</span> <span class="operator">=</span> (ListView) findViewById(R.id.list_view);</span><br><span class="line">        listView.setAdapter(adapter);</span><br><span class="line">        listView.setOnItemClickListener(<span class="keyword">new</span> <span class="title class_">AdapterView</span>.OnItemClickListener()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent,View view, <span class="type">int</span> position, <span class="type">long</span> id)</span>&#123;</span><br><span class="line">                <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> fruitList.get(position);</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, fruit.getName(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initFruits</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Apple&quot;</span>,R.drawable.apple_pic);</span><br><span class="line">            fruitList.add(apple);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">banana</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Banana&quot;</span>,R.drawable.banana_pic);</span><br><span class="line">            fruitList.add(banana);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">orange</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Orange&quot;</span>,R.drawable.orange_pic);</span><br><span class="line">            fruitList.add(orange);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">watermelon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Watermelon&quot;</span>,R.drawable.watermelon_pic);</span><br><span class="line">            fruitList.add(watermelon);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">pear</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Pear&quot;</span>,R.drawable.pear_pic);</span><br><span class="line">            fruitList.add(pear);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">grape</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Grape&quot;</span>,R.drawable.grape_pic);</span><br><span class="line">            fruitList.add(grape);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">pineapple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Pineapple&quot;</span>,R.drawable.pineapple_pic);</span><br><span class="line">            fruitList.add(pineapple);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">strawberry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Strawberry&quot;</span>,R.drawable.strawberry_pic);</span><br><span class="line">            fruitList.add(strawberry);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">cherry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Cherry&quot;</span>,R.drawable.cherry_pic);</span><br><span class="line">            fruitList.add(cherry);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">mango</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Mango&quot;</span>,R.drawable.mango_pic);</span><br><span class="line">            fruitList.add(mango);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h2><p>RecyclerView不仅可以轻松实现和ListView相同的效果，还优化了ListView中存在的各种不足之处。</p>
<h3 id="RecyclerView的基本用法"><a href="#RecyclerView的基本用法" class="headerlink" title="RecyclerView的基本用法"></a>RecyclerView的基本用法</h3><p>首先新建一个RecyclerVIew项目。<br>想要使用RecyclerView这个控件，首先需要在项目中的build.gradle中添加相应的依赖库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apply plugin: &#x27;com.android.application&#x27;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 26</span><br><span class="line">    buildToolsVersion &quot;32.0.0&quot;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId &quot;com.example.recyclerviewtest&quot;</span><br><span class="line">        minSdkVersion 15</span><br><span class="line">        targetSdkVersion 26</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile(&#x27;proguard-android.txt&#x27;), &#x27;proguard-rules.pro&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(dir: &#x27;libs&#x27;, include: [&#x27;*.jar&#x27;])</span><br><span class="line">    androidTestCompile(&#x27;com.android.support.test.espresso:espresso-core:2.2.2&#x27;, &#123;</span><br><span class="line">        exclude group: &#x27;com.android.support&#x27;, module: &#x27;support-annotations&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    compile &#x27;com.android.support:appcompat-v7:26.+&#x27;</span><br><span class="line">    compile &#x27;com.android.support:recyclerview-v7:26.+&#x27;//这里</span><br><span class="line">    testCompile &#x27;junit:junit:4.12&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>添加完后点击Sync Now同步。  <br>然后修改activity_main.xml中的代码。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/recycle_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>同样，我们需要建立一个Fruit类和fruit_item.xml，这里可以直接复制之前的使用。  <br>接下来为RecyclerView准备一个适配器，新建FruitAdapter类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FruitAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;FruitAdapter.ViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; mFruitList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder&#123;</span><br><span class="line">        ImageView fruitImage;</span><br><span class="line">        TextView fruitName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ViewHolder</span><span class="params">(View view)</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>(view);</span><br><span class="line">            fruitImage = (ImageView) view.findViewById(R.id.fruit_image);</span><br><span class="line">            fruitName = (TextView) view.findViewById(R.id.fruit_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FruitAdapter</span><span class="params">(List&lt;Fruit&gt; fruitList)</span>&#123;</span><br><span class="line">        mFruitList = fruitList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//用于创建ViewHolder实例</span></span><br><span class="line">    <span class="keyword">public</span> ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span>&#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext())</span><br><span class="line">                .inflate(R.layout.fruit_item,parent,<span class="literal">false</span>);</span><br><span class="line">        <span class="type">ViewHolder</span> <span class="variable">holder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ViewHolder</span>(view);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//对RecyclerView子项的数据赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> mFruitList.get(position);</span><br><span class="line">        holder.fruitImage.setImageResource(fruit.getImageId());</span><br><span class="line">        holder.fruitName.setText(fruit.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mFruitList.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>onCreateViewHolder()：创建并返回ViewHolder实例，并且参数是动态加载进来的子项布局</li>
<li>onBindViewHolder:对RecyclerView的子项的数据进行赋值，当子项滚到屏幕都会被调用<br>参数说明：<br>ViewHolder viewHolder：缓存了子项中控件的静态内部类，这里是ImageView fruitImage;TextView fruitName;<br>int i:i是滚入刚到屏幕内子项的编号</li>
<li>getItemCount()：返回RecyclerView子项总数</li>
</ul>
<p>修改MainActivity中的代码。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initFruits();<span class="comment">//初始化水果数据</span></span><br><span class="line">        <span class="type">RecyclerView</span> <span class="variable">recyclerView</span> <span class="operator">=</span> (RecyclerView) findViewById(R.id.recycle_view);</span><br><span class="line">        <span class="type">LinearLayoutManager</span> <span class="variable">layoutManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        recyclerView.setLayoutManager(layoutManager);</span><br><span class="line">        <span class="type">FruitAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FruitAdapter</span>(fruitList);</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initFruits</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Apple&quot;</span>,R.drawable.apple_pic);</span><br><span class="line">            fruitList.add(apple);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">banana</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Banana&quot;</span>,R.drawable.banana_pic);</span><br><span class="line">            fruitList.add(banana);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">orange</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Orange&quot;</span>,R.drawable.orange_pic);</span><br><span class="line">            fruitList.add(orange);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">watermelon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Watermelon&quot;</span>,R.drawable.watermelon_pic);</span><br><span class="line">            fruitList.add(watermelon);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">pear</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Pear&quot;</span>,R.drawable.pear_pic);</span><br><span class="line">            fruitList.add(pear);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">grape</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Grape&quot;</span>,R.drawable.grape_pic);</span><br><span class="line">            fruitList.add(grape);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">pineapple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Pineapple&quot;</span>,R.drawable.pineapple_pic);</span><br><span class="line">            fruitList.add(pineapple);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">strawberry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Strawberry&quot;</span>,R.drawable.strawberry_pic);</span><br><span class="line">            fruitList.add(strawberry);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">cherry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Cherry&quot;</span>,R.drawable.cherry_pic);</span><br><span class="line">            fruitList.add(cherry);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">mango</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Mango&quot;</span>,R.drawable.mango_pic);</span><br><span class="line">            fruitList.add(mango);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，我们就实现了和ListView一样的效果。</p>
<h3 id="横向滚动"><a href="#横向滚动" class="headerlink" title="横向滚动"></a>横向滚动</h3><p>ListView只能实现纵向滚动，但RecyclerView可以实现横向滚动。  <br>修改fruit_item.xml中的代码。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_image&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里将LinearLayout改为垂直排列，并设宽度为100dp。  <br>接下来修改MainActivity中的代码。   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initFruits();<span class="comment">//初始化水果数据</span></span><br><span class="line">        <span class="type">RecyclerView</span> <span class="variable">recyclerView</span> <span class="operator">=</span> (RecyclerView) findViewById(R.id.recycle_view);</span><br><span class="line">        <span class="type">LinearLayoutManager</span> <span class="variable">layoutManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);</span><br><span class="line">        recyclerView.setLayoutManager(layoutManager);</span><br><span class="line">        <span class="type">FruitAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FruitAdapter</span>(fruitList);</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initFruits</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Apple&quot;</span>,R.drawable.apple_pic);</span><br><span class="line">            fruitList.add(apple);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">banana</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Banana&quot;</span>,R.drawable.banana_pic);</span><br><span class="line">            fruitList.add(banana);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">orange</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Orange&quot;</span>,R.drawable.orange_pic);</span><br><span class="line">            fruitList.add(orange);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">watermelon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Watermelon&quot;</span>,R.drawable.watermelon_pic);</span><br><span class="line">            fruitList.add(watermelon);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">pear</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Pear&quot;</span>,R.drawable.pear_pic);</span><br><span class="line">            fruitList.add(pear);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">grape</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Grape&quot;</span>,R.drawable.grape_pic);</span><br><span class="line">            fruitList.add(grape);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">pineapple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Pineapple&quot;</span>,R.drawable.pineapple_pic);</span><br><span class="line">            fruitList.add(pineapple);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">strawberry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Strawberry&quot;</span>,R.drawable.strawberry_pic);</span><br><span class="line">            fruitList.add(strawberry);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">cherry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Cherry&quot;</span>,R.drawable.cherry_pic);</span><br><span class="line">            fruitList.add(cherry);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">mango</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;Mango&quot;</span>,R.drawable.mango_pic);</span><br><span class="line">            fruitList.add(mango);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实MainActivity中只添加了一行代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);</span><br></pre></td></tr></table></figure>
<p>这个设置布局的排列方式为横向排列。</p>
<h3 id="瀑布流布局"><a href="#瀑布流布局" class="headerlink" title="瀑布流布局"></a>瀑布流布局</h3><p>首先修改一下fruit_item.xml中的代码。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">&quot;5dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_image&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;0dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接下来修改MainActivity中的代码如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//setContentView(R.layout.search_item);</span></span><br><span class="line"></span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initFruits();<span class="comment">//初始化水果数据</span></span><br><span class="line">        <span class="type">RecyclerView</span> <span class="variable">recyclerView</span> <span class="operator">=</span> (RecyclerView) findViewById(R.id.recycle_view);</span><br><span class="line"></span><br><span class="line">        <span class="type">StaggeredGridLayoutManager</span> <span class="variable">layoutManager</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">StaggeredGridLayoutManager</span>(<span class="number">3</span>,StaggeredGridLayoutManager.VERTICAL);</span><br><span class="line">        recyclerView.setLayoutManager(layoutManager);</span><br><span class="line">        <span class="comment">//瀑布流布局</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*        GridLayoutManager gridLayoutManager = new GridLayoutManager(recyclerView.getContext(), 2, LinearLayoutManager.HORIZONTAL, false);</span></span><br><span class="line"><span class="comment">        recyclerView.setLayoutManager(gridLayoutManager);//网格横向，2行*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">FruitAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FruitAdapter</span>(fruitList);</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initFruits</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(getRandomLengthName(<span class="string">&quot;apple&quot;</span>),R.drawable.apple_pic);</span><br><span class="line">            fruitList.add(apple);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">banana</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(getRandomLengthName(<span class="string">&quot;Banana&quot;</span>),R.drawable.banana_pic);</span><br><span class="line">            fruitList.add(banana);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">orange</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(getRandomLengthName(<span class="string">&quot;Orange&quot;</span>),R.drawable.orange_pic);</span><br><span class="line">            fruitList.add(orange);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">watermelon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(getRandomLengthName(<span class="string">&quot;Watermelon&quot;</span>),R.drawable.watermelon_pic);</span><br><span class="line">            fruitList.add(watermelon);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">pear</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(getRandomLengthName(<span class="string">&quot;Pear&quot;</span>),R.drawable.pear_pic);</span><br><span class="line">            fruitList.add(pear);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">grape</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(getRandomLengthName(<span class="string">&quot;Grape&quot;</span>),R.drawable.grape_pic);</span><br><span class="line">            fruitList.add(grape);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">pineapple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(getRandomLengthName(<span class="string">&quot;Pineapple&quot;</span>),R.drawable.pineapple_pic);</span><br><span class="line">            fruitList.add(pineapple);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">strawberry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(getRandomLengthName(<span class="string">&quot;Strawberry&quot;</span>),R.drawable.strawberry_pic);</span><br><span class="line">            fruitList.add(strawberry);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">cherry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(getRandomLengthName(<span class="string">&quot;Cherry&quot;</span>),R.drawable.cherry_pic);</span><br><span class="line">            fruitList.add(cherry);</span><br><span class="line">            <span class="type">Fruit</span> <span class="variable">mango</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(getRandomLengthName(<span class="string">&quot;Mango&quot;</span>),R.drawable.mango_pic);</span><br><span class="line">            fruitList.add(mango);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getRandomLengthName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> random.nextInt(<span class="number">20</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; length;i++)&#123;</span><br><span class="line">            builder.append(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其中，我们把字符串随机重复几遍，使得各子项的高度不一致，产生瀑布流的效果。</p>
<h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><p>修改FruitAdapter中的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FruitAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;FruitAdapter.ViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; mFruitList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder&#123;</span><br><span class="line">        View fruitView;</span><br><span class="line">        ImageView fruitImage;</span><br><span class="line">        TextView fruitName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ViewHolder</span><span class="params">(View view)</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>(view);</span><br><span class="line">            fruitView = view;</span><br><span class="line">            fruitImage = (ImageView) view.findViewById(R.id.fruit_image);</span><br><span class="line">            fruitName = (TextView) view.findViewById(R.id.fruit_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FruitAdapter</span><span class="params">(List&lt;Fruit&gt; fruitList)</span>&#123;</span><br><span class="line">        mFruitList = fruitList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span>&#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext())</span><br><span class="line">                .inflate(R.layout.fruit_item,parent,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ViewHolder</span> <span class="variable">holder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ViewHolder</span>(view);</span><br><span class="line">        holder.fruitView.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> holder.getAdapterPosition();</span><br><span class="line">                <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> mFruitList.get(position);</span><br><span class="line">                Toast.makeText(v.getContext(), <span class="string">&quot;you clicked view &quot;</span>+fruit.getName(),</span><br><span class="line">                        Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        holder.fruitImage.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> holder.getAdapterPosition();</span><br><span class="line">                <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> mFruitList.get(position);</span><br><span class="line">                Toast.makeText(v.getContext(), <span class="string">&quot;you clicked image &quot;</span>+fruit.getName(),</span><br><span class="line">                        Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> mFruitList.get(position);</span><br><span class="line">        holder.fruitImage.setImageResource(fruit.getImageId());</span><br><span class="line">        holder.fruitName.setText(fruit.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mFruitList.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就实现了点击事件。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Android碎片</title>
    <url>/2022/07/26/Android%E7%A2%8E%E7%89%87/</url>
    <content><![CDATA[<p>碎片(fragment)是一种可以嵌入在活动当中的UI片段。它和活动非常像，同样拥有生命周期，能够包含布局。  </p>
<h2 id="碎片的使用方式"><a href="#碎片的使用方式" class="headerlink" title="碎片的使用方式"></a>碎片的使用方式</h2><p>首先创建一个平板模拟器。然后新建一个FragmentTest项目。</p>
<h3 id="碎片的简单用法"><a href="#碎片的简单用法" class="headerlink" title="碎片的简单用法"></a>碎片的简单用法</h3><p>在这里，我们打算在一个活动当中添加两个碎片，并让这两个碎片平分活动空间。</p>
<p>新建两个布局：左侧布局left_fragment.xml和右侧布局right_fragment.xml。  </p>
<p>left_fragment.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>right_fragment.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#00ee99&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;This is right fragment&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后新建一个LeftFragment和一个RightFragment类，并让其继承自Fragment。  </p>
<p>在这里建议使用support-v4库中的Fragment，因为它可以让碎片在所有的Android系统中保持功能一致性。</p>
<p>另外，因为build.gradle文件中已经添加了appcompat-v7库的依赖，所以我们不需要添加support-v4的依赖了。</p>
<p>LeftFragment.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeftFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="line"><span class="params">                             Bundle savedInstanceState)</span>&#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> inflater.inflate(R.layout.left_fragment,container,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>RightFragment.java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RightFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="line"><span class="params">                             Bundle savedInstanceState)</span>&#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> inflater.inflate(R.layout.right_fragment,container,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里仅重写了Fragment的onCreateView方法，然后在此方法中通过LayoutInflater的inflater()方法将定义的left_fragment与right_fragment布局动态加载进来。</p>
<p>最后修改activity_main.xml中的代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/left_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">         /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/right_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.example.fragmenttest.RightFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">         /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这里，我们使用了<fragment>标签在布局中添加碎片，通过android:name属性来显示指明要添加的碎片类名。</p>
<h3 id="动态添加碎片"><a href="#动态添加碎片" class="headerlink" title="动态添加碎片"></a>动态添加碎片</h3><p>碎片的真正强大之处在于它可以在程序运行时动态地添加到活动中。</p>
<p>新建another_right_fragment.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#ffff00&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;This is another right fragment&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后新建AnotherRightFragment作为另一个右侧碎片。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnotherRightFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="line"><span class="params">                             Bundle savedInstanceState)</span>&#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> inflater.inflate(R.layout.another_right_fragment,container,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里在onCreateView()方法中加载了another_right_fragment布局。然后修改activity_main.xml中的代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/left_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/right_layout&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在将右侧碎片替换成了一个FrameLayout。</p>
<p>下面将在代码中向FrameLayout里添加内容，从而实现动态添加碎片的功能。</p>
<p>修改MainActivity中的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> (Button) findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        replaceFragment(<span class="keyword">new</span> <span class="title class_">RightFragment</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.button:</span><br><span class="line">                replaceFragment(<span class="keyword">new</span> <span class="title class_">AnotherRightFragment</span>());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">replaceFragment</span><span class="params">(Fragment fragment)</span>&#123;</span><br><span class="line">        <span class="type">FragmentManager</span> <span class="variable">fragmentManager</span> <span class="operator">=</span> getSupportFragmentManager();</span><br><span class="line">        <span class="type">FragmentTransaction</span> <span class="variable">transaction</span> <span class="operator">=</span> fragmentManager.beginTransaction();</span><br><span class="line">        transaction.replace(R.id.right_layout,fragment);</span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先，我们给左侧按钮注册了一个点击事件，然后调用replaceFragment()方法动态添加了RightFragment这个碎片。当点击左侧按钮时，又会调用replaceFragment()方法将右侧碎片替换成AnotherRightFragment。</p>
<p>动态添加碎片主要分为5步：</p>
<p>1.创建待添加的碎片实例。<br>2.获取 FragmentManager ，在活动中可以直接通过调用getSupportFragmentManager()方法得到。<br>3.开启一个事务，通过调用beginTransaction()方法开启。<br>4.向容器内添加或替换碎片，一般使用 replace（）方法实现，需要传入容器的id和待添加的碎片实例。<br>5.提交事务，通过调用commit()方法实现。</p>
<h3 id="在碎片中模拟返回栈"><a href="#在碎片中模拟返回栈" class="headerlink" title="在碎片中模拟返回栈"></a>在碎片中模拟返回栈</h3><p>模仿类似返回栈的效果，按下Back键后可以回到上一个碎片。</p>
<p>其实只需要添加一行代码即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> (Button) findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        replaceFragment(<span class="keyword">new</span> <span class="title class_">RightFragment</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.button:</span><br><span class="line">                replaceFragment(<span class="keyword">new</span> <span class="title class_">AnotherRightFragment</span>());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">replaceFragment</span><span class="params">(Fragment fragment)</span>&#123;</span><br><span class="line">        <span class="type">FragmentManager</span> <span class="variable">fragmentManager</span> <span class="operator">=</span> getSupportFragmentManager();</span><br><span class="line">        <span class="type">FragmentTransaction</span> <span class="variable">transaction</span> <span class="operator">=</span> fragmentManager.beginTransaction();</span><br><span class="line">        transaction.replace(R.id.right_layout,fragment);</span><br><span class="line">        transaction.addToBackStack(<span class="literal">null</span>);<span class="comment">//这里</span></span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>addToBackStack()方法可以接收一个名字用于描述返回栈的状态，一般传入null即可。</p>
<h2 id="碎片的生命周期"><a href="#碎片的生命周期" class="headerlink" title="碎片的生命周期"></a>碎片的生命周期</h2><p>碎片在其生命周期内一共有四种状态：运行、暂停、停止和销毁。</p>
<ol>
<li><p>运行状态<br>  当一个碎片是可见的，并且它所关联的活动正处于运行状态时，该碎片也处于运行状态。</p>
</li>
<li><p>暂停状态<br>  当一个活动进入暂停状态时（由于另一个未占满屏幕的活动被添加到了栈顶），与它相关联的可见碎片就会进入到暂停状态。</p>
</li>
<li><p>停止状态<br>  当一个活动进入停止状态时，与它相关联的碎片就会进入到停止状态。或者通过调用FragmentTransaction的remove()、replace()方法将碎片从活动中移除，但有在事务提交之前调用addToBackStack()方法，这时的碎片也会进入到停止状态。总的来说，进入停止状态的碎片对用户来说是完全不可见的，有可能会被系统回收。</p>
</li>
<li><p>销毁状态<br>  碎片总是依附于活动而存在的，因此当活动被销毁时，与它相关联的碎片就会进入到销毁状态。或者通过调用FragmentTransaction的remove()、replace()方法将碎片从活动中移除，但在事务提交之前并没有调用addToBackStack()方法，这时的碎片也会进入到销毁状态。</p>
</li>
</ol>
<p>  Fragment类中也提供了一系列的回调方法，以覆盖碎片生命周期的每个环节。其中，活动中有的回调方法，碎片中几乎都有，不过碎片还提供了一些附加的回调方法，那我们就重点来看下这几个回调。</p>
<ul>
<li><p>onAttach()：当碎片和活动建立关联的时候调用。</p>
</li>
<li><p>onCreateView()：为碎片创建视图（加载布局）时调用。</p>
</li>
<li><p>onActivityCreated()：确保与碎片相关联的活动一定已经创建完毕的时候调用。</p>
</li>
<li><p>onDestroyView()：当与碎片关联的视图被移除的时候调用。</p>
</li>
<li><p>onDetach()：当碎片和活动解除关联的时候调用。</p>
</li>
</ul>
<p>  <img src="https://note.youdao.com/yws/api/personal/file/WEB8dbb446a11c5c2ea44d931a7d9234895?method=download&shareKey=cdf5b30386f26c0036b36c3e084bfe6e" alt="碎片的生命周期"></p>
  <p align="center">碎片的生命周期</p>  
  
<h2 id="动态加载布局的技巧"><a href="#动态加载布局的技巧" class="headerlink" title="动态加载布局的技巧"></a>动态加载布局的技巧</h2><h3 id="使用限定符"><a href="#使用限定符" class="headerlink" title="使用限定符"></a>使用限定符</h3><p>借助限定符可以实现在运行时判断程序是应该使用单页模式还是双页模式。<br>修改FragmentTest中的activity_main.xml中的代码：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/left_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在res目录下新建layout-large文件夹，在这个文件夹下新建一个布局，也叫activity_main.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/left_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/right_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.example.fragmenttest.RightFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>large就是一个限定符，那些屏幕被认为是large的设备就会自动加载layout-large下的布局，否则就会加载layout文件夹下的布局。  <br>最后将MainActivity中的replaceFragment()方法里的代码注释掉就可以了。  <br>Android中的一些常见的限定符： </p>
<table>
<thead>
<tr>
<th>屏幕特征</th>
<th>限定符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>大小</td>
<td>small</td>
<td>提供给小屏幕设备的资源</td>
</tr>
<tr>
<td>大小</td>
<td>normal</td>
<td>提供给中等屏幕设备的资源</td>
</tr>
<tr>
<td>大小</td>
<td>large</td>
<td>提供给大屏幕设备的资源</td>
</tr>
<tr>
<td>大小</td>
<td>xlarge</td>
<td>提供给超大屏幕设备的资源</td>
</tr>
<tr>
<td>分辨率</td>
<td>ldpi</td>
<td>提供给低分辨率设备的资源（120dpi之下）</td>
</tr>
<tr>
<td>分辨率</td>
<td>mdpi</td>
<td>提供给中等分辨率设备的资源（120dpi~160dpi）</td>
</tr>
<tr>
<td>分辨率</td>
<td>hdpi</td>
<td>提供给高分辨率设备的资源（160dpi~240dpi）</td>
</tr>
<tr>
<td>分辨率</td>
<td>xhdpi</td>
<td>提供给超高分辨率设备的资源（240dpi~320dpi）</td>
</tr>
<tr>
<td>分辨率</td>
<td>xxhdpi</td>
<td>提供给超超高分辨率设备的资源（320dpi~480dpi）</td>
</tr>
<tr>
<td>方向</td>
<td>land</td>
<td>提供给横屏设备的资源</td>
</tr>
<tr>
<td>方向</td>
<td>port</td>
<td>提供给竖屏设备的资源</td>
</tr>
</tbody></table>
<h3 id="最小宽度限定符"><a href="#最小宽度限定符" class="headerlink" title="最小宽度限定符"></a>最小宽度限定符</h3><p>最小宽度限定符允许我们为屏幕的宽度指定一个最小值，以dp为单位。<br>同样是在res目录下新建layout-sw600dp文件夹，此后步骤就相同了。新建一个activity_main.xml布局。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/left_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/right_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.example.fragmenttest.RightFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，当程序运行在屏幕宽度大于等于600dp的设备上时就会加载layout-sw600dp&#x2F;activity_main.xml布局。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习</title>
    <url>/2023/01/15/CSS%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>CSS 是一门语言，用于控制网页表现。CSS也有一个专业的名字：Cascading Style Sheet（层叠样式表）。 </p>
<h2 id="CSS导入方式"><a href="#CSS导入方式" class="headerlink" title="CSS导入方式"></a>CSS导入方式</h2><p>css 导入方式其实就是 css 代码和 html 代码的结合方式。CSS 导入 HTML有三种方式：</p>
<p>1.<strong>内联样式</strong>：再标签内部使用style属性，属性值是CSS属性键值对</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>Hello CSS<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>给方式只能作用在这一个标签上，如果其他的标签也想使用同样的样式，那就需要在其他标签上写上相同的样式。复用性太差。</p>
<p>2.<strong>内部样式</strong>：定义&lt;style&gt;标签，在标签内部定义css样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种方式可以做到在该页面中复用。</p>
<p>3.<strong>外部样式</strong>：定义link标签，引入外部的css文件。编写一个css文件。名为：demo.css，内容如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;demo.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种方式可以在多个页面进行复用。其他的页面想使用同样的样式，只需要使用 <code>link</code> 标签引入该css文件。</p>
<p>样例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--内部样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--外部样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;../css/demo.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--内联样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>Hello CSS!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--内部样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello CSS!!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--外部样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello CSS!!!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>demo.css:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blanchedalmond;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p>CSS选择器就是选取需设置样式的元素（标签）</p>
<ul>
<li><p>元素选择器</p>
<p>格式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">元素名称&#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;color:red&#125; </span><br></pre></td></tr></table></figure>
</li>
<li><p>id选择器</p>
<p>格式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#id</span>属性值&#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<p>html代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span>hello css2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>css代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#name</span>&#123;<span class="attribute">color</span>: red;</span><br></pre></td></tr></table></figure>
</li>
<li><p>类选择器</p>
<p>格式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class</span>属性值&#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<p>html代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>hello css3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>css代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.cls</span>&#123;<span class="attribute">color</span>: red;&#125; </span><br></pre></td></tr></table></figure></li>
</ul>
<p>样例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*元素选择器*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: brown;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*id选择器*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#name</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*选择范围小的生效*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*类选择器，可以选择多个*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.cls</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: chartreuse;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="CSS属性"><a href="#CSS属性" class="headerlink" title="CSS属性"></a>CSS属性</h2><p>CSS有很多CSS属性，要想都学会，需要花费很长的时间。需要用的时候可以去看文档。</p>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask框架学习</title>
    <url>/2023/02/19/Flask%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>Flask是一个用Python编写的Web应用程序框架。</p>
<h2 id="Flask项目简要"><a href="#Flask项目简要" class="headerlink" title="Flask项目简要"></a>Flask项目简要</h2><h3 id="项目大致结构"><a href="#项目大致结构" class="headerlink" title="项目大致结构"></a>项目大致结构</h3><p>flaskDemo1<br>   ├─static<br>   ├─templates<br>   └─app.py  </p>
<p><strong>app.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从flask这个包中导入Flask类</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Flask类创建一个app对象</span></span><br><span class="line"><span class="comment"># __name__:代表当前app.py这个模块</span></span><br><span class="line"><span class="comment"># 1.以后出现bug，可以帮助快速定位</span></span><br><span class="line"><span class="comment"># 2.对于寻找模板文件，有一个相对路径</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个路由和视图函数的映射</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;https://blog.csdn.net/m0_61465701?type=blog&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FLASK_APP = app.py</span><br><span class="line">FLASK_ENV = development</span><br><span class="line">FLASK_DEBUG = 0</span><br><span class="line">In folder E:/PyCharmProject/flaskDemo1</span><br><span class="line">E:\SoftwareFile\anaconda\python.exe -m flask run </span><br><span class="line"> * Serving Flask app &quot;app.py&quot;</span><br><span class="line"> * Environment: development</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure>

<p>可以进入网站查看效果。</p>
<h3 id="debug模式"><a href="#debug模式" class="headerlink" title="debug模式"></a>debug模式</h3><p>开启debug模式后</p>
<ul>
<li>只要修改代码后保存，就会自动重新加载，不需要手动重启项目。</li>
<li>在浏览器上就可以看到出错信息。</li>
</ul>
<p><strong>开启</strong>：</p>
<p>点击Edit Configurations… , 再勾选Configuration下的FLASK_DEBUG选项，点击OK。</p>
<p>社区版：修改代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.run(debug=True)</span><br></pre></td></tr></table></figure>

<p>修改代码后，ctrl+s保存后就会自动重新加载。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* Detected change in &#x27;E:\\PyCharmProject\\flaskDemo1\\app.py&#x27;, reloading</span><br><span class="line">* Restarting with watchdog (windowsapi)</span><br><span class="line">* Debugger is active!</span><br><span class="line">* Debugger PIN: 296-639-520</span><br><span class="line">* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure>

<h3 id="修改host"><a href="#修改host" class="headerlink" title="修改host"></a>修改host</h3><p>主要作用:就是让其他电脑能访问到自己电脑上的flask项目</p>
<p>点击Edit Configurations… , 在Configuration下的Additional options中填写即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--host=0.0.0.0  //可以写自己电脑的ip地址</span><br><span class="line">// 0.0.0.0别人可以访问你电脑上的</span><br></pre></td></tr></table></figure>

<h3 id="修改port端口号"><a href="#修改port端口号" class="headerlink" title="修改port端口号"></a>修改port端口号</h3><p>点击Edit Configurations… , 在Configuration下的Additional options中填写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--host=0.0.0.0 --port=8000</span><br></pre></td></tr></table></figure>

<h2 id="URL与视图的映射"><a href="#URL与视图的映射" class="headerlink" title="URL与视图的映射"></a>URL与视图的映射</h2><p>url: http[80]&#x2F;https[443]:&#x2F;&#x2F;<a href="http://www.xxx.com:443/path">www.xxx.com:443/path</a> </p>
<p>url与视图更准确来说是path与视图，只有path部分是需要自己现在编写的。</p>
<p>绝大部分网站都不可能只有首页一个页面，我们在制作网站的时候，需要定义许多不同的URL来满足需求，而URL总体上来讲又分为两种，第一种是无参数的,第二种是有参数的。</p>
<h3 id="定义无参URL"><a href="#定义无参URL" class="headerlink" title="定义无参URL"></a>定义无参URL</h3><p>无参URL是在URL定义的过程中，不需要定义参数。</p>
<p>可以使用以下代码实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/2&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stage2</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;stage2&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/3/abc&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stage3</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;stage3--abc&#x27;</span></span><br></pre></td></tr></table></figure>

<p>注意:我们说的访问&#x2F;path是不包含域名和端口号的，真正在浏览器中访问应该在前面加上域名和端口号，比如在本地开发应该为<a href="http://127.0.0.1:5000/path">http://127.0.0.1:5000/path</a> ，下文说的URL都是省略了域名和端口号。</p>
<h3 id="定义带有参数的URL"><a href="#定义带有参数的URL" class="headerlink" title="定义带有参数的URL"></a>定义带有参数的URL</h3><p>很多时候，我们在访问某个URL的时候,需要携带一些参数过去。</p>
<p>比如获取博客详情，就需要把博客的id传过去，那么博客详情的URL可能为:&#x2F;blog&#x2F;13，其中13为博客的id。比如获取第10页的博客列表，那么博客列表的URL可能为: &#x2F;blog&#x2F;list&#x2F;10，其中10为页码。</p>
<p>在Flask中，如果URL中携带了参数，那么视图函数也必须定义相应的形参来接收URL中的参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test/&lt;int:num&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;num=%s&quot;</span> % num</span><br></pre></td></tr></table></figure>

<p>可以看到，URL中多了一对尖括号，并且尖括号中多了一个num，这个 num就是参数。然后在视图函数 show中，也相应定义了一个num的形参，当浏览器访问这个URL的时候，Flask接收到请求后，会自动解析URL中的参数 num，然后把他传给视图函数 show，在视图函数中，开发者就可以根据这个num，从数据库中查找到具体的数据，返回给浏览器。</p>
<p>参数类型可以不指定。</p>
<p>URL中的参数可以指定以下类型</p>
<table>
<thead>
<tr>
<th>参数类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>string</td>
<td>字符串类型。可以接受除&#x2F;以外的字符</td>
</tr>
<tr>
<td>int</td>
<td>整型。可以接受通过int()方法转换的字符</td>
</tr>
<tr>
<td>float</td>
<td>浮点类型。以接受通过float()方法转换的字符</td>
</tr>
<tr>
<td>path</td>
<td>路径。类似string，但是中间可以添加&#x2F;。</td>
</tr>
<tr>
<td>uuid</td>
<td>UUID类型。UUID是一组由32位数的16进制所构成。</td>
</tr>
<tr>
<td>any</td>
<td>备选值中的任何一个。</td>
</tr>
</tbody></table>
<p>比较特殊的any举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;any(a,b,c):s&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show2</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;str=%s&quot;</span> % s</span><br></pre></td></tr></table></figure>

<h3 id="查询字符串的方式传参"><a href="#查询字符串的方式传参" class="headerlink" title="查询字符串的方式传参"></a>查询字符串的方式传参</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/num1&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show3</span>():</span><br><span class="line">    <span class="comment"># arguments：参数</span></span><br><span class="line">    <span class="comment"># request.args：类字典类型</span></span><br><span class="line">    num = request.args.get(<span class="string">&quot;num&quot;</span>,default=<span class="number">555</span>,<span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;num=<span class="subst">&#123;num&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>在浏览器访问<a href="http://127.0.0.1:5000/num1">http://127.0.0.1:5000/num1</a> 结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">num=555</span><br></pre></td></tr></table></figure>

<p>在浏览器访问<a href="http://127.0.0.1:5000/num1?num=123%E7%BB%93%E6%9E%9C%E4%B8%BA">http://127.0.0.1:5000/num1?num=123结果为</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">num=123</span><br></pre></td></tr></table></figure>

<h2 id="Jinja2模板"><a href="#Jinja2模板" class="headerlink" title="Jinja2模板"></a>Jinja2模板</h2><p>在Flask中,渲染HTML通常会交给模板引擎来做,而Flask中默认配套的模板引擎是Jinja2，Jinja2的作者也是Flask的作者，Jinja2可以独立于Flask使用，比如被Django使用。Jinja2是一个高效、可扩展的模板引擎。</p>
<h3 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h3><p>在templates下新建一个html文件，index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html 5的标签--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--页面的字符集--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题 h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    HTML 是一门语言，所有的网页都是有HTML这门语言编写出来的。<span class="tag">&lt;<span class="name">br</span>&gt;</span>HTML 是一门语言，所有的网页都是有HTML这门语言编写出来的。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后修改app.py中的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import Flask,request,render_template</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/test1&#x27;)</span><br><span class="line">def test1():</span><br><span class="line">    return render_template(&quot;index.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(debug=True)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="渲染变量"><a href="#渲染变量" class="headerlink" title="渲染变量"></a>渲染变量</h3><p>html文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>博客详情<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户名：&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>访问的博客详情是：&#123;&#123; blog_id &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改app.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/blog/&lt;blog_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blog_detail</span>(<span class="params">blog_id</span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;blog_detail.html&quot;</span>,blog_id=blog_id,username=<span class="string">&#x27;Xiaoming&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="模板访问对象属性"><a href="#模板访问对象属性" class="headerlink" title="模板访问对象属性"></a>模板访问对象属性</h3><p><strong>类</strong></p>
<p>index.html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html 5的标签--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--页面的字符集--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户名/邮箱<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; user.username &#125;&#125;/&#123;&#123; user.email &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>app.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,username,email</span>):</span><br><span class="line">        self.username = username</span><br><span class="line">        self.email = email</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test2&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    user = User(username=<span class="string">&quot;Xiaoming&quot;</span>,email=<span class="string">&quot;2023@qq.com&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>,user=user)</span><br></pre></td></tr></table></figure>

<p><strong>字典</strong></p>
<p>index.html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户名/邮箱<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; user.username &#125;&#125;/&#123;&#123; user.email &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; person[&#x27;username&#x27;] &#125;&#125;/&#123;&#123; person.email &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>app.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,username,email</span>):</span><br><span class="line">        self.username = username</span><br><span class="line">        self.email = email</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test2&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    user = User(username=<span class="string">&quot;Xiaoming&quot;</span>,email=<span class="string">&quot;2023@qq.com&quot;</span>)</span><br><span class="line">    person = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>:<span class="string">&quot;Wang Xiaoming&quot;</span>,</span><br><span class="line">        <span class="string">&quot;email&quot;</span>:<span class="string">&quot;2009@qq.com&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>,user=user,person=person)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="过滤器的使用"><a href="#过滤器的使用" class="headerlink" title="过滤器的使用"></a>过滤器的使用</h3><p>在Python中，如果需要对某个变量进行处理。我们可以通过函数来实现。在模板中,我们则是通过过滤器来实现的。过滤器本质上也是函数。但是在模板中使用的方式是通过管道符号|来调用的。</p>
<p>例如有个字符串类型变赋 name。想要获取他的长度。则可以通过0来获收。Jinja2会把name当傲第一个参数传给 length过滤器底层对应的函数。</p>
<p>新建filter.html文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>过滤器使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123; user.username &#125;&#125;-长度为：&#123;&#123; user.username|length &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123; user.email &#125;&#125;-长度为：&#123;&#123; user.email|length &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改app.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/filter&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_demo</span>():</span><br><span class="line">    user = User(username=<span class="string">&quot;Zhang&quot;</span>,email=<span class="string">&quot;1999@qq.com&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;filter.html&quot;</span>,user=user)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>一些过滤器</strong></p>
<ol>
<li><p>abs(value):返回一个数值的绝对值，例如<code>&#123;&#123; -1|abs &#125;&#125;</code>。如果给的参数类型不为数字，就会报错。</p>
</li>
<li><p>default(value,default_value,boolean&#x3D;False):如果value没有定义，则返回第二个参数default_value。如果想要让 value在被判断为False的情况下(传入<code>&#39;&#39;,[],None,&#123;&#125;</code>这些值的时候)使用default_value，则应该将后面的boolean参数设置为True。</p>
</li>
<li><p>escape(value):将一些特殊字符，比如:&amp;，&lt;，&gt;，”，’进行转义。因为Jinja2默认开启了全局转义，所以在大部分情况下无需手动使用这个过滤器去转义，只有在关闭转义的情况下会需要使用。</p>
</li>
<li><p>first(value): 返回序列的第一个元素</p>
<ul>
<li>如果是一个字典，那么返回的是<code>key</code>的值</li>
</ul>
</li>
<li><p>last(value): 返回序列的最后一个元素</p>
</li>
<li><p>format(value,*args,**kwargs): 格式化字符窜，和python中写法是一样的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; &quot;%s/%s&quot;|format(&quot;username&quot;,&quot;email&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>join(value,d&#x3D;’’): 将一个序列用d这个参数的值拼接成字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; num|join(&#x27;-&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">结果：</span><br><span class="line">1-2-3-4</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><p>如果内置过滤器不满足需求，我们还可以自定义过滤器。</p>
<p>过滤器本质上是 Python的函数，他会把被过滤的值当做第一个参数传给这个函数，函数经过一些逻辑处理后，再返回新的值。在过滤器函数写好后，可以通过@app.template_ filter装饰器或者是 app.add_template_filter 函数来把函数注册成Jinja2能用的过滤器。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_string</span>(<span class="params">value, mystr</span>):</span><br><span class="line">    <span class="keyword">return</span> value+mystr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.add_template_filter(add_string,<span class="string">&quot;addstring&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>其中第一个参数是需要被处理的值，然后通过app.add_template_filter，将函数注册成了过滤器，并且这个过滤器的名字，叫做addstring。那么以后在模板文件中,就可以使用了:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; user.username|addstring(&quot;hhhh&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>如果app.add_template_filter没有传第二个参数，那么默认将使用函数的名称，来作为过滤器的名称。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.add_template_filter(add_string)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; user.username|add_string(&quot;hhhh&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a><strong>if语句</strong></h4><p>Jinja2中的if语句和Python中的if语句非常的类似。可以使用&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;、&#x3D;&#x3D;、!&#x3D;来进行判断，也可以通过and、or、not来进行逻辑操作。</p>
<p>control.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>控制语句<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% if a &gt; 20 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>a的值大于20<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% elif a == 20%&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>a的值等于20<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>a的值小于20<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>app.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/control&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">control_statement</span>():</span><br><span class="line">    a = <span class="number">22</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;control.html&quot;</span>,a = a)</span><br></pre></td></tr></table></figure>

<h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><strong>for循环</strong></h4><p>Jinja2中的 for循环与Python中的 for 循环也是非常类似的，只是比 Python中的 for 循环多一个endfor 代码块。</p>
<p>不存在break语句。</p>
<p>control.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% for person in persons %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>name:&#123;&#123; person.name &#125;&#125;,hobby:&#123;&#123; person.hobby &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>app.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/control&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">control_statement</span>():</span><br><span class="line">    a = <span class="number">22</span></span><br><span class="line">    persons = [&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>:<span class="string">&quot;Xiaoming&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;baseball&quot;</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>:<span class="string">&quot;Xiaofang&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;basketball&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;control.html&quot;</span>,a = a,persons = persons)</span><br></pre></td></tr></table></figure>

<h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><p>一个网站中，大部分网页的模块是重复的，比如顶部的导航栏，底部的备案信息。如果在每个页面中都重复的去写这些代码，会让项目变得臃肿，提高后期维护成本。比较好的做法是，通过模板继承，把一些重复性的代码写在父模板中，子模板继承父模板后，再分别实现自己页面的代码。</p>
<p>新建一个base.html作为父模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">        &#123;% block title %&#125;</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>父模板的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>底部标签<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上父模板中，编写好了网页的整体结构。然后针对子模板需要重写的地方，则定义成了block，比如以上定义了title、body这两个block，子模板在继承了父模板后，重写对应 block 的代码，即可完成子模板的渲染。</p>
<p>编写一个child1.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">    child1标题</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子模版child1的部分<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p>app.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/child1&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">child1</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;child1.html&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="加载静态文件"><a href="#加载静态文件" class="headerlink" title="加载静态文件"></a>加载静态文件</h3><p>一个网页中，除了HTML代码以外，还需要CSS、JavaScript 和图片文件才能更加美观和实用。静态文件默认是存放到当前项目的static文件夹中，如果想要修改静态文件存放路径，可以在创建Flask对象的时候，设置static_folder 参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app = Flask(__name__,static_folder=<span class="string">&#x27;C:\\Users\\Xu\\Desktop\\static&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在模板文件中，可以通过url_for加载静态文件，示例代码如下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;style.css&#x27;) &#125;&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>第一个参数static是一个固定的，表示构建Flask 内置的static视图这个URL，第二个filename 是可以传递文件名或者文件路径,路径是相对于static或者static_folder参数自定义的路径。以上代码在被模板渲染后，会被解析成:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link href=&quot;/static/style<span class="selector-class">.css</span>&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>新建一个style.css文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: antiquewhite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建一个jstest.js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;it is js&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>新建一个static.html文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;加载静态文件&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;css/style.css&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;images/city.png&#x27;) &#125;&#125;&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;script src=&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;js/jstest.js&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>修改app.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/static&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">static_demo</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;static.html&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>数据库是一个动态网站必备的基础功能。通过使用数据库，数据可以被动态的展示、修改、删除等，极大的提高了数据管理能力，以及数据传递的效率。</p>
<p>Flask想要操作数据库，必须要先安装Python操作 MySQL的驱动。在Python中，目前有以下MySQL驱动包。</p>
<ol>
<li><p>MySQL-python:也就是 MySQLdb。是对C语言操作 MySQL数据库的一个简单封装。遵循了Python DB·API v2。但是只支持Python2。</p>
</li>
<li><p>mysqIclient:是 MySQL-python的另外一个分支。支持Python3并且修复了一些bug，是目前为止执行效率最高的驱动，但是安装的时候容易因为环境问题出错。</p>
</li>
<li><p>pymysql:纯 Python实现的一个驱动。因为是纯 Python编写的，因此执行效率不如 mysqlclient。也正因为是纯 Python写的，因此可以和Python代码无缝衔接。</p>
</li>
<li><p>mysql-connector-python: MySQL官方推出的纯 Python连接MySQL 的驱动，执行效率比pymysql 还慢。</p>
</li>
</ol>
<p>这里我们用的是<strong>pymysql</strong></p>
<p>通过以下命令安装。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>

<p>在Flask中，我们<strong>很少会使用pymysql直接写原生SQL语句去操作数据库</strong>，更多的是通过SQLAlchemy提供的ORM技术，类似于操作普通Python对象一样实现数据库的增删改查操作，而 Flask-SQLAlchemy是对 SQLAIchemy的一个封装，使得在Flask中使用SQLAlchemy更加方便。</p>
<p>Flask-SQLAlchemy是需要单独安装，因为Flask-SQLAlchemy依赖SQLAlchemy，所以只要安装了Flask-SQLAlchemy，sQLAlchemy会自动安装。安装命令如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install flask-sqlalchemy</span><br></pre></td></tr></table></figure>

<p>SQLAlchemy类似于Jinja2，是可以独立于Flask而被使用的，完全可以在任何Python程序被使用，SQLAlchemy的功能非常强大。</p>
<p><a href="https://www.sqlalchemy.org/">SQLAlchemy 的官方文档</a>。</p>
<h3 id="Flask连接MySQL数据库"><a href="#Flask连接MySQL数据库" class="headerlink" title="Flask连接MySQL数据库"></a>Flask连接MySQL数据库</h3><p>使用 Flask-SQLAlchemy操作数据库之前，要先创建一个由 Flask-SQLAlchemy提供的SQLAlchemy类的对象。在创建这个类的时候，要传入当前的app。然后还需要在app.config中设置SQLALCHEMY_ DATABASE_URI，来配置数据库的连接。</p>
<p>修改app.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL所在的主机名</span></span><br><span class="line">HOSTNAME = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="comment"># MySQL监听的端口号，默认3306</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line"><span class="comment"># 连接MySQL的用户名</span></span><br><span class="line">USERNAME = <span class="string">&quot;root&quot;</span></span><br><span class="line"><span class="comment"># 连接MySQL的密码</span></span><br><span class="line">PASSWORD = <span class="string">&quot;031006&quot;</span></span><br><span class="line"><span class="comment"># MySQL上创建的数据库名称</span></span><br><span class="line">DATABASE = <span class="string">&quot;xlr&quot;</span></span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">f&quot;mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOSTNAME&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DATABASE&#125;</span>?charset=utf8mb4&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在app.config中设置好连接数据库的信息，</span></span><br><span class="line"><span class="comment"># 然后使用SQLAlchemy(app)创建一个db对象</span></span><br><span class="line"><span class="comment"># SQLAlchemy会自动读取app.config中连接数据库的信息</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试数据库是否连接成功</span></span><br><span class="line"><span class="comment"># 连接成功后结果为(1,)</span></span><br><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    <span class="keyword">with</span> db.engine.connect() <span class="keyword">as</span> conn:</span><br><span class="line">        rs = conn.execute(<span class="string">&quot;select 1&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(rs.fetchone())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():  <span class="comment"># put application&#x27;s code here</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ORM模型与表的映射"><a href="#ORM模型与表的映射" class="headerlink" title="ORM模型与表的映射"></a>ORM模型与表的映射</h3><p>对象关系映射（Object Relationship-Mapping)，简称ORM，是一种可以用Python面向对象的方式来操作关系型数据库的技术，具有可以映射到数据库表能力的 Python类我们称之为ORM模型。一个ORM模型与数据库中一个表相对应，ORM模型中的每个类属性分别对应表的每个字段，ORM模型的每个实例对象对应表中每条记录。ORM技术提供了面向对象与SQL交互的桥梁，让开发者用面向对象的方式操作数据库，使用ORM模型具有以下优势。</p>
<ol>
<li>开发效率高:几乎不需要写原生SQL语句，使用纯 Python的方式操作数据库，大大的提高了开发效率。</li>
<li>安全性高:ORM模型底层代码对一些常见的安全问题，比如SQL注入做了防护，比直接使用SQL语句更加安全。</li>
<li>灵活性强:Flask-SQLAlchemy底层支持SQLite、MySQL、Oracle、PostgreSQL等关系型数据库，但针对不同的数据库，ORM模型代码几乎一模一样，只需修改少量代码，即可完成底层数据库的更换。</li>
</ol>
<p>修改app.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL所在的主机名</span></span><br><span class="line">HOSTNAME = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="comment"># MySQL监听的端口号，默认3306</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line"><span class="comment"># 连接MySQL的用户名</span></span><br><span class="line">USERNAME = <span class="string">&quot;root&quot;</span></span><br><span class="line"><span class="comment"># 连接MySQL的密码</span></span><br><span class="line">PASSWORD = <span class="string">&quot;031006&quot;</span></span><br><span class="line"><span class="comment"># MySQL上创建的数据库名称</span></span><br><span class="line">DATABASE = <span class="string">&quot;xlr&quot;</span></span><br><span class="line"></span><br><span class="line">app.config[</span><br><span class="line">    <span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">f&quot;mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOSTNAME&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DATABASE&#125;</span>?charset=utf8mb4&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在app.config中设置好连接数据库的信息，</span></span><br><span class="line"><span class="comment"># 然后使用SQLAlchemy(app)创建一个db对象</span></span><br><span class="line"><span class="comment"># SQLAlchemy会自动读取app.config中连接数据库的信息</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试数据库是否连接成功</span></span><br><span class="line"><span class="comment"># 连接成功后结果为(1,)</span></span><br><span class="line"><span class="comment"># with app.app_context():</span></span><br><span class="line"><span class="comment">#     with db.engine.connect() as conn:</span></span><br><span class="line"><span class="comment">#         rs = conn.execute(&quot;select 1&quot;)</span></span><br><span class="line"><span class="comment">#         print(rs.fetchone())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># User继承自db.Model</span></span><br><span class="line"><span class="comment"># db.Model中封装了与数据库底层交互相关的一些方法和属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)  <span class="comment"># 这样id才能成为表中的一个字段</span></span><br><span class="line">    <span class="comment"># varchar 最大长度为100 nullable=False字段不能为空</span></span><br><span class="line">    username = db.Column(db.String(<span class="number">100</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    password = db.Column(db.String(<span class="number">100</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># user = User(username=&quot;2021&quot;,password=&quot;123456&quot;)</span></span><br><span class="line"><span class="comment"># sql: insert user(username, password) values(&#x27;2021&#x27;, &#x27;123456&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    db.create_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():  <span class="comment"># put application&#x27;s code here</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>首先我们创建一个类名叫 User，并使得他继承自db.Model，所有ORM 模型必须是db.Model的直接或者间接子类。</p>
<p>然后通过_tablename_属性，指定User模型映射到数据库中表的名称。</p>
<p>接着我们定义了三个db.Column类型的类属性,分别是id、username、password,只有使用db.Column定义的类属性，才会被映射到数据库表中成为字段。在这个User模型中，id是 db.Integer类型，在数据库中将表现为整形，并且传递primary_key&#x3D;True参数来指定id作为主键,传递autoincrement&#x3D;True来设置id为自增长。接下来的username和password,我们分别指定其类型为db.String类型，在数据库中将表现为varchar类型，并且指定其最大长度为100。</p>
<h3 id="ORM模型的CRUD操作"><a href="#ORM模型的CRUD操作" class="headerlink" title="ORM模型的CRUD操作"></a>ORM模型的CRUD操作</h3><h4 id="增加操作"><a href="#增加操作" class="headerlink" title="增加操作"></a>增加操作</h4><p>先使用ORM模型创建一个对象，然后添加到会话中，再进行commit 操作即可。</p>
<p>修改app.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)  <span class="comment"># 这样id才能成为表中的一个字段</span></span><br><span class="line">    <span class="comment"># varchar 最大长度为100 nullable=False字段不能为空</span></span><br><span class="line">    username = db.Column(db.String(<span class="number">100</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    password = db.Column(db.String(<span class="number">100</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/add&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_add</span>():</span><br><span class="line">    <span class="comment"># 1. 创建ORM对象</span></span><br><span class="line">    user = User(username=<span class="string">&quot;2021&quot;</span>, password=<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">    <span class="comment"># 2. 将ORM对象添加到db.session中</span></span><br><span class="line">    db.session.add(user)</span><br><span class="line">    <span class="comment"># 3. 将db.session中的改变同步到数据库中</span></span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Add success!&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><p>ORM模型都是继承自db.Model，db.Model内置的query属性上有许多方法，可以实现对ORM模型的查询操作。query 上的方法可以分为两大类，分别是提取方法以及过滤方法。</p>
<p><strong>query常用的提取方法</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>query.all()</td>
<td>获取查询结果集中的所有对象，是列表类型。</td>
</tr>
<tr>
<td>query.first()</td>
<td>获取结果集中的第一个对象。</td>
</tr>
<tr>
<td>query.one()</td>
<td>获取结果集中的第一个对象，如果结果集中对象数量不等于1，则会抛出异常。</td>
</tr>
<tr>
<td>query.one_or_none()</td>
<td>与one类似，结果不为1的时候，不是抛出异常，而是返回None。</td>
</tr>
<tr>
<td>query.get(pk)</td>
<td>根据主键获取当前ORM模型的第一条数据。</td>
</tr>
<tr>
<td>query.exists()</td>
<td>判断数据是否存在。</td>
</tr>
<tr>
<td>query.count()</td>
<td>获取结果集的个数。</td>
</tr>
</tbody></table>
<p><strong>query常用的过滤方法</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>query.filter()</td>
<td>根据查询条件过滤</td>
</tr>
<tr>
<td>query.filter_by()</td>
<td>根据关键字参数过滤。</td>
</tr>
<tr>
<td>query.slice(start,stop)</td>
<td>对结果进行切片操作。</td>
</tr>
<tr>
<td>query.limit(limit)</td>
<td>对结果数量进行限制。</td>
</tr>
<tr>
<td>query.offset(offset)</td>
<td>在查询的时候跳过前面offset条数据。</td>
</tr>
<tr>
<td>query.order_by()</td>
<td>根据给定字段进行排序。</td>
</tr>
<tr>
<td>query.group_by()</td>
<td>根据给定字段进行分组。</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/query&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_query</span>():</span><br><span class="line">    <span class="comment"># 1. get查找：根据主键查找,只查找一条数据</span></span><br><span class="line">    <span class="comment"># user = User.query.get(1)</span></span><br><span class="line">    <span class="comment"># print(f&quot;id:&#123;user.id&#125;,username:&#123;user.username&#125;,password:&#123;user.password&#125;&quot;)</span></span><br><span class="line">    <span class="comment"># 2. filter_by查找</span></span><br><span class="line">    users = User.query.filter_by(username=<span class="string">&#x27;2021&#x27;</span>)</span><br><span class="line">    <span class="comment"># 是一个Query对象：类数组</span></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;id:<span class="subst">&#123;user.<span class="built_in">id</span>&#125;</span>,username:<span class="subst">&#123;user.username&#125;</span>,password:<span class="subst">&#123;user.password&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Query Success&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/update&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_update</span>():</span><br><span class="line">    user = User.query.filter_by(username=<span class="string">&#x27;2021&#x27;</span>).first()</span><br><span class="line">    user.password = <span class="string">&quot;555555&quot;</span></span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Update success&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/delete&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_delete</span>():</span><br><span class="line">    <span class="comment"># 1. 查找</span></span><br><span class="line">    user = User.query.get(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 2. 从db.session中删除</span></span><br><span class="line">    db.session.delete(user)</span><br><span class="line">    <span class="comment"># 3. 将db.session中的修改，同步到数据库中</span></span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Delete Success&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="ORM模型外键与表关系"><a href="#ORM模型外键与表关系" class="headerlink" title="ORM模型外键与表关系"></a>ORM模型外键与表关系</h3><p>关系型数据库一个强大的功能，就是多个表之间可以建立关系。</p>
<p>比如文章表中，通常需要保存作者数据,但是我们不需要直接把作者数据放到文章表中,而是通过外键引用用户表。这种强大的表关系，可以存储非常复杂的数据，并且可以让查询非常迅速。在 Flask-SQLAIchemy中，同样也支持表关系的建立。</p>
<p>表关系建立的前提，是通过数据库层面的外键实现的。表关系总体来讲可以分为三种，分别是:一对多（多对一)、一对一、多对多。</p>
<p><strong>建立关系</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&quot;article&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">200</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    content = db.Column(db.Text, nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加外键</span></span><br><span class="line">    author_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&quot;user.id&quot;</span>))</span><br><span class="line">    <span class="comment"># 通过db.relationship与User模型建立联系</span></span><br><span class="line">    author = db.relationship(<span class="string">&quot;User&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>我们添加了一个author 属性，这个属性通过db.relationship 与User模型建立了联系，以后通过Article 的实例对象访问author 的时候，比如 article.author，那么Flask-SQLAlchemy会自动根据外键author_id 从 user表中寻找数据，并形成User模型实例对象。</p>
<p><strong>建立双向关系</strong></p>
<p>现在的Article模型可以通过author属性访问到对应的User实例对象。但是User实例对象无法访问到和他关联的所有Article 实例对象。因此为了实现双向关系绑定，我们还需要在User模型上添加一个db.relationship类型的articles属性，并且在User模型和Article模型双方的db.relationship 上，都需要添加一个back _populates参数，用于绑定对方访问自己的属性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)  <span class="comment"># 这样id才能成为表中的一个字段</span></span><br><span class="line">    <span class="comment"># varchar 最大长度为100 nullable=False字段不能为空</span></span><br><span class="line">    username = db.Column(db.String(<span class="number">100</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    password = db.Column(db.String(<span class="number">100</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    articles = db.relationship(<span class="string">&quot;Article&quot;</span>, back_populates=<span class="string">&quot;author&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&quot;article&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">200</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    content = db.Column(db.Text, nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加外键</span></span><br><span class="line">    author_id = db.Column(db.Interger, db.ForeignKey(<span class="string">&quot;user.id&quot;</span>))</span><br><span class="line">    <span class="comment"># 通过db.relationship与User模型建立联系</span></span><br><span class="line">    author = db.relationship(<span class="string">&quot;User&quot;</span>, back_populates=<span class="string">&quot;articles&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>以上User和Article模型中，我们通过在两边的db.relationship上，传递back_populates参数来实现双向绑定，这种方式有点啰嗦，我们还可以通过只在一个模型上定义db.relationship类型属性，并且传递 backref参数，来实现双向绑定。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)  <span class="comment"># 这样id才能成为表中的一个字段</span></span><br><span class="line">    <span class="comment"># varchar 最大长度为100 nullable=False字段不能为空</span></span><br><span class="line">    username = db.Column(db.String(<span class="number">100</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    password = db.Column(db.String(<span class="number">100</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># articles = db.relationship(&quot;Article&quot;, back_populates=&quot;author&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&quot;article&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">200</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    content = db.Column(db.Text, nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加外键</span></span><br><span class="line">    author_id = db.Column(db.Interger, db.ForeignKey(<span class="string">&quot;user.id&quot;</span>))</span><br><span class="line">    <span class="comment"># backref：会自动的给User模型添加一个articles的属性，用来获取文章列表</span></span><br><span class="line">    author = db.relationship(<span class="string">&quot;User&quot;</span>, backref=<span class="string">&quot;articles&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>增加和查询article：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/article/add&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">article_add</span>():</span><br><span class="line">    article1 = Article(title=<span class="string">&quot;Flask学习&quot;</span>, content=<span class="string">&quot;Flaskxxxx&quot;</span>)</span><br><span class="line">    article1.author = User.query.get(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    article2 = Article(title=<span class="string">&quot;Django学习&quot;</span>, content=<span class="string">&quot;Django最全学习&quot;</span>)</span><br><span class="line">    article2.author = User.query.get(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加到session中</span></span><br><span class="line">    db.session.add_all([article1, article2])</span><br><span class="line">    <span class="comment"># 同步session中的数据到数据库中</span></span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Articles Add Success!&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/article/query&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_article</span>():</span><br><span class="line">    user = User.query.get(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> user.articles:</span><br><span class="line">        <span class="built_in">print</span>(article.title)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Article Query Success!&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="flask-migrate迁移ORM模型"><a href="#flask-migrate迁移ORM模型" class="headerlink" title="flask-migrate迁移ORM模型"></a>flask-migrate迁移ORM模型</h3><p>采用’db.create_all’在后期修改数据库表字段的时候，不会自动的映射到数据库中，必须删除表，然后重新运行’db.create_all’ 才会重新映射。</p>
<p>这样不符合我们的要求，因此flask-migrate就是为了解决这个问题。它可以在每次修改模型后，将修改的字段映射到数据库中。</p>
<p><strong>安装</strong></p>
<p>进入终端，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install flask-imgrate</span><br></pre></td></tr></table></figure>

<p><strong>使用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">migrate = Migrate(app, db)</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>ORM模型映射成表的三步</p>
<ol>
<li><p>flask db init：创建迁移环境 ，迁移环境只需要创建一次。这会在你的项目根目录下创建一个migrations文件夹 。</p>
</li>
<li><p>flask db migrate：识别ORM模型的改变，生成迁移脚本</p>
</li>
<li><p>flask db upgrade：运行迁移脚本，同步到数据库中</p>
</li>
</ol>
<p>ORM模型映射成表的三步都是在终端中输入命令。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Fragment的四种跳转方式</title>
    <url>/2022/08/03/Fragment%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%B7%B3%E8%BD%AC%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>本文主要记录了关于fragment的四种跳转方式：  <br>1、从同一个Activiy的一个Fragment跳转到另外一个Fragment  <br>2、从一个Activity的Fragment跳转到另外一个Activity  <br>3、从一个Activity跳转到另外一个Activity的Fragment上<br>4、从一个Activity的Fragment跳转到另外一个Activity的Fragment上</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先新建一个项目，然后新建两个活动MainActivity、OtherActivity。<br>在MainActivity的布局文件中写一个子布局：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fragment_container&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>新建一个my_fragment.xml布局与MyFragment类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;MyFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;40sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_horizontal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/my_button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textAllCaps</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;To YourFragment&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/my_other&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textAllCaps</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;To OtherActivity&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>MyFragment类就暂时省略了。<br>在MainActivity中先添加进一个Fragment进行最开始的展示（压栈式添加）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        getSupportFragmentManager()</span><br><span class="line">                .beginTransaction()</span><br><span class="line">                .replace(R.id.fragment_container,<span class="keyword">new</span> <span class="title class_">MyFragment</span>())</span><br><span class="line">                .addToBackStack(<span class="literal">null</span>)</span><br><span class="line">                .commit();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="从同一个Activiy的一个Fragment跳转到另外一个Fragment"><a href="#从同一个Activiy的一个Fragment跳转到另外一个Fragment" class="headerlink" title="从同一个Activiy的一个Fragment跳转到另外一个Fragment"></a>从同一个Activiy的一个Fragment跳转到另外一个Fragment</h2><p>这个跳转与上面初始显示Fragment类似。<br>新建your_fragment.xml布局与YourFragment类。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class YourFragment extends Fragment &#123;</span><br><span class="line">    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        View contentView;</span><br><span class="line">        contentView = inflater.inflate(R.layout.your_fragment, container, false);</span><br><span class="line">        return contentView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onActivityCreated(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onActivityCreated(savedInstanceState);</span><br><span class="line">        Button myReturn = (Button) getActivity().findViewById(R.id.my_return);</span><br><span class="line">        myReturn.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            //返回到上一个Fragment（同一个Activity中）</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                getActivity().getSupportFragmentManager().popBackStack();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>your_fragment.xml就暂时先省略了。  <br>跳转部分代码如下,通过点击按钮跳转：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">myButton.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">/** 一、从同一个Activity的一个Fragment跳到另外一个Fragment*/</span></span><br><span class="line">                <span class="comment">//压栈式跳转</span></span><br><span class="line">                getActivity().getSupportFragmentManager()</span><br><span class="line">                        .beginTransaction()</span><br><span class="line">                        .replace(R.id.fragment_container, <span class="keyword">new</span> <span class="title class_">YourFragment</span>(), <span class="literal">null</span>)</span><br><span class="line">                        .addToBackStack(<span class="literal">null</span>)</span><br><span class="line">                        .commit();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="从一个Activity的Fragment跳转到另外一个Activity"><a href="#从一个Activity的Fragment跳转到另外一个Activity" class="headerlink" title="从一个Activity的Fragment跳转到另外一个Activity"></a>从一个Activity的Fragment跳转到另外一个Activity</h2><p>此跳转与Activity之间的跳转十分相似，只是引用上下文的时候，写成getActivity()即可。  <br>跳转关键代码：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">myOther.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             二、从一个Activity的Fragment跳转到另外一个Activity(等同于Activity之间的跳转（上下文是getActivity）)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(getActivity(),OtherActivity.class);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="从一个Activity跳转到另外一个Activity的Fragment上"><a href="#从一个Activity跳转到另外一个Activity的Fragment上" class="headerlink" title="从一个Activity跳转到另外一个Activity的Fragment上"></a>从一个Activity跳转到另外一个Activity的Fragment上</h2><p>我们要从OtherActivity跳转到MainActivity的YourFragment上去：<br>首先，我们在OtherActivity中的跳转事件中给MainActivity传递一个参数,命名为id：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(OtherActivity.<span class="built_in">this</span>, MainActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>);</span><br><span class="line">startActivity(intent);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后，我们在MainActivity里接收id值,对值进行判断，如果正确进行跳转操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> getIntent().getIntExtra(<span class="string">&quot;id&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (id == <span class="number">1</span>) &#123;      </span><br><span class="line">     getSupportFragmentManager()</span><br><span class="line">       .beginTransaction()</span><br><span class="line">       .replace(R.id.fragment_container,<span class="keyword">new</span> <span class="title class_">YourFragment</span>())</span><br><span class="line">       .addToBackStack(<span class="literal">null</span>)</span><br><span class="line">       .commit(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="从一个Activity的Fragment跳转到另外一个Activity的Fragment上"><a href="#从一个Activity的Fragment跳转到另外一个Activity的Fragment上" class="headerlink" title="从一个Activity的Fragment跳转到另外一个Activity的Fragment上"></a>从一个Activity的Fragment跳转到另外一个Activity的Fragment上</h2><p>新建other_fragment.xml布局作为OtherActivity的一个Fragment。<br>这种跳转与第三种跳转极为类似，我们只需要将上面的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Intent intent = new Intent(OtherActivity.this, MainActivity.class);</span><br></pre></td></tr></table></figure>
<p>书写在对应的Fragment中，将OtherActivity.this更改为getActivity()，其他不用改变，就能完成跳转。  <br>关键代码如下：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">ToButton</span> <span class="operator">=</span> (Button) getActivity().findViewById(R.id.to_button);</span><br><span class="line">        ToButton.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(getActivity(), MainActivity.class);</span><br><span class="line">                intent.putExtra(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="所有代码文件"><a href="#所有代码文件" class="headerlink" title="所有代码文件"></a>所有代码文件</h2><p>最后附上所有的代码文件。  <br>MainActivity:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.fragment_activity_skiptest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        getSupportFragmentManager()</span><br><span class="line">                .beginTransaction()</span><br><span class="line">                .replace(R.id.fragment_container,<span class="keyword">new</span> <span class="title class_">MyFragment</span>())</span><br><span class="line">                .addToBackStack(<span class="literal">null</span>)</span><br><span class="line">                .commit();</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> getIntent().getIntExtra(<span class="string">&quot;id&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">1</span>) &#123;</span><br><span class="line">            getSupportFragmentManager()</span><br><span class="line">                    .beginTransaction()</span><br><span class="line">                    .replace(R.id.fragment_container,<span class="keyword">new</span> <span class="title class_">YourFragment</span>())</span><br><span class="line">                    .addToBackStack(<span class="literal">null</span>)</span><br><span class="line">                    .commit();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>MyFragment:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.fragment_activity_skiptest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        View contentView;</span><br><span class="line">            contentView = inflater.inflate(R.layout.my_fragment, container, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> contentView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">myButton</span> <span class="operator">=</span> (Button) getActivity().findViewById(R.id.my_button);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">myOther</span> <span class="operator">=</span> (Button) getActivity().findViewById(R.id.my_other);</span><br><span class="line">        myButton.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">/** 一、从同一个Activity的一个Fragment跳到另外一个Fragment*/</span></span><br><span class="line">                <span class="comment">//压栈式跳转</span></span><br><span class="line">                getActivity().getSupportFragmentManager()</span><br><span class="line">                        .beginTransaction()</span><br><span class="line">                        .replace(R.id.fragment_container, <span class="keyword">new</span> <span class="title class_">YourFragment</span>(), <span class="literal">null</span>)</span><br><span class="line">                        .addToBackStack(<span class="literal">null</span>)</span><br><span class="line">                        .commit();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        myOther.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             二、从一个Activity的Fragment跳转到另外一个Activity(等同于Activity之间的跳转（上下文是getActivity）)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(getActivity(),OtherActivity.class);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>OtherActivity:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.fragment_activity_skiptest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OtherActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_other);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> (Button)findViewById(R.id.to_MainActivity_YourFragment);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button_back</span> <span class="operator">=</span> (Button)findViewById(R.id.back);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button_fm</span> <span class="operator">=</span> (Button)findViewById(R.id.to_OtherFragment);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="comment">/*从一个Activity跳转到另外一个Activity的Fragment上</span></span><br><span class="line"><span class="comment">            例如我们要从OtherActivity跳转到MainActivity的YourFragment上去：</span></span><br><span class="line"><span class="comment">            首先，我们在OtherActivity中的跳转事件中给MainActivity传递一个名为id的参数：</span></span><br><span class="line"><span class="comment">            然后，我们在MainActivity里接收id值,对值进行判断，如果正确进行跳转操作：</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(OtherActivity.<span class="built_in">this</span>, MainActivity.class);</span><br><span class="line">                intent.putExtra(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>);</span><br><span class="line">                startActivity(intent);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        button_back.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        button_fm.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                getSupportFragmentManager()</span><br><span class="line">                        .beginTransaction()</span><br><span class="line">                        .replace(R.id.frame_container, <span class="keyword">new</span> <span class="title class_">OtherFragment</span>(), <span class="literal">null</span>)</span><br><span class="line">                        .addToBackStack(<span class="literal">null</span>)</span><br><span class="line">                        .commit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>OtherFragment:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.fragment_activity_skiptest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OtherFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        View contentView;</span><br><span class="line">        contentView = inflater.inflate(R.layout.other_fragment, container, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> contentView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">ToButton</span> <span class="operator">=</span> (Button) getActivity().findViewById(R.id.to_button);</span><br><span class="line">        ToButton.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="comment">/*4、从一个Activity的Fragment跳转到另外一个Activity的Fragment上</span></span><br><span class="line"><span class="comment">            这种跳转与第三种跳转极为类似，我们只需要将</span></span><br><span class="line"><span class="comment">            Intent intent = new Intent(OtherActivity.this, MainActivity.class);</span></span><br><span class="line"><span class="comment">            书写在对应的Fragment中，将OtherActivity.this更改为getActivity()，其他不用改变，几个完成跳转.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(getActivity(), MainActivity.class);</span><br><span class="line">                intent.putExtra(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>YourFragment:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.fragment_activity_skiptest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        View contentView;</span><br><span class="line">        contentView = inflater.inflate(R.layout.your_fragment, container, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> contentView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">myReturn</span> <span class="operator">=</span> (Button) getActivity().findViewById(R.id.my_return);</span><br><span class="line">        myReturn.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="comment">//返回到上一个Fragment（同一个Activity中）</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                getActivity().getSupportFragmentManager().popBackStack();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>activity_main.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fragment_container&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>activity_other.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/activity_other&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#d0ff05&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/frame_container&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;OtherActivity&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;50sp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">&quot;center_horizontal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/to_MainActivity_YourFragment&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;To MainActivity YourFragment&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textAllCaps</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/to_OtherFragment&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;To OtherFragment&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textAllCaps</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/back&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;back&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>my_fragment.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;MyFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;40sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_horizontal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/my_button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textAllCaps</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;To YourFragment&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/my_other&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textAllCaps</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;To OtherActivity&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>other_fragment.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#ffffff&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;OtherFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;40sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_horizontal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/to_button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textAllCaps</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;To MainActivity YourFragment&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>your_fragment.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#0fa345&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;40sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;YourFragment&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/my_return&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;RETURN&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习</title>
    <url>/2023/01/15/HTLML%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>HTML 是一门语言，所有的网页都是有HTML这门语言编写出来的。</p>
<p>HTML(HyperText Markup Language)：超文本标记语言</p>
<ul>
<li>超文本：超越了文本的限制，比普通文本更强大。除了文字信息，还可以定义图片、音频、视频等内容。</li>
<li>标记语言：由标签构成的语言。</li>
</ul>
<p>HTML运行在浏览器上，HTML标签由浏览器来解析。</p>
<p>HTML标签都是预定义好的。例如：使用&lt;img&gt;来展示图片。</p>
<p>W3C标准：网页主要有三部分组成</p>
<ul>
<li>结构：HTML</li>
<li>表现：CSS</li>
<li>行为：JavaScript</li>
</ul>
<h2 id="HTML快速入门"><a href="#HTML快速入门" class="headerlink" title="HTML快速入门"></a>HTML快速入门</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">title</span>&gt;</span>html 快速入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    	乾坤未定，你我皆是黑马~</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>HTML 文件以.htm或.html为扩展名 </p>
</li>
<li><p>HTML 结构标签 </p>
<table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;html&gt;</td>
<td>定义HTML文档</td>
</tr>
<tr>
<td>&lt;head&gt;</td>
<td>定义关于文档的信息</td>
</tr>
<tr>
<td>&lt;title&gt;</td>
<td>定义文档的标题</td>
</tr>
<tr>
<td>&lt;body&gt;</td>
<td>定义文档的主体</td>
</tr>
</tbody></table>
</li>
<li><p>HTML 标签不区分大小写 </p>
<p>如上案例中的 font 写成 Font 也是一样可以展示出对应的效果的。 </p>
</li>
<li><p>HTML 标签属性值 单双引皆可 </p>
<p>如上案例中的color属性值使用双引号也是可以的。 </p>
</li>
<li><p>HTML 语法松散 </p>
<p>比如 font 标签不加结束标签也是可以展示出效果的。但是建议在写的时候还是不要这样做，严格按照要求去写。</p>
</li>
</ul>
<h2 id="基础标签"><a href="#基础标签" class="headerlink" title="基础标签"></a>基础标签</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;h1&gt; - &lt;h6&gt;</td>
<td>定义标题，h1最大，h6最小</td>
</tr>
<tr>
<td>&lt;font&gt;</td>
<td>定义文本的字体、字体尺寸、字体颜色</td>
</tr>
<tr>
<td>&lt;b&gt;</td>
<td>定义粗体文本</td>
</tr>
<tr>
<td>&lt;i&gt;</td>
<td>定义斜体文本</td>
</tr>
<tr>
<td>&lt;u&gt;</td>
<td>定义文本下划线</td>
</tr>
<tr>
<td>&lt;center&gt;</td>
<td>定义文本居中</td>
</tr>
<tr>
<td>&lt;p&gt;</td>
<td>定义段落</td>
</tr>
<tr>
<td>&lt;br&gt;</td>
<td>定义换行</td>
</tr>
<tr>
<td>&lt;hr&gt;</td>
<td>定义水平线</td>
</tr>
</tbody></table>
<p>font：字体标签 </p>
<ul>
<li><p>face 属性：用来设置字体。如 “楷体”、”宋体”等 </p>
</li>
<li><p>color 属性：设置文字颜色。颜色有三种表示方式 </p>
<ul>
<li><p>英文单词：red,pink,blue… </p>
<p>这种方式表示的颜色特别有限，所以一般不用。 </p>
</li>
<li><p>rgb(值1,值2,值3)：值的取值范围：0~255 </p>
<p>此种方式也就是三原色（红绿蓝）设置方式。 例如： rgb(255,0,0)。 </p>
<p>这种书写起来比较麻烦，一般不用。 </p>
</li>
<li><p>#值1值2值3：值的范围：00~FF </p>
<p>这种方式是rgb方式的简化写法，以后基本都用此方式。 </p>
<p>值1表示红色的范围，值2表示绿色的范围，值3表示蓝色范围。例如： #ff0000</p>
</li>
</ul>
</li>
<li><p>size 属性：设置文字大小</p>
</li>
</ul>
<p><strong>font 标签已经不建议使用了，以后如果要改变文字字体，大小，颜色可以使用 CSS 进行设置。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html 5的标签--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--页面的字符集--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题 h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题 h2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题 h3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题 h4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题 h5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题 h6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;楷体&quot;</span> <span class="attr">size</span>=<span class="string">&quot;5&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#a52a2a&quot;</span>&gt;</span>定义文本的字体、字体尺寸、字体颜色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    HTML 是一门语言，所有的网页都是有HTML这门语言编写出来的。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    HTML 是一门语言，所有的网页都是有HTML这门语言编写出来的。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    HTML 是一门语言，所有的网页都是有HTML这门语言编写出来的。<span class="tag">&lt;<span class="name">br</span>&gt;</span>HTML 是一门语言，所有的网页都是有HTML这门语言编写出来的。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">超文本标记语言<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>超文本标记语言<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>超文本标记语言<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>超文本标记语言<span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>超文本标记语言<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>有些特殊字符需要用转义字符。</p>
<table>
<thead>
<tr>
<th>HTML 原代码</th>
<th>显示结果</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;lt；</td>
<td>&lt;</td>
<td>小于号或显示标记</td>
</tr>
<tr>
<td>&amp;gt；</td>
<td>&gt;</td>
<td>大于号或显示标记</td>
</tr>
<tr>
<td>&amp;amp；</td>
<td>&amp;</td>
<td>可用于显示其他特殊字符</td>
</tr>
<tr>
<td>&amp;quot；</td>
<td>“</td>
<td>引号</td>
</tr>
<tr>
<td>&amp;reg；</td>
<td>&amp;reg;</td>
<td>已注册</td>
</tr>
<tr>
<td>&amp;copy；</td>
<td>&amp;copy;</td>
<td>版权</td>
</tr>
<tr>
<td>&amp;trade；</td>
<td>&amp;trade;</td>
<td>商标</td>
</tr>
<tr>
<td>&amp;nbsp；</td>
<td></td>
<td>不断行的空白</td>
</tr>
</tbody></table>
<p>为了显示，表格中用的为中文分号，实际中要用英文的。</p>
<h2 id="图片、音频、视频标签"><a href="#图片、音频、视频标签" class="headerlink" title="图片、音频、视频标签"></a>图片、音频、视频标签</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;img&gt;</td>
<td>定义图片</td>
</tr>
<tr>
<td>&lt;audio&gt;</td>
<td>定义音频</td>
</tr>
<tr>
<td>&lt;video&gt;</td>
<td>定义视频</td>
</tr>
</tbody></table>
<p><strong>img</strong>：定义图片 </p>
<ul>
<li>src：规定显示图像的 URL（统一资源定位符） </li>
<li>height：定义图像的高度 </li>
<li>width：定义图像的宽度</li>
</ul>
<p><strong>audio</strong>：定义音频。支持的音频格式：MP3、WAV、OGG </p>
<ul>
<li>src：规定音频的 URL </li>
<li>controls：显示播放控件</li>
</ul>
<p><strong>video</strong>：定义视频。支持的音频格式：MP4, WebM、OGG </p>
<ul>
<li>src：规定视频的 URL </li>
<li>controls：显示播放控件</li>
</ul>
<p><strong>尺寸单位：</strong> </p>
<p>height属性和width属性有两种设置方式： </p>
<ul>
<li>像素：单位是px </li>
<li>百分比。占父标签的百分比。例如宽度设置为 50%，意思就是占它的父标签宽度的一般（50%）</li>
</ul>
<p><strong>资源路径：</strong></p>
<p>图片，音频，视频标签都有src属性，而src是用来指定对应的图片，音频，视频文件的路径。此处的图片，音频，视频就称为资源。资源路径有如下两种设置方式： </p>
<ul>
<li><p>绝对路径：完整路径 </p>
<p>这里的绝对路径是网络中的绝对路径。 格式为： 协议:&#x2F;&#x2F;ip地址:端口号&#x2F;资源名称。 </p>
<p>如： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://th.bing.com/th/id/R33674725d9ae34f86e3835ae30b20afe? rik=Pb3C9e5%2b%2b3a9Vw&amp;riu=http%3a%2f%2fwww.desktx.com%2fd%2ffile%2fwallpaper%2fscenery%2f2</span></span></span><br><span class="line"><span class="string"><span class="tag">0180626%2f4c8157d07c14a30fd76f9bc110b1314e.jpg&amp;ehk=9tpmnrrRNi0eBGq3CnhwvuU8PPmKuy1Yma0zL%2b</span></span></span><br><span class="line"><span class="string"><span class="tag">a14T0%3d&amp;risl=&amp;pid=ImgRaw&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>这里src属性的值就是网络中的绝对路径。 </p>
<ul>
<li><p>相对路径：相对位置关系 </p>
<p>找页面和其他资源的相对路径。 </p>
<p>.&#x2F; 表示当前路径 </p>
<p>..&#x2F; 表示上一级路径 </p>
<p>..&#x2F;..&#x2F; 表示上两级路径</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;img src=&quot;a.jpg&quot; width=&quot;200&quot; height=&quot;350&quot;&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;a.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;35%&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;b.mp3&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;c.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h2><p>当我们点击超链接时会跳转到其他的页面或者资源。而超链接使用的是 a 标签。 </p>
<table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;a&gt;</td>
<td>定义超链接，用于链接到另一个资源</td>
</tr>
</tbody></table>
<p>a 标签属性： </p>
<ul>
<li>href：指定访问资源的URL </li>
<li>target：指定打开资源的方式 <ul>
<li>_self：默认值，在当前页面打开 </li>
<li>_blank：在空白页面打开</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://godx06.github.io/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://godx06.github.io/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;ol&gt;</td>
<td>定义有序列表</td>
</tr>
<tr>
<td>&lt;ul&gt;</td>
<td>定义无序列表</td>
</tr>
<tr>
<td>&lt;li&gt;</td>
<td>定义列表项</td>
</tr>
</tbody></table>
<p>有序列表中的 type 属性用来指定标记的标号的类型（数字、字母、罗马数字等） </p>
<p>无序列表中的 type 属性用来指定标记的形状 ，不建议使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;A&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;table&gt;</td>
<td>定义表格</td>
</tr>
<tr>
<td>&lt;tr&gt;</td>
<td>定义行</td>
</tr>
<tr>
<td>&lt;td&gt;</td>
<td>定义单元格</td>
</tr>
<tr>
<td>&lt;th&gt;</td>
<td>定义表头单元格</td>
</tr>
</tbody></table>
<p>table ：定义表格 </p>
<ul>
<li>border：规定表格边框的宽度 </li>
<li>width ：规定表格的宽度 </li>
<li>cellspacing：规定单元格之间的空白</li>
</ul>
<p>tr ：定义行 </p>
<ul>
<li>align：定义表格行的内容对齐方式</li>
</ul>
<p>td ：定义单元格 </p>
<ul>
<li>rowspan:规定单元格可横跨的行数 </li>
<li>colspan:规定单元格可横跨的列数</li>
</ul>
<p>th：定义表头单元格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;a.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;a.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>序号+内容<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;a.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;a.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;a.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;div&gt;</td>
<td>定义HTML文档中的一个区域部分，经常与CSS一起使用，用来布局网页</td>
</tr>
<tr>
<td>&lt;span&gt;</td>
<td>用来组合行内元素</td>
</tr>
</tbody></table>
<p>两个标签，一般都是和css结合到一块使用来实现页面的布局 。</p>
<p>div 标签 在浏览器上会有换行的效果，而 span 标签在浏览器上没有换行效果。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我是div</span><br><span class="line">我是div</span><br><span class="line">我是span 我是span</span><br></pre></td></tr></table></figure>

<h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><p>登录页面、注册页面等都是表单。 </p>
<p><strong>表单</strong>：在网页中主要负责数据采集功能，使用标签定义表单 </p>
<p>**表单项(元素)**：不同类型的 input 元素、下拉列表、文本域等</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;form&gt;</td>
<td>定义表单</td>
</tr>
<tr>
<td>&lt;input&gt;</td>
<td>定义表单项，通过type属性控制输入形式</td>
</tr>
<tr>
<td>&lt;label&gt;</td>
<td>为表单项定义标注</td>
</tr>
<tr>
<td>&lt;select&gt;</td>
<td>定义下拉列表</td>
</tr>
<tr>
<td>&lt;option&gt;</td>
<td>定义下拉列表的列表项</td>
</tr>
<tr>
<td>&lt;textarea&gt;</td>
<td>定义文本域</td>
</tr>
</tbody></table>
<p>form 是表单标签，它在页面上没有任何展示的效果。需要借助于表单项标签来展示不同的效果。</p>
<p><strong>form标签属性</strong></p>
<ul>
<li><p>action：规定当提交表单时向何处发送表单数据，该属性值就是URL </p>
<p>以后会将数据提交到服务端，该属性需要书写服务端的URL。我们可以书写 # ，表示提交到当前页面来看效果。 </p>
</li>
<li><p>method ：规定用于发送表单数据的方式 </p>
<p>method取值有如下两种： </p>
<ul>
<li>get：默认值。如果不设置method属性则默认就是该值 <ul>
<li>请求参数会拼接在URL后边 </li>
<li>url的长度有限制 4KB</li>
</ul>
</li>
<li>post： <ul>
<li>浏览器会将数据放到http请求消息体中 </li>
<li>请求参数无限制的</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>要想提交数据， input 输入框必须设置 name 属性。 </p>
<p>我们可以看到在浏览器的地址栏的URL后拼接了我们提交的数据。 username 就是输入框 name 属性值。</p>
<p>method 属性，默认是 method &#x3D; ‘get’ ，所以该取值就会将数据拼接到URL的后面。将 method 属性值设置为 post ，可以看出数据并没有拼接到 URL 后。</p>
<p><strong>查看提交的数据</strong> ：在浏览器中右键，点击检查，再点击Network。重新提交数据后，可以再Name下看到<code>/07.html?_ijt=prdgt30tdr75hrgi6sop90fpqd </code>这样类似的，点击，然后我们可以再Playload中的Form Data下看到<code>username: 12346</code>。</p>
<p>我所用的是谷歌浏览器。</p>
<p> <strong>表单项标签</strong></p>
<p>表单项标签有很多，不同的表单项标签有不同的展示效果。表单项标签可以分为以下三个： </p>
<p>**&lt;input&gt;**：表单项，通过type属性控制输入形式 </p>
<p>input 标签有个 type 属性。 type 属性的取值不同，展示的效果也不一样</p>
<table>
<thead>
<tr>
<th>type取值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td>默认值，定义单行的输入字段</td>
</tr>
<tr>
<td>password</td>
<td>定义密码字段</td>
</tr>
<tr>
<td>radio</td>
<td>定义单选按钮</td>
</tr>
<tr>
<td>checkbox</td>
<td>定义复选框</td>
</tr>
<tr>
<td>file</td>
<td>定义文件上传按钮</td>
</tr>
<tr>
<td>hidden</td>
<td>定义隐藏的输入字段</td>
</tr>
<tr>
<td>submit</td>
<td>定义提交按钮，提交按钮会把表单数据发送到服务器</td>
</tr>
<tr>
<td>reset</td>
<td>定义重置按钮，重置按钮会清除表单中的所有数据</td>
</tr>
<tr>
<td>button</td>
<td>定义可点击按钮</td>
</tr>
</tbody></table>
<p>**&lt;select&gt;**：定义下拉列表，&lt;option&gt; 定义列表项 </p>
<p>**&lt;textarea&gt;**：文本域 </p>
<p>它可以输入多行文本，而 input 数据框只能输入一行文本。 </p>
<p><strong>注意：</strong> </p>
<ul>
<li>以上标签项的内容要想提交，必须得定义 name 属性。 </li>
<li>每一个标签都有id属性，id属性值是唯一的标识。 </li>
<li>单选框、复选框、下拉列表需要使用 value 属性指定提交的值。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        性别：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span> 旅游</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span> 电影</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span> 看书</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        头像：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        城市：</span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        个人描述：</span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">name</span>=<span class="string">&quot;desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript学习</title>
    <url>/2023/01/21/JavaScript%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>JavaScript 是一门跨平台、面向对象的脚本语言，而Java语言也是跨平台的、面向对象的语言，只不过Java是编译语言，是需要编译成字节码文件才能运行的；JavaScript是脚本语言，不需要编译，由浏览器直接解析并执行。 JavaScript 是用来控制网页行为的，它能使网页可交互。</p>
<p>JavaScript(简称:JS)在1995年由Brendan Eich 发明，并于1997年成为一部ECMA 标准。</p>
<p>ECMAScript 6(ES6)是最新的JavaScript 版本（发布于2015年)。</p>
<h2 id="JavaScript引入方式"><a href="#JavaScript引入方式" class="headerlink" title="JavaScript引入方式"></a>JavaScript引入方式</h2><p>JavaScript 引入方式就是 HTML 和 JavaScript 的结合方式。JavaScript引入方式有两种：</p>
<ul>
<li>内部脚本：将 JS代码定义在HTML页面中 </li>
<li>外部脚本：将 JS代码定义在外部 JS文件中，然后引入到 HTML页面中</li>
</ul>
<p><strong>内部脚本</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--内部脚本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;Hello JavaScript!&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一般把脚本置于 元素的底部，可改善显示速度 。</p>
<p>因为浏览器在加载页面的时候会从上往下进行加载并解析。 我们应该让用户看到页面内容，然后再展示动态的效果。</p>
<p><strong>外部脚本</strong>：</p>
<p>首先定义外部 js 文件。</p>
<p>demo.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;Hello JavaScript!!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>然后在页面中引入外部的js文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--内部脚本--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;script&gt;</span></span><br><span class="line"><span class="comment">        alert(&quot;Hello JavaScript!&quot;)</span></span><br><span class="line"><span class="comment">    &lt;/script&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--外部脚本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ul>
<li><p>外部脚本不能包含 &lt;script&gt; 标签 </p>
<p>在js文件中直接写 js 代码即可，不要在 js文件 中写 script 标签 </p>
</li>
<li><p>&lt;script&gt; 标签不能自闭合 </p>
<p>在页面中引入外部js文件时，不能写成 &lt;script src&#x3D;”..&#x2F;js&#x2F;demo.js” &#x2F;&gt;。</p>
</li>
</ul>
<h2 id="JavaScript基础语法"><a href="#JavaScript基础语法" class="headerlink" title="JavaScript基础语法"></a>JavaScript基础语法</h2><h3 id="书写语法"><a href="#书写语法" class="headerlink" title="书写语法"></a>书写语法</h3><ul>
<li><p>区分大小写：与 Java 一样，变量名、函数名以及其他一切东西都是区分大小写的 </p>
</li>
<li><p>每行结尾的分号可有可无 </p>
<p>如果一行上写多个语句时，必须加分号用来区分多个语句。 </p>
</li>
<li><p>注释 </p>
<p>单行注释：&#x2F;&#x2F; 注释内容 </p>
<p>多行注释：&#x2F;* 注释内容 *&#x2F; </p>
<p>注意：JavaScript 没有文档注释 </p>
</li>
<li><p>大括号表示代码块 </p>
<p>和 java 一样 大括号表示代码块。</p>
</li>
</ul>
<h3 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h3><ul>
<li><p>使用window.alert() 写入警告框</p>
<p>window.可以省略</p>
</li>
<li><p>使用document.write() 写入HTML输出</p>
</li>
<li><p>使用console.log() 写入浏览器控制台</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;Hello JS!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;Hello JS!!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello JS!!!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在谷歌浏览器右键选择检查，再点击Console可打开浏览器控制台。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>JavaScript 中用 var 关键字（variable 的缩写）来声明变量。</p>
<p>格式 <code>var 变量名 = 数据值;</code> 。</p>
<p>JavaScript 是一门弱类型语言，变量可以存放不同类型的值；</p>
<p>如在定义变量时赋值为数字数据，还可以将变量的值改为字符串类型的数据。</p>
<p>js 中的变量名命名也有如下规则，和java语言基本都相同 </p>
<ul>
<li>组成字符可以是任何字母、数字、下划线（_）或美元符号（$） </li>
<li>数字不能开头 </li>
<li>建议使用驼峰命名</li>
</ul>
<p>JavaScript 中 var 关键字有点特殊，有以下地方和其他语言不一样 。</p>
<ul>
<li><p>作用域：全局变量，在代码块中定义的变量，在代码块外边还可以使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    str = &quot;Hello JS!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">window.alert(str);</span><br></pre></td></tr></table></figure>
</li>
<li><p>变量可以重复定义，JavaScript 会用后面赋的值将之前变量的 值替换掉。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    str = &quot;Hello JS!&quot;;</span><br><span class="line">    str = &quot;Hello&quot;;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">window.alert(str);   //打印的结果是Hello</span><br></pre></td></tr></table></figure></li>
</ul>
<p>ECMAScript 6 新增了 <strong>let 关键字</strong>来定义变量。它的用法类似于 var ，但是所声明的变量，<strong>只在 let 关键字所在的代码块内有效</strong>，<strong>且不允许重复声明</strong>。</p>
<p>ECMAScript 6 新增了 <strong>const关键字</strong>，用来声明一个<strong>只读的常量</strong>。一旦声明，常量的值就<strong>不能改变</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">const s = &quot;Hello&quot;;</span><br><span class="line">// s = &quot;hello&quot;;</span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>JavaScript 中提供了两类数据类型：原始类型 和 引用类型。 </p>
<p>5种原始类型:</p>
<ul>
<li>number:数字（整数、小数、 NaN(Not a Number))</li>
<li>string:字符、字符串，单双引皆可</li>
<li>boolean:布尔。true，false</li>
<li>null:对象为空</li>
<li>undefined:当声明的变量未初始化时，该变量的默认值是undefined</li>
</ul>
<p>使用 typeof 运算符可以获取数据类型。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">window.alert(typeof(str));</span><br></pre></td></tr></table></figure>

<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>JavaScript 提供了如下的运算符。大部分和 Java语言都是一样的，不同的是 JS 关系运算符中的 &#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 。</p>
<ul>
<li>一元运算符：++，– </li>
<li>算术运算符：+，-，*，&#x2F;，% </li>
<li>赋值运算符：&#x3D;，+&#x3D;，-&#x3D;… </li>
<li>关系运算符：&gt;，&lt;，&gt;&#x3D;，&lt;&#x3D;，!&#x3D;，&#x3D;&#x3D;，&#x3D;&#x3D;&#x3D;… </li>
<li>逻辑运算符：&amp;&amp;，||，! </li>
<li>三元运算符：条件表达式 ? true_value : false_value</li>
</ul>
<h4 id="x3D-x3D-和-x3D-x3D-x3D-区别"><a href="#x3D-x3D-和-x3D-x3D-x3D-区别" class="headerlink" title="&#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;区别"></a>&#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;区别</h4><p>&#x3D;&#x3D;： </p>
<ol>
<li>判断类型是否一样，如果不一样，则进行类型转换 </li>
<li>再去比较其值</li>
</ol>
<p>&#x3D;&#x3D;&#x3D;：js 中的全等于 </p>
<ol>
<li>判断类型是否一样，如果不一样，直接返回false </li>
<li>再去比较其值</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var num1=&quot;20&quot;;</span><br><span class="line">var num2=20;</span><br><span class="line"></span><br><span class="line">alert(num1 == num2);  //true</span><br><span class="line">alert(num1 === num2);  //false</span><br></pre></td></tr></table></figure>

<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>其他类型转为number </p>
<ul>
<li><p>string 转换为 number 类型：按照字符串的字面值，转为数字。如果字面值<strong>不是数字，则转为NaN</strong> </p>
<p>将 string 转换为 number 有两种方式：</p>
<ul>
<li><p>使用 + 正好运算符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var num1=+&quot;20&quot;;</span><br><span class="line">    </span><br><span class="line">alert(num1+1);  // 21</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用parseInt()函数（方法）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var num1=&quot;20&quot;;</span><br><span class="line">    </span><br><span class="line">alert(parseInt(num1)+1);  // 21</span><br></pre></td></tr></table></figure></li>
</ul>
<p>建议使用 parseInt() 函数进行转换。 </p>
</li>
<li><p>boolean 转换为 number 类型：true 转为1，false转为0</p>
</li>
</ul>
<p>其他类型转为boolean </p>
<ul>
<li>number 类型转换为 boolean 类型：0和NaN转为false，其他的数字转为true </li>
<li>string 类型转换为 boolean 类型：空字符串转为false，其他的字符串转为true </li>
<li>null类型转换为 boolean 类型是 false </li>
<li>undefined 转换为 boolean 类型是 false</li>
</ul>
<h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><p>JavaScript 中提供了和 Java 一样的流程控制语句，如下 </p>
<ul>
<li>if </li>
<li>switch </li>
<li>for </li>
<li>while </li>
<li>do … while</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> j = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;j == 0&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;j != 0&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">switch</span> (i) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="number">0</span>:</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;swotch:i == 0&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="number">1</span>:</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;switch:i == 1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;switch:i != 0 &amp;&amp; i != 1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">while</span> (j &lt; <span class="number">5</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        j++;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;j=&quot;</span>+j);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">do</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        j--;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;j = &quot;</span>+j);</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">while</span> (j &gt; <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数（就是Java中的方法）是被设计为执行特定任务的代码块；JavaScript 函数通过 function 关键词进行定义。 </p>
<p>函数定义格式有两种：</p>
<ul>
<li><p>方式一</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function 函数名(参数1,参数2..)&#123;</span><br><span class="line">	要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式二</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var 函数名 = function (参数列表)&#123;</span><br><span class="line">	要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>形式参数不需要类型。因为JavaScript是弱类型语言 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function add(a, b)&#123;</span><br><span class="line">	return a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述函数的参数 a 和 b 不需要定义数据类型，因为在每个参数前加上 var 也没有任何意义。 </p>
<p>返回值也不需要定义类型，可以在函数内部直接使用return返回即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> a+b;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> add2 = <span class="keyword">function</span> (<span class="params">a,b</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> a+b;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> res = <span class="title function_">add</span>(<span class="number">11</span>,<span class="number">12</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> res2 = <span class="title function_">add2</span>(<span class="number">10</span>,<span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(res+<span class="string">&quot; &quot;</span>+res2);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> </p>
<p>JS中，函数调用可以传递任意个数参数 </p>
<p>例如 <code>let result = add(1,2,3);</code> </p>
<p>它是将数据 1 传递给了变量a，将数据 2 传递给了变量 b，而数据 3 没有变量接收.</p>
<h2 id="JavaScript常用对象"><a href="#JavaScript常用对象" class="headerlink" title="JavaScript常用对象"></a>JavaScript常用对象</h2><h3 id="基本对象"><a href="#基本对象" class="headerlink" title="基本对象"></a>基本对象</h3><h4 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h4><p>JavaScript Array对象用于定义数组 。</p>
<h5 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h5><ul>
<li><p>方式一</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var 变量名 = new Array(元素列表);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式二</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var 变量名 = [元素列表];</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">arr[索引] = 值;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//方式一</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//方式二</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> arr2 = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(arr1[<span class="number">0</span>]+<span class="string">&quot; &quot;</span>+arr2[<span class="number">4</span>]);  <span class="comment">//1 1</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>JavaScript 中的数组相当于 Java 中集合。数组的长度是可以变化的，而 JavaScript 是弱类型，所以可以存储任意的类型的数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr3 = [1,2,3];</span><br><span class="line">arr3[10] = 10;</span><br><span class="line">alert(arr3[10]); // 10</span><br><span class="line">alert(arr3[9]); //undefined</span><br><span class="line"></span><br><span class="line">arr3[5] = &quot;hello&quot;;</span><br><span class="line">alert(arr3[5]); // hello</span><br><span class="line"></span><br><span class="line">for (let i = 0;i &lt; 11;i++) &#123;</span><br><span class="line">    alert(arr3[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p>我们只讲解 length 属性，该数组可以动态的获取数组的长度。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    alert(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>push函数：给数组添加元素，也就是在数组的末尾添加元素 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span></span><br><span class="line"><span class="language-javascript">    arr.<span class="title function_">push</span>(<span class="number">4</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(arr);  <span class="comment">//1,2,3,4</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>splice函数:删除元素</p>
<p>参数1：索引，表示从哪个索引位置删除 </p>
<p>参数2：个数，表示删除几个元素 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span></span><br><span class="line"><span class="language-javascript">    arr.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">3</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(arr);  <span class="comment">//1,2,6</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h4><h5 id="定义格式-1"><a href="#定义格式-1" class="headerlink" title="定义格式"></a>定义格式</h5><ul>
<li><p>方式一</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var 变量名 = new String(s);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式二</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var 变量名 = &quot;数组&quot;;</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> str1 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> str2 = <span class="string">&quot;World&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(str1+<span class="string">&quot; &quot;</span>+str2);  <span class="comment">// Hello World</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h5><p>String对象提供了很多属性，下面列举了一个属性 length ，该属性是用于动态的获取字符串的长度 。</p>
<ul>
<li>length:字符串的长度</li>
</ul>
<h5 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h5><p>String对象提供了很多函数（方法），下面给大家列举了两个方法 </p>
<ul>
<li>charAt() : 返回在指定位置的字符</li>
<li>indexOf() : 检索字符串</li>
</ul>
<p>String对象还有一个函数 trim() ，该方法在文档中没有体现，但是所有的浏览器都支持；它是用来去掉字符串两端的空格。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> str = <span class="string">&quot;  Hello World!  &quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ch1 = str.<span class="title function_">charAt</span>(<span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ch2 = str.<span class="title function_">indexOf</span>(<span class="string">&quot;W&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> str2 = str.<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(ch1+<span class="string">&quot; &quot;</span>+ch2+<span class="string">&quot; &quot;</span>+str2);  <span class="comment">// H 8 Hello WOrld!</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h3><p>下面是自定义对象的格式： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var 对象名称 = &#123;</span><br><span class="line">    属性名称1:属性值1,</span><br><span class="line">    属性名称2:属性值2,</span><br><span class="line">    ...,</span><br><span class="line">    函数名称:function (形参列表)&#123;&#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>调用属性的格式： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">对象名.属性名</span><br></pre></td></tr></table></figure>

<p>调用函数的格式:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">对象名.函数名()</span><br></pre></td></tr></table></figure>

<p>代码演示 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&quot;XiaoMing&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        age : <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">        work : <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;XiaoMing is Working!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(person.<span class="property">name</span>);  <span class="comment">// XiaoMing</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(person.<span class="property">age</span>);  <span class="comment">// 18</span></span></span><br><span class="line"><span class="language-javascript">    person.<span class="title function_">work</span>();  <span class="comment">// XiaoMing is Working!</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>BOM：Browser Object Model 浏览器对象模型。也就是 JavaScript 将浏览器的各个组成部分封装为对象。</p>
<p>BOM 中包含了如下对象： </p>
<ul>
<li>Window：浏览器窗口对象 </li>
<li>Navigator：浏览器对象 </li>
<li>Screen：屏幕对象 </li>
<li>History：历史记录对象 </li>
<li>Location：地址栏对象</li>
</ul>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB6229b763ffe38cefea75d2115c9f706a?method=download&shareKey=fed9f09dd3ade16ace966c35b96171ec" alt="对应关系"></p>
<h3 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h3><p>window 对象是 JavaScript 对浏览器的窗口进行封装的对象。 </p>
<h4 id="获取window对象"><a href="#获取window对象" class="headerlink" title="获取window对象"></a>获取window对象</h4><p>该对象不需要创建直接使用 window ，其中 window. 可以省略。比如我们之前使用的 alert() 函数，其实就是 window 对象的函数。</p>
<ul>
<li><p>显示使用Window对象调用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">window.alert(&quot;xxx&quot;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>隐式调用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">alert(&quot;xxx&quot;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="window对象属性"><a href="#window对象属性" class="headerlink" title="window对象属性"></a>window对象属性</h4><p>window 对象提供了用于获取其他 BOM 组成对象的属性 </p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>history</td>
<td>对History 对象的只读引用。</td>
</tr>
<tr>
<td>location</td>
<td>用于窗口或框架的Location对象。</td>
</tr>
<tr>
<td>Navigator</td>
<td>对Navigator对象的只读引用。</td>
</tr>
<tr>
<td>Screen</td>
<td>对Screen 对象的只读引用。</td>
</tr>
</tbody></table>
<p>也就是说，我们想使用 Location 对象的话，就可以使用 window 对象获取；写成 window.location ，而 window. 可以 省略，简化写成 location 来获取 Location 对象。 </p>
<h4 id="window对象函数"><a href="#window对象函数" class="headerlink" title="window对象函数"></a>window对象函数</h4><p>window 对象提供了很多函数供我们使用，而很多都不常用；下面列举了一些比较常用的函数 。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>alert()</td>
<td>显示带有一段消息和一个确认按钮的警告框。</td>
</tr>
<tr>
<td>confirm()</td>
<td>显示带有一段消息以及确认按钮和取消按钮的对话框。</td>
</tr>
<tr>
<td>setInterval()</td>
<td>按照指定的周期(以毫秒计算)来调用函数或计算表达式。</td>
</tr>
<tr>
<td>setTimeout()</td>
<td>在指定的毫秒数后调用函数或计算表达式。</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> flag = <span class="title function_">confirm</span>(<span class="string">&quot;Are You OK?&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//当点击 确定 按钮， flag 变量值记录的就是 true,否则为 false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(flag);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;Hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,<span class="number">3000</span>);  <span class="comment">// 3秒后弹出</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;Hello2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,<span class="number">3000</span>);  <span class="comment">// 每隔3秒弹出</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="History对象"><a href="#History对象" class="headerlink" title="History对象"></a>History对象</h3><p>History 对象是 JavaScript 对历史记录进行封装的对象。</p>
<h4 id="History-对象的获取"><a href="#History-对象的获取" class="headerlink" title="History 对象的获取"></a>History 对象的获取</h4><ul>
<li>使用 window.history获取，其中window. 可以省略</li>
</ul>
<h4 id="History-对象的函数"><a href="#History-对象的函数" class="headerlink" title="History 对象的函数"></a>History 对象的函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>back()</td>
<td>加载history列表中的前一个URL</td>
</tr>
<tr>
<td>forword()</td>
<td>加载history列表中的下一个URL</td>
</tr>
</tbody></table>
<h3 id="Location对象"><a href="#Location对象" class="headerlink" title="Location对象"></a>Location对象</h3><p>Location 对象是 JavaScript 对地址栏封装的对象。可以通过操作该对象，跳转到任意页面。</p>
<h4 id="获取Location对象"><a href="#获取Location对象" class="headerlink" title="获取Location对象"></a>获取Location对象</h4><p>使用 window.location获取，其中window. 可以省略 </p>
<h4 id="Location对象属性"><a href="#Location对象属性" class="headerlink" title="Location对象属性"></a>Location对象属性</h4><p>location对象最常用的一个属性是 href</p>
<ul>
<li>href ：设置或返回完整的URL</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(location.<span class="property">href</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;跳转到百度&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    location.<span class="property">href</span> = <span class="string">&quot;https://www.baidu.com&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>DOM：Document Object Model 文档对象模型。也就是 JavaScript 将 HTML 文档的各个组成部分封装为对象。 </p>
<p>封装的对象分为 </p>
<ul>
<li>Document：整个文档对象 </li>
<li>Element：元素对象 </li>
<li>Attribute：属性对象 </li>
<li>Text：文本对象 </li>
<li>Comment：注释对象</li>
</ul>
<p>JavaScript 通过 DOM， 就能够对 HTML进行操作了</p>
<ul>
<li>改变 HTML 元素的内容 </li>
<li>改变 HTML 元素的样式（CSS） </li>
<li>对 HTML DOM 事件作出反应 </li>
<li>添加和删除 HTML 元素</li>
</ul>
<h3 id="获取-Element对象"><a href="#获取-Element对象" class="headerlink" title="获取 Element对象"></a>获取 Element对象</h3><p>HTML 中的 Element 对象可以通过 Document 对象获取，而 Document 对象是通过 window 对象获取。 </p>
<p>Document 对象中提供了以下获取 Element 元素对象的函数 </p>
<ul>
<li>getElementById() ：根据id属性值获取，返回单个Element对象 </li>
<li>getElementsByTagName() ：根据标签名称获取，返回Element对象数组 </li>
<li>getElementsByName() ：根据name属性值获取，返回Element对象数组 </li>
<li>getElementsByClassName() ：根据class属性值获取，返回Element对象数组</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;a.jpg&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>Hello World 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>Hello World 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 电影</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 旅游</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 游戏</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 根据 id 属性值获取上面的 img 元素对象，返回单个对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;image&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(img);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 根据标签名称获取所有的 div 元素对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>);  <span class="comment">// 返回一个数组，数组中存储的是 div 元素对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(divs.<span class="property">length</span>);  <span class="comment">// 2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 遍历数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; divs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(divs[i]);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取所有的满足 name = &#x27;hobby&#x27; 条件的元素对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> hobbys = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;hobby&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(hobbys[i]);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  获取所有的满足 class=&#x27;cls&#x27; 条件的元素对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> clss = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;cls&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; clss.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(clss[i]);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML-Element对象使用"><a href="#HTML-Element对象使用" class="headerlink" title="HTML Element对象使用"></a>HTML Element对象使用</h3><p>HTML 中的 Element 元素对象有很多，以后可以根据具体的需求查阅文档使用。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;light&quot;</span> <span class="attr">src</span>=<span class="string">&quot;off.gif&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>Hello World 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>Hello World 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 电影</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 旅游</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 游戏</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点亮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1，根据 id=&#x27;light&#x27; 获取 img 元素对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;light&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2，修改 img 对象的 src 属性来改变图片</span></span></span><br><span class="line"><span class="language-javascript">    img.<span class="property">src</span> = <span class="string">&quot;on.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将所有的 div 标签的标签体内容替换为 Hello</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        style:设置元素css样式</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        innerHTML：设置元素内容</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; divs.<span class="property">length</span>;i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        divs[i].<span class="property">innerHTML</span> = <span class="string">&quot;Hello&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        divs[i].<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使所有的复选框呈现被选中的状态</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1，获取所有的 复选框 元素对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> hobbys = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;hobby&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2，遍历数组，通过将 复选框 元素对象的 checked 属性值设置为 true 来改变复选框的选中状态</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        hobbys[i].<span class="property">checked</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p>HTML 事件是发生在 HTML 元素上的“事情”。比如：页面上的 按钮被点击 、 鼠标移动到元素之上 、 按下键盘按键 等都是事件。 </p>
<p>事件监听是JavaScript 可以在事件被侦测到时执行一段逻辑代码。</p>
<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>JavaScript 提供了两种事件绑定方式： </p>
<ul>
<li>方式一：通过 HTML标签中的事件属性进行绑定 </li>
<li>方式二：通过 DOM 元素属性绑定</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;light&quot;</span> <span class="attr">src</span>=<span class="string">&quot;off.gif&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式1：在下面input标签上添加 onclick 属性，并绑定 on() 函数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开关&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;on()&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开关&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> flag = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">on</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> light = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;light&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;第一种&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (flag === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                light.<span class="property">src</span> = <span class="string">&quot;on.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                flag = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                light.<span class="property">src</span> = <span class="string">&quot;off.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                flag = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//方式2：获取 id=&quot;btn&quot; 元素对象，通过调用 onclick 属性 绑定点击事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> light = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;light&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;第二种&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (flag === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                light.<span class="property">src</span> = <span class="string">&quot;on.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                flag = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                light.<span class="property">src</span> = <span class="string">&quot;off.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                flag = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h3><table>
<thead>
<tr>
<th>事件属性名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>onclick</td>
<td>鼠标单击事件</td>
</tr>
<tr>
<td>onblur</td>
<td>元素失去焦点</td>
</tr>
<tr>
<td>onfocus</td>
<td>元素获得焦点</td>
</tr>
<tr>
<td>onload</td>
<td>某个页面或图像被完成加载</td>
</tr>
<tr>
<td>onsubmit</td>
<td>当表单提交时触发该事件</td>
</tr>
<tr>
<td>onmouseover</td>
<td>鼠标被移到某元素之上</td>
</tr>
<tr>
<td>onmouseout</td>
<td>鼠标从某元素移开</td>
</tr>
</tbody></table>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;light&quot;</span> <span class="attr">src</span>=<span class="string">&quot;off.gif&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;on()&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;oo()&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;ot()&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span> = <span class="string">&quot;input&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;ob()&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;of()&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> flag = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> light = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;light&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">on</span>(<span class="params"></span>) &#123;  <span class="comment">// 鼠标单击事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (flag === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                light.<span class="property">src</span> = <span class="string">&quot;on.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                flag = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                light.<span class="property">src</span> = <span class="string">&quot;off.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                flag = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">ob</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;onblur&quot;</span>);  <span class="comment">// 失去焦点</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">of</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            input.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;red&#x27;</span>;  <span class="comment">// 获得焦点,背景变为红色</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">oo</span>(<span class="params"></span>) &#123;  <span class="comment">// 鼠标被移到某元素之上</span></span></span><br><span class="line"><span class="language-javascript">            light.<span class="property">src</span> = <span class="string">&quot;on.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            flag = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">ot</span>(<span class="params"></span>) &#123;  <span class="comment">// 鼠标从某元素移开</span></span></span><br><span class="line"><span class="language-javascript">            light.<span class="property">src</span> = <span class="string">&quot;off.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            flag = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h2><p>RegExp 是正则对象。正则对象是判断指定字符串是否符合规则。 </p>
<h3 id="正则对象使用"><a href="#正则对象使用" class="headerlink" title="正则对象使用"></a>正则对象使用</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>正则对象有两种创建方式： </p>
<ul>
<li><p>直接量方式：注意不要加引号 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var reg = /正则表达式/;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 RegExp 对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var reg = new RegExp(&quot;正则表达式&quot;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="函数-2"><a href="#函数-2" class="headerlink" title="函数"></a>函数</h4><p>test(str) ：判断指定字符串是否符合规则，返回 true或 false </p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>正则表达式常用的规则如下： </p>
<ul>
<li>^：表示开始 </li>
<li>$：表示结束 </li>
<li>[ ]：代表某个范围内的单个字符，比如： [0-9] 单个数字字符 </li>
<li>.：代表任意单个字符，除了换行和行结束符 </li>
<li>\w：代表单词字符：字母、数字、下划线()，相当于 [A-Za-z0-9] </li>
<li>\d：代表数字字符： 相当于 [0-9]</li>
</ul>
<p>量词： </p>
<ul>
<li>+：至少一个 </li>
<li>*：零个或多个 </li>
<li>？：零个或一个 </li>
<li>{x}：x个 </li>
<li>{m,}：至少m个 </li>
<li>{m,n}：至少m个，最多n个</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//1,创建正则对象，对正则表达式进行封装</span></span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^\w&#123;6,12&#125;$/</span>;</span><br><span class="line">    <span class="comment">//var reg = new RegExp(&quot;^\\w&#123;6,12&#125;$&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2,判断 str 字符串是否符合 reg 封装的正则表达式的规则</span></span><br><span class="line">    <span class="keyword">var</span> flag = reg.<span class="title function_">test</span>(str);</span><br><span class="line">    <span class="title function_">alert</span>(flag);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC学习</title>
    <url>/2023/01/06/JDBC%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>JDBC的学习过程中的一些记录</p>
<h2 id="JDBC-简介"><a href="#JDBC-简介" class="headerlink" title="JDBC 简介"></a>JDBC 简介</h2><h3 id="JDBC-概念"><a href="#JDBC-概念" class="headerlink" title="JDBC 概念"></a>JDBC 概念</h3><ul>
<li>JDBC 就是使用Java语言操作关系型数据库的一套API</li>
<li>全称：( Java Database Connectivity ) Java 数据库连接</li>
</ul>
<h3 id="JDBC-本质"><a href="#JDBC-本质" class="headerlink" title="JDBC 本质"></a>JDBC 本质</h3><ul>
<li>官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口</li>
<li>各个数据库厂商去实现这套接口，提供数据库驱动jar包</li>
<li>我们可以使用这套接口（JDBC）编程，真正执行的代码是jar包中的实现类</li>
</ul>
<h3 id="JDBC好处"><a href="#JDBC好处" class="headerlink" title="JDBC好处"></a>JDBC好处</h3><ul>
<li>各数据库厂商使用相同的接口，Java代码不需要针对不同数据库分别开发</li>
<li>可随时替换底层数据库，访问数据库的Java代码基本不变</li>
</ul>
<h2 id="JDBC-快速入门"><a href="#JDBC-快速入门" class="headerlink" title="JDBC 快速入门"></a>JDBC 快速入门</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>0.创建工程,导入驱动jar包</p>
<blockquote>
<p>mysql-connector-java-5.1.48.jar</p>
</blockquote>
<p>1．注册驱动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver);</span></span><br></pre></td></tr></table></figure>

<p>2获取连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url,username, password);</span><br></pre></td></tr></table></figure>

<p>3．定义SQL语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span><span class="string">&quot;update...&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>4.获取执行SQL对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br></pre></td></tr></table></figure>

<p>5．执行SQL</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stmt.executeUpdate(sql);</span><br></pre></td></tr></table></figure>

<p>6．处理返回结果</p>
<p>7．释放资源</p>
<h3 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h3><ol>
<li>创建一个Empty Project命名为jdbc：New Project -&gt; Empty Project</li>
<li>新建一个Module命名为jdbc-demo：File -&gt; New -&gt; Module… -&gt;New Module</li>
<li>在jdbc-demo下新建一个Directory命名为lib，将mysql-connector-java-5.1.48.jar文件复制进去，右键该文件，Add as Library，Levels选择生效的范围：<strong>Global Library全局有效，Project Library当前工程有效，Module Library当前模块有效</strong>，选择Module Library就行。</li>
<li>在src下新建类：右键，New-&gt;Java Class-&gt;输入com.it.jdbc.JDBCDemo</li>
<li>在JDBCDemo.java中编写代码。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.it.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取连接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/xlr&quot;</span>;  <span class="comment">// 数据库名称为xlr</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;031006&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, userName, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 定义sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update temp_test set counter = 123456 where id = 1&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 获取执行sql的对象 Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 执行sql</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 处理结果</span></span><br><span class="line">        System.out.println(cnt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7. 释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="JDBC-API详解"><a href="#JDBC-API详解" class="headerlink" title="JDBC API详解"></a>JDBC API详解</h2><h3 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h3><p>DriverManager(驱动管理类)作用：</p>
<ul>
<li><p>注册驱动</p>
<p>MySQL 5之后的驱动包，可以省略注册驱动的步骤 </p>
</li>
<li><p>获取数据库连接</p>
<p>语法：jdbc:mysql:&#x2F;&#x2F;ip地址(域名):端口号&#x2F;数据库名称?参 数键值对1&amp;参数键值对2… </p>
<p>示例：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;xlr?useSSL&#x3D;false</p>
<p>如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:&#x2F;&#x2F;&#x2F;数据库名称?参数键值对</p>
</li>
</ul>
<h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><p>Connection(数据库连接对象)作用：</p>
<ul>
<li><p>获取执行SQL的对象</p>
<ul>
<li><p>普通执行SQL对象 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement <span class="title function_">createStatement</span><span class="params">()</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>预编译SQL的执行SQL对象：防止SQL注入 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PreparedStatement <span class="title function_">prepareStatement</span><span class="params">(sql)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行存储过程的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CallableStatement <span class="title function_">prepareCall</span><span class="params">(sql)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>管理事务</p>
<ul>
<li><p>关键代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo_Connection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取连接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/xlr?useSSL=false&quot;</span>;  <span class="comment">// 数据库名称为xlr</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;031006&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, userName, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 定义sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update temp_test set counter = 555 where id = 1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update temp_test set counter = 555 where id = 2&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 获取执行sql的对象 Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//5. 执行sql</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> statement.executeUpdate(sql1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//6. 处理结果</span></span><br><span class="line">            System.out.println(cnt);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//int t = 3 / 0;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//5. 执行sql</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">cnt2</span> <span class="operator">=</span> statement.executeUpdate(sql2);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//6. 处理结果</span></span><br><span class="line">            System.out.println(cnt2);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            connection.rollback();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7. 释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><blockquote>
<p>DDL(Data Definition Language)主要内容：对数据库&#x2F;表创建、修改、删除操作</p>
<p>DML(Data Manipulation Language)主要内容：对数据表中的值进行插入、修改、删除操作</p>
<p>DQL(Data Query Language)主要内容：通过查询语句实现对特定数据的筛选</p>
</blockquote>
<p>Statement的作用：执行SQL语句</p>
<ul>
<li><p>executeUpdate(sql) -&gt;int :执行DML、DDL语句</p>
<p>返回值：（1）DML语句影响的行数（2）DDL语句执行后，执行成功也可能返回0</p>
</li>
<li><p>executeQuery(sql) -&gt;ResultSet :执行DQL语句</p>
<p>返回值：ResultSet结果集</p>
</li>
</ul>
<h3 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h3><p>ResultSet(结果集对象)作用：封装了DQL查询语句的结果</p>
<p>boolean next() </p>
<ul>
<li>将光标从当前位置向前移动一行 </li>
<li>判断当前行是否为有效行</li>
</ul>
<p>方法返回值说明： </p>
<ul>
<li>true ： 有效行，当前行有数据 </li>
<li>false ： 无效行，当前行没有数据</li>
</ul>
<p>xxx getXxx(参数)：获取数据 </p>
<p>xxx : 数据类型；如： int getInt(参数) ；String getString(参数) </p>
<p>参数 </p>
<ul>
<li>int类型的参数：列的编号，从1开始 </li>
<li>String类型的参数： 列的名称</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3. 定义sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from temp_test&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 获取执行sql的对象 Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 执行sql</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 处理结果</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            <span class="comment">//获取数据，getXxx</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> resultSet.getInt(<span class="number">2</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> resultSet.getString(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(id);</span><br><span class="line">            System.out.println(counter);</span><br><span class="line">            System.out.println(text);</span><br><span class="line">            System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		resultSet.close();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="comment">//3. 定义sql</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from temp_test&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//4. 获取执行sql的对象 Statement</span></span><br><span class="line">      <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//5. 执行sql</span></span><br><span class="line">      <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//6. 处理结果</span></span><br><span class="line">      <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">          <span class="comment">//获取数据，getXxx</span></span><br><span class="line">          <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">          <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;counter&quot;</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;text&quot;</span>);</span><br><span class="line"></span><br><span class="line">          System.out.println(id);</span><br><span class="line">          System.out.println(counter);</span><br><span class="line">          System.out.println(text);</span><br><span class="line">          System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">resultSet.close();</span><br></pre></td></tr></table></figure>

<h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><p>SQL注入：</p>
<blockquote>
<p>SQL注入是通过操作输入来修改事先定义好的SQL语句，用以达 到执行代码对服务器进行攻击的方法。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">11111</span>;</span><br><span class="line">   <span class="comment">//3. 定义sql</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from temp_test where text = &#x27;&quot;</span>+text+<span class="string">&quot;&#x27; and counter = &#x27;&quot;</span>+counter+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//4. 获取执行sql的对象 Statement</span></span><br><span class="line">   <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//5. 执行sql</span></span><br><span class="line">   <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//6. 处理结果</span></span><br><span class="line">   <span class="keyword">if</span>(resultSet.next()) &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Failure&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//7. 释放资源</span></span><br><span class="line">   resultSet.close();</span><br><span class="line">   statement.close();</span><br><span class="line">   connection.close();</span><br></pre></td></tr></table></figure>

<p>这样以来，即使text与counter并不存在数据库中，查询结果也是Success。</p>
<p>PreparedStatement作用： </p>
<ul>
<li>预编译SQL语句并执行：预防SQL注入问题</li>
</ul>
<p>使用PreparedStatement改进 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">11111</span>;</span><br><span class="line">        <span class="comment">//3. 定义sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from temp_test where text = ? and counter = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 获取执行sql的对象 Statement</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置?的值</span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>,text);</span><br><span class="line">        preparedStatement.setInt(<span class="number">2</span>,counter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 执行sql</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();  <span class="comment">//不需要传入sql</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 处理结果</span></span><br><span class="line">        <span class="keyword">if</span>(resultSet.next()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Failure&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7. 释放资源</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br></pre></td></tr></table></figure>

<p>执行结果为Failure</p>
<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="数据库连接池简介"><a href="#数据库连接池简介" class="headerlink" title="数据库连接池简介"></a>数据库连接池简介</h3><p>数据库连接池是个容器，负责分配、管理数据库连接(Connection) </p>
<p>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个； </p>
<p>释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏 </p>
<p>好处 ：</p>
<ul>
<li>资源重用 </li>
<li>提升系统响应速度 </li>
<li>避免数据库连接遗漏</li>
</ul>
<p>之前我们使用连接是都创建一个Connection对象，使用完毕就将其销毁。这样重复创建销毁的过程是特别耗费性能以及消耗时间的。</p>
<p>而数据库使用了数据库连接池后，就能达到Connection对象的复 用。</p>
<blockquote>
<p>连接池是在一开始就创建好了一些连接（Connection）对象存储起来。用户需要连接数据库时，不需要自己创建连接，而只需要从连接池中获取一个连接进行使用，使用完毕后再将连接对象归还给连接池；这样就可以起到资源重用，也节省了频繁创建连接销毁连接所花费的时间，从而提升了系统响应的速度。</p>
</blockquote>
<h3 id="数据库连接池实现"><a href="#数据库连接池实现" class="headerlink" title="数据库连接池实现"></a>数据库连接池实现</h3><ul>
<li><p>标准接口：DataSource</p>
<ul>
<li><p>官方（SUN）提供的数据库连接池标准接口，由第三方组织实现此接口。</p>
</li>
<li><p>功能：获取链接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getConnection() -&gt; Connection</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>常见的数据库连接池：</p>
<ul>
<li>DBCP</li>
<li>C3P0</li>
<li>Druid</li>
</ul>
</li>
<li><p>Druid(德鲁伊)</p>
<ul>
<li>Druid连接池是阿里巴巴开源的数据库连接池项目</li>
<li>功能强大，性能优秀，是Java语言最好的数据库连接池之一</li>
</ul>
</li>
</ul>
<h3 id="Driud使用"><a href="#Driud使用" class="headerlink" title="Driud使用"></a>Driud使用</h3><p>Driud使用步骤：</p>
<ol>
<li><p>导入jar包druid-1.1.12.jar</p>
</li>
<li><p>定义配置文件</p>
<p>在src下新建文件druid.properties，其中代码：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///xlr?useSSL=false&amp;useServerPrepStmts=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">031006</span></span><br><span class="line"><span class="comment"># 初始化连接数量</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大等待时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>加载配置文件</p>
</li>
<li><p>获取数据库连接池对象</p>
</li>
<li><p>获取连接</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.导入jar包</span></span><br><span class="line">        <span class="comment">//2.定义配置文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 加载配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;untitled1/src/druid.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 获取连接池对象</span></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 获取数据库连接 Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line"></span><br><span class="line">        System.out.println(connection);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(System.getProperty(&quot;user.dir&quot;));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven基础</title>
    <url>/2023/01/07/Maven%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>Maven是专门用于管理和构建Java项目的工具。<br>它的主要功能有：</p>
<ul>
<li><p>提供了一套标准化的项目结构</p>
<p>所有IDE使用Maven构建的项目结构完全一样，因此Maven项目可以在不同的IDE中通用</p>
</li>
<li><p>提供了一套标准化的构建流程（编译，测试，打包，发布……）</p>
</li>
<li><p>提供了一套依赖管理机制</p>
<p>管理项目所依赖的第三方资源(jar包、插件…)</p>
</li>
</ul>
<h2 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h2><p>Apache Maven是一个项目管理和构建工具，它基于项目对象模型(POM)的概念，通过一小段描述信息来管理项目的构建、报告和文档</p>
<p>官网: <a href="https://maven.apache.org/">https://maven.apache.org</a></p>
<h3 id="Maven模型"><a href="#Maven模型" class="headerlink" title="Maven模型"></a>Maven模型</h3><p><img src="https://note.youdao.com/yws/api/personal/file/WEB8d3d820679f566bd960399e46785a316?method=download&shareKey=a39ebd8ec0a132c879426c7f11781d38" alt="1673063001054"></p>
<h3 id="仓库分类"><a href="#仓库分类" class="headerlink" title="仓库分类"></a>仓库分类</h3><p><strong>本地仓库</strong>:自己计算机上的一个目录</p>
<p><strong>中央仓库</strong>:由Maven团队维护的全球唯一的仓库</p>
<ul>
<li>地址: <a href="https://repo1.maven.org/maven2">https://repo1.maven.org/maven2</a></li>
</ul>
<p><strong>远程仓库(私服)</strong>:一般由公司团队搭建的私有仓库</p>
<p>当项目中使用坐标引入对应依赖jar包后，首先会查找本地仓库中是否有对应的jar包。<strong>如果有，则在项目直接引用；如果没有，则去中央仓库中下载对应的jar包到本地仓库。</strong></p>
<p>还可以搭建远程仓库,将来jar包的查找顺序则变为:</p>
<p>本地仓库→远程仓库→中央仓库</p>
<h2 id="Maven安装配置"><a href="#Maven安装配置" class="headerlink" title="Maven安装配置"></a>Maven安装配置</h2><ol>
<li><p>从官网下载 apache-maven-3.8.6-bin.zip(Windows是这个)，然后将其解压</p>
</li>
<li><p>配置环境变量:</p>
<p>将解压后的maven的bin的目录路径复制 ，添加到系统变量的Path下</p>
<p>在命令行输入mvn -version检查是否成功，正常情况如下：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Apache Maven <span class="number">3</span>.<span class="number">8</span>.<span class="number">6</span> (<span class="number">84538</span>c9988a25aec085021c365c560670ad80f63)</span><br><span class="line">Maven home: E:\SoftwareFile\maven_tools\apache-maven-<span class="number">3</span>.<span class="number">8</span>.<span class="number">6</span></span><br><span class="line">Java version: <span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_202, vendor: Oracle Corporation, runtime: E:\java\jdk\jdk1.<span class="number">8</span>.<span class="number">0</span>_202\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: &quot;windows <span class="number">10</span>&quot;, version: &quot;<span class="number">10</span>.<span class="number">0</span>&quot;, arch: &quot;amd64&quot;, family: &quot;windows&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置本地仓库:</p>
<p>修改conf&#x2F;settings.xml中的&lt; localRepository&gt;为一个指定目录</p>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>E:\\SoftwareFile\\maven_tools\\maven_repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置阿里云私服:</p>
<p>修改conf&#x2F;settings.xml中的&lt;mirrors&gt;标签，为其添加如下子标签:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Maven基本使用"><a href="#Maven基本使用" class="headerlink" title="Maven基本使用"></a>Maven基本使用</h2><h3 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h3><p>右键点击开始，打开Windows PowerShell，切换到项目的目录。</p>
<p>或者进入项目所在文件夹，在看得见pom.xml的文件夹里shift+右键，注意不要选中文件，打开PowerShell。</p>
<p>然后就可以通过输入mvn xxx来执行命令了。</p>
<ul>
<li><p>mvn compile：编译</p>
<p>执行该命令会在项目下生成一个target目录，编译后的字节码文件就会放在该目录下面。</p>
</li>
<li><p>mvn clean：清理</p>
<p>执行该命令会删除项目下的 target 目录 </p>
</li>
<li><p>mvn test：测试</p>
<p>执行该命令会所有的测试代码</p>
</li>
<li><p>mvn package：打包</p>
<p>执行该命令会将当前项目打包成一个jar包，并将其放在target目录下</p>
</li>
<li><p>mvn install：安装</p>
<p>执行该命令会将当前项目打成jar包，并安装到本地仓库。</p>
</li>
</ul>
<h3 id="Maven生命周期"><a href="#Maven生命周期" class="headerlink" title="Maven生命周期"></a>Maven生命周期</h3><p>Maven 对项目构建的生命周期划分为3套： </p>
<p>clean ：清理工作。 </p>
<p>default ：核心工作，例如编译，测试，打包，安装等。 </p>
<p>site ： 产生报告，发布站点等。这套声明周期一般不会使用。 </p>
<p>同一套生命周期内，执行后面的命令，前面的所有命令会自动执行。</p>
<p>例如：当我们执行 install （安装）命令时，它会先执行 compile 命令，再执行 test 命令，再执行 package 命令，最后执行install 命令。 </p>
<h2 id="IDEA配置Maven"><a href="#IDEA配置Maven" class="headerlink" title="IDEA配置Maven"></a>IDEA配置Maven</h2><h3 id="IDEA配置Maven环境"><a href="#IDEA配置Maven环境" class="headerlink" title="IDEA配置Maven环境"></a>IDEA配置Maven环境</h3><ol>
<li>点击File -&gt; Settings… -&gt; Build Tools -&gt; Maven</li>
<li>在Maven home path 选择maven的路径，如：E:&#x2F;SoftwareFile&#x2F;maven_tools&#x2F;apache-maven-3.8.6</li>
<li>在User settings file 将后面的Override勾上，选择配置文件路径，如：E:\SoftwareFile\maven_tools\apache-maven-3.8.6\conf\settings.xml</li>
<li>点击OK</li>
</ol>
<h3 id="Maven坐标详解"><a href="#Maven坐标详解" class="headerlink" title="Maven坐标详解"></a>Maven坐标详解</h3><p>什么是坐标？ </p>
<ul>
<li>Maven 中的坐标是资源(可以是插件、依赖、当前项目)的唯一标识 </li>
<li>使用坐标来定义项目或引入项目中需要的依赖</li>
</ul>
<p>Maven 坐标主要组成 </p>
<ul>
<li>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：org.springframework） </li>
<li>artifactId：定义当前Maven项目名称（通常是模块名称，例如 spring-context） </li>
<li>version：定义当前项目版本号</li>
</ul>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="IDEA创建Maven项目"><a href="#IDEA创建Maven项目" class="headerlink" title="IDEA创建Maven项目"></a>IDEA创建Maven项目</h3><ol>
<li>首先创建项目，New Project</li>
<li>填写好名称等，其中Location为项目存放路径，Build System选择Maven。另外最下方还有Advanced Settings，其中GroupId为组织名，ArtifactId为模块名</li>
</ol>
<h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h3 id="引入jar包"><a href="#引入jar包" class="headerlink" title="引入jar包"></a>引入jar包</h3><p>使用坐标引入jar包：</p>
<p>在pom.xml中编写标签，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后点击IDEA右侧上方的Maven，选择刷新按钮点击即可</p>
<p>具体的坐标可以到如下网站进行搜索 </p>
<p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p>
<p>快捷方式导入jar包的坐标：</p>
<p>在pom.xml 中按alt + insert 或者 alt + fn + insert，选择Add dependency，然后在搜索框中搜索，点击Add就行</p>
<h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p>通过设置坐标的依赖范围(scope)，可以设置对应jar包的作用范围：编译环境、测试环境、运行环境。 </p>
<table>
<thead>
<tr>
<th align="center">依赖范围</th>
<th align="center">编译classpath</th>
<th align="center">测试classpath</th>
<th align="center">运行classpath</th>
</tr>
</thead>
<tbody><tr>
<td align="center">compile</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">Y</td>
</tr>
<tr>
<td align="center">test</td>
<td align="center">-</td>
<td align="center">Y</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">provided</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">runtime</td>
<td align="center">-</td>
<td align="center">Y</td>
<td align="center">Y</td>
</tr>
<tr>
<td align="center">system</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">-</td>
</tr>
</tbody></table>
<p><strong>如果引入坐标不指定 scope 标签时，默认就是 compile 值。</strong></p>
<p>system和provided的区别是，使用system范围的依赖时必须通过systemPath元素显式地指定依赖文件的路径。</p>
<p>由于此类依赖不是通过Maven仓库解析的，而且往往与本机系统绑定，可能造成构建的不可移植，因此应该谨慎使用。systemPath元素可以引用环境变量。例如： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.sql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jdbc-stdext<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习</title>
    <url>/2023/01/15/MyBatis%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。 </p>
<h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h2><p>MyBatis 是一款优秀的<strong>持久层框架</strong>，用于简化 JDBC 开发 </p>
<p>MyBatis 本是 Apache 的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github </p>
<p>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<h3 id="持久层："><a href="#持久层：" class="headerlink" title="持久层："></a>持久层：</h3><ul>
<li><p>负责将数据到保存到数据库的那一层代码。 </p>
<p>以后开发我们会将操作数据库的Java代码作为持久层。而Mybatis就是对jdbc代码进行了封装。 </p>
</li>
<li><p>JavaEE三层架构：表现层、业务层、持久层</p>
</li>
</ul>
<h3 id="框架："><a href="#框架：" class="headerlink" title="框架："></a>框架：</h3><ul>
<li>框架就是一个半成品软件，是一套可重用的、通用的、软件基础代码模型 </li>
<li>在框架的基础之上构建软件编写更加高效、规范、通用、可扩展</li>
</ul>
<h2 id="MyBatis快速入门"><a href="#MyBatis快速入门" class="headerlink" title="MyBatis快速入门"></a>MyBatis快速入门</h2><p>在创建好的项目或模块中的 pom.xml 配置文件中添加依赖的坐标 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyBatis依赖--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>另外还有些其他的依赖也需要</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Mybatis-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--MyBatis依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mysql 驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--junit 单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--添加slf4j日志api--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--添加logback-classic依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--添加logback-core依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后要使用日志还需要在项目的 resources 目录下创建logback的配置文件。</p>
<p>在resources下新建logback.xml文件，并填入以下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        CONSOLE ：表示当前的日志信息是可以输出到控制台的。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%level]  %cyan([%thread]) %boldGreen(%logger&#123;15&#125;) - %msg %n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.example&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF</span></span><br><span class="line"><span class="comment">     ， 默认debug</span></span><br><span class="line"><span class="comment">      &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个输出位置将会被本日志级别控制。</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后我们需要准备好一个类，放在org.example.pojo下，命名为User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String account;</span><br><span class="line">    String password;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String account, String password, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.account = account;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAccount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccount</span><span class="params">(String account)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.account = account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;account=&#x27;&quot;</span> + account + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接着在 resources 目录下创建映射配置文件 UserMapper.xml </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.example.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中resultType为返回结果的类型。</p>
<p>接下来就是编写 MyBatis 核心配置文件。</p>
<p>在resources下新建 mybatis-config.xml作为MyBatis的配置文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    environments：配置数据库连接环境信息。可以配置多个environment，通过default属性切换不同的</span></span><br><span class="line"><span class="comment">    environment</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///xlr?useSSL=false&quot;</span>/&gt;</span><span class="comment">&lt;!--xlr为数据库名称--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;031006&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载sql映射文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后在 org.example 包下编写 MybatisDemo 测试类 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.example.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;test.selectAll&quot;</span>);</span><br><span class="line">        <span class="comment">//参数是一个字符串，该字符串必须是映射配置文件UserMapper.xml中的namespace.id</span></span><br><span class="line">        System.out.println(users);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行后的结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[DEBUG]  [main] o.a.i.l.LogFactory - Logging initialized using &#x27;class org.apache.ibatis.logging.slf4j.Slf4jImpl&#x27; adapter. </span><br><span class="line">[DEBUG]  [main] o.a.i.d.p.PooledDataSource - PooledDataSource forcefully closed/removed all connections. </span><br><span class="line">[DEBUG]  [main] o.a.i.d.p.PooledDataSource - PooledDataSource forcefully closed/removed all connections. </span><br><span class="line">[DEBUG]  [main] o.a.i.d.p.PooledDataSource - PooledDataSource forcefully closed/removed all connections. </span><br><span class="line">[DEBUG]  [main] o.a.i.d.p.PooledDataSource - PooledDataSource forcefully closed/removed all connections. </span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Opening JDBC Connection </span><br><span class="line">[DEBUG]  [main] o.a.i.d.p.PooledDataSource - Created connection 1089418272. </span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@40ef3420] </span><br><span class="line">[DEBUG]  [main] test.selectAll - ==&gt;  Preparing: select * from user; </span><br><span class="line">[DEBUG]  [main] test.selectAll - ==&gt; Parameters:  </span><br><span class="line">[DEBUG]  [main] test.selectAll - &lt;==      Total: 6 </span><br><span class="line">[User&#123;account=&#x27;31670&#x27;, password=&#x27;123456&#x27;, id=1&#125;, User&#123;account=&#x27;94348&#x27;, password=&#x27;90826&#x27;, id=2&#125;, User&#123;account=&#x27;a&#x27;, password=&#x27;a&#x27;, id=3&#125;, User&#123;account=&#x27;b&#x27;, password=&#x27;b&#x27;, id=4&#125;, User&#123;account=&#x27;c&#x27;, password=&#x27;c&#x27;, id=5&#125;, User&#123;account=&#x27;d&#x27;, password=&#x27;d&#x27;, id=6&#125;]</span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@40ef3420] </span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@40ef3420] </span><br><span class="line">[DEBUG]  [main] o.a.i.d.p.PooledDataSource - Returned connection 1089418272 to pool. </span><br></pre></td></tr></table></figure>

<h2 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a>Mapper代理开发</h2><blockquote>
<p>Mapper代理开发有很多优势。首先它不依赖于字符串字面值，会更安全一点；其次，如果你的 IDE 有代码补全功能，那么代码补全可以帮你快速选择到映射好的 SQL 语句。 </p>
</blockquote>
<p><strong>步骤：</strong></p>
<ol>
<li><p>定义与SQL映射文件同名的Mapper接口，并且将Mapper接口和SQL映射文件放置在同一目录下</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEBbb3fdd29a26097797933ab46d3957307?method=download&shareKey=33790863df63ccadc91abc15730375a3" alt="1673258458134"></p>
</li>
<li><p>设置SQL映射文件的namespace属性为Mapper接口全限定名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.example.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.example.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>mybatis-config.xml配置也要改,更改resource</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    environments：配置数据库连接环境信息。可以配置多个environment，通过default属性切换不同的</span></span><br><span class="line"><span class="comment">    environment</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///xlr?useSSL=false&quot;</span>/&gt;</span><span class="comment">&lt;!--xlr为数据库名称--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;031006&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载sql映射文件--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/example/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果Mapper接口名称和SQL映射文件名称相同，并在同一目录下，则可以使用包扫描的方式简化SQL映射文件的加载。也就是将核心配置文件的加载映射配置文件的配置修改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    environments：配置数据库连接环境信息。可以配置多个environment，通过default属性切换不同的</span></span><br><span class="line"><span class="comment">    environment</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///xlr?useSSL=false&quot;</span>/&gt;</span><span class="comment">&lt;!--xlr为数据库名称--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;031006&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载sql映射文件--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource=&quot;org/example/mapper/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.example.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样就不需要因为新增其他的映射文件而去多次修改配置了。</p>
</li>
<li><p>在 Mapper接口中定义方法，方法名就是SQL映射文件中sql语句的id，并保持参数类型和返回值类型一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>编码</p>
<ol>
<li>通过SqISession的getMapper方法获取Mapper接口的代理对象</li>
<li>调用对应方法完成sql的执行</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.example.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.example.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        <span class="comment">//3.1  获取UserMapper接口的代理对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; list = userMapper.selectAll();</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="MyBatis核心配置文件"><a href="#MyBatis核心配置文件" class="headerlink" title="MyBatis核心配置文件"></a>MyBatis核心配置文件</h2><p>mybatis-config.xml配置文件</p>
<h3 id="环境配置（environments）"><a href="#环境配置（environments）" class="headerlink" title="环境配置（environments）"></a>环境配置（environments）</h3><p>在核心配置文件的 environments 标签中可以配置多个environment ，使用 id 给每段环境起名，在 environments 中使用default&#x3D;’环境id’ 来指定使用哪段配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///xlr?useSSL=false&quot;</span>/&gt;</span><span class="comment">&lt;!--xlr为数据库名称--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;031006&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///xlr?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;031006&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="类型别名（typeAliases）"><a href="#类型别名（typeAliases）" class="headerlink" title="类型别名（typeAliases）"></a>类型别名（typeAliases）</h3><blockquote>
<p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。 </p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;myusers&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.example.pojo.User&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样映射配置文件UserMapper.xml中 resultType  属性值就可以直接用myusers了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.example.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;myusers&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>另外还可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.example.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样一来，映射配置文件UserMapper.xml中 resultType  属性值就可以直接用users了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.example.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="配置文件完成增删改查"><a href="#配置文件完成增删改查" class="headerlink" title="配置文件完成增删改查"></a>配置文件完成增删改查</h2><p>介绍一款插件，MybatisX 是一款基于 IDEA 的快速开发插件，为效率而生。 </p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="查询所有数据"><a href="#查询所有数据" class="headerlink" title="查询所有数据"></a>查询所有数据</h4><p>查询所有很简单，上面的过程就是查询所有。</p>
<p>主要是3个步骤：</p>
<ol>
<li><p>编写接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写sql语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.example.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;myusers&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectALl</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        <span class="comment">//3.1  获取UserMapper接口的代理对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; list = userMapper.selectAll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user:list) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>数据库表的字段名称和实体类的属性名称不一样，则不能自动封装数距。</p>
<p>现在我将数据库的account字段改成user_account，和类中的名称account不一样，<strong>然后删掉带参构造方法</strong>，那么结果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User&#123;account=&#x27;null&#x27;, password=&#x27;123456&#x27;, id=1&#125;</span><br><span class="line">User&#123;account=&#x27;null&#x27;, password=&#x27;90826b&#x27;, id=2&#125;</span><br><span class="line">User&#123;account=&#x27;null&#x27;, password=&#x27;abse&#x27;, id=3&#125;</span><br><span class="line">User&#123;account=&#x27;null&#x27;, password=&#x27;bresbr&#x27;, id=4&#125;</span><br><span class="line">User&#123;account=&#x27;null&#x27;, password=&#x27;cens&#x27;, id=5&#125;</span><br><span class="line">User&#123;account=&#x27;null&#x27;, password=&#x27;dberhb&#x27;, id=6&#125;</span><br></pre></td></tr></table></figure>

<p>可以通过起别名解决这个问题</p>
<p>修改UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.example.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;select id=&quot;selectAll&quot; resultType=&quot;myusers&quot;&gt;</span></span><br><span class="line"><span class="comment">        select * from user;</span></span><br><span class="line"><span class="comment">    &lt;/select&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;myusers&quot;</span>&gt;</span></span><br><span class="line">        select user_account as account, password, id from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>再运行结果就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User&#123;account=&#x27;31670&#x27;, password=&#x27;123456&#x27;, id=1&#125;</span><br><span class="line">User&#123;account=&#x27;94348&#x27;, password=&#x27;90826b&#x27;, id=2&#125;</span><br><span class="line">User&#123;account=&#x27;4552543&#x27;, password=&#x27;abse&#x27;, id=3&#125;</span><br><span class="line">User&#123;account=&#x27;273473&#x27;, password=&#x27;bresbr&#x27;, id=4&#125;</span><br><span class="line">User&#123;account=&#x27;527373&#x27;, password=&#x27;cens&#x27;, id=5&#125;</span><br><span class="line">User&#123;account=&#x27;2552583&#x27;, password=&#x27;dberhb&#x27;, id=6&#125;</span><br></pre></td></tr></table></figure>

<p>这样做缺点就是每次查询都要起一次别名</p>
<p>可以通过sql片段解决这个问题，缺点是不灵活</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;user_column&quot;</span>&gt;</span></span><br><span class="line">       user_account as account, password, id</span><br><span class="line">   <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;myusers&quot;</span>&gt;</span></span><br><span class="line">       select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;user_column&quot;</span>/&gt;</span> from user;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>还有一个<strong>解决数据库表的字段名称和实体类的属性名称不一样</strong>的方法就是<strong>使用resultMap</strong></p>
<p>在映射配置文件中使用resultMap定义 字段 和 属性 的映射关系 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;myusers&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_account&quot;</span> <span class="attr">property</span>=<span class="string">&quot;account&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中，result标签有两个不同的，<strong>id：完成主键字段的映射 ，result：完成一般字段的映射</strong> </p>
<p>column：表的列名 ，property：实体类的属性名</p>
<p>还要把<code> &lt;select id=&quot;selectAll&quot; resultType=&quot;myusers&quot;&gt;</code></p>
<p>中的<code>resultType=&quot;myusers&quot;</code>改为<code>resultMap=&quot;userResultMap&quot;</code>为resultMap的id。</p>
<h4 id="通过id进行查询"><a href="#通过id进行查询" class="headerlink" title="通过id进行查询"></a><strong>通过id进行查询</strong></h4><p>与上面类似。</p>
<p>修改UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后是测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        <span class="comment">//3.1  获取UserMapper接口的代理对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(id);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">[DEBUG]  [main] o.e.m.U.selectById - ==&gt;  Preparing: select * from user where id = ?; </span><br><span class="line">[DEBUG]  [main] o.e.m.U.selectById - ==&gt; Parameters: 1(Integer) </span><br><span class="line">[DEBUG]  [main] o.e.m.U.selectById - &lt;==      Total: 1 </span><br><span class="line">User&#123;account=&#x27;31670&#x27;, password=&#x27;123456&#x27;, id=1&#125;</span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@7b02881e] </span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@7b02881e] </span><br><span class="line">[DEBUG]  [main] o.a.i.d.p.PooledDataSource - Returned connection 2063763486 to pool. </span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>UserMapper.xml中，mybatis提供了两种参数占位符： </p>
<p>#{} ：执行SQL时，会将 #{} 占位符替换为？，将来自动设置参数值。#{} 底层使用的是 PreparedStatement，可以看到运行结果中的·<code>[DEBUG]  [main] o.e.m.U.selectById - ==&gt;  Preparing: select * from user where id = ?;</code>这一行</p>
<p> ${} ：拼接SQL。底层使用的是 Statement ，会存在SQL注入问题。</p>
<p>换成这个运行结果就为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">[DEBUG]  [main] o.e.m.U.selectById - ==&gt;  Preparing: select * from user where id = 1; </span><br><span class="line">[DEBUG]  [main] o.e.m.U.selectById - ==&gt; Parameters:  </span><br><span class="line">[DEBUG]  [main] o.e.m.U.selectById - &lt;==      Total: 1 </span><br><span class="line">User&#123;account=&#x27;31670&#x27;, password=&#x27;123456&#x27;, id=1&#125;</span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@28975c28] </span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@28975c28] </span><br><span class="line">[DEBUG]  [main] o.a.i.d.p.PooledDataSource - Returned connection 681008168 to pool. </span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到<code>[DEBUG]  [main] o.e.m.U.selectById - ==&gt;  Preparing: select * from user where id = 1; </code></p>
<p>另外，因为映射配置文件是xml类型的问题，而 &lt; 等这些字符在xml中有特殊含义，所以我们直接使用的时候会报错。</p>
<p>有两种方法解决这个：</p>
<ul>
<li><p>用 &amp;lt； 代替 &lt; ,&amp;lt；是 &lt; 的转义字符(;是英文的)。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id <span class="symbol">&amp;lt;</span> #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用&lt;![CDATA[]]&gt;，被&lt;![CDATA[]]&gt;这个标记所包含的内容将表示为纯文本 。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id &lt;![CDATA[</span><br><span class="line">    &lt;</span><br><span class="line">    ]]&gt; #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><h5 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h5><p>同样的步骤，先在UserMapper接口中定义多条件查询的方法。</p>
<p>这里有多种实现方法。</p>
<ol>
<li>在UserMapper接口中，使用 @Param(“参数名称”) 标记每一个参数，在映射配置文件中就需要使用 #{参数名称} 进行占位</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">selectByCondition</span><span class="params">(<span class="meta">@Param(&quot;account&quot;)</span> String account,<span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将多个参数封装成一个实体对象，将该实体对象作为接口的方法参数。该方式要求在映射配置文件的SQL中使用 #{内容} 时，里面的内容必须和实体类属性名保持一致。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">selectByCondition</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将多个参数封装到map集合中，将map集合作为接口的方法参数。该方式要求在映射配置文件的SQL中使用 #{内容} 时，里面的内容必须和map集合中键的名称一致。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">selectByCondition</span><span class="params">(Map map)</span>;</span><br></pre></td></tr></table></figure>

<p>然后编写SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where user_account = #&#123;account&#125;</span><br><span class="line">      and password = #&#123;password&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后是测试方法</p>
<p>1. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> <span class="string">&quot;31670&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 执行sql</span></span><br><span class="line">    <span class="comment">//3.1  获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByCondition(account,password);</span><br><span class="line"></span><br><span class="line">    System.out.println(users);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> <span class="string">&quot;31670&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setAccount(account);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        <span class="comment">//3.1  获取UserMapper接口的代理对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">//        List&lt;User&gt; users = userMapper.selectByCondition(account,password);</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectByCondition(user);</span><br><span class="line"></span><br><span class="line">        System.out.println(users);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>3. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> <span class="string">&quot;31670&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    map.put(<span class="string">&quot;account&quot;</span>,account);</span><br><span class="line">    map.put(<span class="string">&quot;password&quot;</span>,password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 执行sql</span></span><br><span class="line">    <span class="comment">//3.1  获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByCondition(map);</span><br><span class="line"></span><br><span class="line">    System.out.println(users);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@3c0be339] </span><br><span class="line">[DEBUG]  [main] o.e.m.U.selectByCondition - ==&gt;  Preparing: select * from user where user_account = ? and password = ?; </span><br><span class="line">[DEBUG]  [main] o.e.m.U.selectByCondition - ==&gt; Parameters: 31670(String), 123456(String) </span><br><span class="line">[DEBUG]  [main] o.e.m.U.selectByCondition - &lt;==      Total: 1 </span><br><span class="line">[User&#123;account=&#x27;31670&#x27;, password=&#x27;123456&#x27;, id=1&#125;]</span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@3c0be339] </span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@3c0be339] </span><br><span class="line">[DEBUG]  [main] o.a.i.d.p.PooledDataSource - Returned connection 1007412025 to pool. </span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h5 id="动态条件查询-多条件"><a href="#动态条件查询-多条件" class="headerlink" title="动态条件查询(多条件)"></a>动态条件查询(多条件)</h5><p>SQL语句会随着用户的输入或外部条件的变化而变化，我们成为<strong>动态SQL</strong></p>
<p>Mybatis对动态SQL有很强大的支撑。</p>
<p><strong>if 标签：条件判断</strong> </p>
<ul>
<li>test 属性：逻辑表达式</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--test中应该填写值的字符串而不是表中字段名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user2</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phoneNumber != null and phoneNumber != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        phone_number = #&#123;phoneNumber&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;account != null and account != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and user_account = #&#123;account&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and password = #&#123;password&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样一来，即使有些值不存在也能进行查询。</p>
<p>但是有一点，如果第一个phoneNumber不存在，sql语句就会出现错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[DEBUG]  [main] o.e.m.U.selectByCondition - ==&gt;  Preparing: select * from user2 where and user_account = ? </span><br></pre></td></tr></table></figure>

<p>这里有两种解决方法：</p>
<ul>
<li><p>将语句改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user2</span><br><span class="line">    where 1 = 1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phoneNumber != null and phoneNumber != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and phone_number = #&#123;phoneNumber&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;account != null and account != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and user_account = #&#123;account&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and password = #&#123;password&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用where标签</p>
</li>
</ul>
<p><strong>where标签</strong></p>
<p>作用： </p>
<ul>
<li>替换where关键字 </li>
<li>会动态的去掉第一个条件前的 and </li>
<li>如果所有的参数没有值则不加where关键字</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user2</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phoneNumber != null and phoneNumber != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and phone_number = #&#123;phoneNumber&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;account != null and account != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and user_account = #&#123;account&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and password = #&#123;password&#125;;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：<strong>需要给每个条件前都加上 and 关键字。</strong></p>
<h5 id="动态条件查询-单条件"><a href="#动态条件查询-单条件" class="headerlink" title="动态条件查询(单条件)"></a>动态条件查询(单条件)</h5><p>查询时只能选择几个条件中的一个，但是到底选择哪儿一个，我们并不能确定。这种就属于单个条件的动态SQL语句。 </p>
<p>这个需要使用到 choose（when，otherwise）标签 实现， 而 choose 标签类似于Java 中的switch语句。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;selectByCondition&quot; resultMap=&quot;userResultMap&quot;&gt;</span><br><span class="line">    select *</span><br><span class="line">    from user2</span><br><span class="line">    where</span><br><span class="line">        &lt;choose&gt;  &lt;!--类似于switch--&gt;</span><br><span class="line">            &lt;when test=&quot;phoneNumber != null and phoneNumber != &#x27;&#x27; &quot;&gt;  &lt;!--类似于case--&gt;</span><br><span class="line">                phone_number = #&#123;phoneNumber&#125;</span><br><span class="line">            &lt;/when&gt;</span><br><span class="line">            &lt;when test=&quot;account != null and account != &#x27;&#x27; &quot;&gt;</span><br><span class="line">                user_account = #&#123;account&#125;</span><br><span class="line">            &lt;/when&gt;</span><br><span class="line">            &lt;when test=&quot;password != null and password != &#x27;&#x27; &quot;&gt;</span><br><span class="line">                password = #&#123;password&#125;;</span><br><span class="line">            &lt;/when&gt;</span><br><span class="line">            &lt;otherwise&gt;  &lt;!--类似于default--&gt;</span><br><span class="line">                1 = 1</span><br><span class="line">            &lt;/otherwise&gt;</span><br><span class="line">        &lt;/choose&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>如果使用where标签，不用otherwise也不会出现语法错误。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user2</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span>  <span class="comment">&lt;!--类似于switch--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;phoneNumber != null and phoneNumber != &#x27;&#x27; &quot;</span>&gt;</span>  <span class="comment">&lt;!--类似于case--&gt;</span></span><br><span class="line">                phone_number = #&#123;phoneNumber&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;account != null and account != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                user_account = #&#123;account&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                password = #&#123;password&#125;;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><h4 id="直接添加"><a href="#直接添加" class="headerlink" title="直接添加"></a>直接添加</h4><p>添加也是类似的步骤。</p>
<p>编写接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<p>编写SQL语句：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">    insert into user2 (user_account,password,phone_number,age)</span><br><span class="line">    values (#&#123;account&#125;,#&#123;password&#125;,#&#123;phoneNumber&#125;,#&#123;age&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> <span class="string">&quot;111111&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1111111&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">phoneNumber</span> <span class="operator">=</span> <span class="string">&quot;111111&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setPassword(password);</span><br><span class="line">    user.setAccount(account);</span><br><span class="line">    user.setPhoneNumber(phoneNumber);</span><br><span class="line">    user.setAge(age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 执行sql</span></span><br><span class="line">    <span class="comment">//3.1  获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    userMapper.add(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到如下运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@6e509ffa]</span><br><span class="line">[DEBUG]  [main] o.e.m.U.add - ==&gt;  Preparing: insert into user2 (user_account,password,phone_number,age) values (?,?,?,?); </span><br><span class="line">[DEBUG]  [main] o.e.m.U.add - ==&gt; Parameters: 111111(String), 1111111(String), 111111(String), 25(Integer) </span><br><span class="line">[DEBUG]  [main] o.e.m.U.add - &lt;==    Updates: 1 </span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Rolling back JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@6e509ffa] </span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@6e509ffa] </span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@6e509ffa] </span><br><span class="line">[DEBUG]  [main] o.a.i.d.p.PooledDataSource - Returned connection 1850777594 to pool. </span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里表示开启了事务，因为没有手动提交，所以执行完后就回滚了，数据库中并没有变化。</p>
<p>我们再加一句代码就行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">userMapper.add(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">sqlSession.commit();</span><br></pre></td></tr></table></figure>

<p>可以看到运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@6e509ffa] </span><br><span class="line">[DEBUG]  [main] o.e.m.U.add - ==&gt;  Preparing: insert into user2 (user_account,password,phone_number,age) values (?,?,?,?); </span><br><span class="line">[DEBUG]  [main] o.e.m.U.add - ==&gt; Parameters: 111111(String), 1111111(String), 111111(String), 25(Integer) </span><br><span class="line">[DEBUG]  [main] o.e.m.U.add - &lt;==    Updates: 1 </span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Committing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@6e509ffa] </span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@6e509ffa] </span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@6e509ffa] </span><br><span class="line">[DEBUG]  [main] o.a.i.d.p.PooledDataSource - Returned connection 1850777594 to pool. </span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<p>最后可以看到数据库的表里面已经新增了数据。</p>
<p>我们也可以将其设为<strong>自动提交事务</strong>，修改这一行代码<code>SqlSession sqlSession = sqlSessionFactory.openSession();</code>为<code>SqlSession sqlSession = sqlSessionFactory.openSession(true);</code></p>
<h4 id="主键返回"><a href="#主键返回" class="headerlink" title="主键返回"></a>主键返回</h4><p>在数据添加成功后，有时候需要获取插入数据库数据的主键（主键是自增长） 。</p>
<p>实现这个很简单，在 insert 标签上添加如下属性： </p>
<ul>
<li>useGeneratedKeys：是够获取自动增长的主键值。true表示获取 </li>
<li>keyProperty ：指定将获取到的主键值封装到哪个属性里</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into user2 (user_account,password,phone_number,age)</span><br><span class="line">    values (#&#123;account&#125;,#&#123;password&#125;,#&#123;phoneNumber&#125;,#&#123;age&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后修改测试样例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">userMapper.add(user);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> user.getId();</span><br><span class="line">System.out.println(id);</span><br></pre></td></tr></table></figure>

<p>这样就能获取到id的值了，运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">[DEBUG]  [main] o.a.i.d.p.PooledDataSource - Created connection 1748876332. </span><br><span class="line">[DEBUG]  [main] o.e.m.U.add - ==&gt;  Preparing: insert into user2 (user_account,password,phone_number,age) values (?,?,?,?); </span><br><span class="line">[DEBUG]  [main] o.e.m.U.add - ==&gt; Parameters: 111111(String), 1111111(String), 111111(String), 25(Integer) </span><br><span class="line">[DEBUG]  [main] o.e.m.U.add - &lt;==    Updates: 1 </span><br><span class="line">10</span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@683dbc2c] </span><br><span class="line">[DEBUG]  [main] o.a.i.d.p.PooledDataSource - Returned connection 1748876332 to pool. </span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><h4 id="修改全部字段"><a href="#修改全部字段" class="headerlink" title="修改全部字段"></a>修改全部字段</h4><p>编写接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateAll</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<p>返回值为int，表示受影响的行数。</p>
<p>编写SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAll&quot;</span>&gt;</span></span><br><span class="line">    update user2</span><br><span class="line">    set user_account = #&#123;account&#125;,</span><br><span class="line">        password     = #&#123;password&#125;,</span><br><span class="line">        phone_number = #&#123;phoneNumber&#125;,</span><br><span class="line">        age          = #&#123;age&#125;</span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdataAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">phoneNumber</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">25</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        user.setAccount(account);</span><br><span class="line">        user.setPhoneNumber(phoneNumber);</span><br><span class="line">        user.setAge(age);</span><br><span class="line">        user.setId(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        <span class="comment">//3.1  获取UserMapper接口的代理对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> userMapper.updateAll(user);</span><br><span class="line">        System.out.println(cnt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">[DEBUG]  [main] o.a.i.d.p.PooledDataSource - Created connection 1748876332. </span><br><span class="line">[DEBUG]  [main] o.e.m.U.updateAll - ==&gt;  Preparing: update user2 set user_account = ?, password = ?, phone_number = ?, age = ? where id = ?; </span><br><span class="line">[DEBUG]  [main] o.e.m.U.updateAll - ==&gt; Parameters: 123456(String), 123456(String), 123456(String), 25(Integer), 1(Integer) </span><br><span class="line">[DEBUG]  [main] o.e.m.U.updateAll - &lt;==    Updates: 1 </span><br><span class="line">1</span><br><span class="line">[DEBUG]  [main] o.a.i.t.j.JdbcTransaction - Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@683dbc2c] </span><br><span class="line">[DEBUG]  [main] o.a.i.d.p.PooledDataSource - Returned connection 1748876332 to pool. </span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h4 id="修改动态字段"><a href="#修改动态字段" class="headerlink" title="修改动态字段"></a>修改动态字段</h4><p>这个与之前类似</p>
<p>修改UserMapper.xml</p>
<p>set 标签可以用于动态包含需要更新的列，忽略其它不更新的列。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAll&quot;</span>&gt;</span></span><br><span class="line">    update user2</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phoneNumber != null and phoneNumber != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            phone_number = #&#123;phoneNumber&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;account != null and account != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            user_account = #&#123;account&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            password = #&#123;password&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != 0&quot;</span>&gt;</span></span><br><span class="line">            age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="删除单个"><a href="#删除单个" class="headerlink" title="删除单个"></a>删除单个</h4><p>编写接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<p>编写SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span>&gt;</span></span><br><span class="line">    delete</span><br><span class="line">    from user2</span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteBtId</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 执行sql</span></span><br><span class="line">    <span class="comment">//3.1  获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    userMapper.deleteById(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h4><p>编写接口方法，参数是一个数组，数组中存储的是多条数据的id </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="type">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure>
<p>编写SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">    delete</span><br><span class="line">    from user2</span><br><span class="line">    where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    ;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写SQL时需要遍历数组来拼接SQL语句。Mybatis 提供了 foreach 标签供我们使用 </p>
<p>foreach 标签 ：用来迭代任何可迭代的对象（如数组，集合）。 </p>
<ul>
<li><p>collection 属性： </p>
<p>mybatis会将数组参数，封装为一个Map集合。 </p>
<p>默认：array &#x3D; 数组 </p>
<p>使用@Param注解改变map集合的默认key的名称 </p>
</li>
<li><p>item 属性：本次迭代获取到的元素。 </p>
</li>
<li><p>separator 属性：集合项迭代之间的分隔符。 foreach 标签不会错误地添加多余的分隔符。也就是最后一次迭代不会加分隔符。 </p>
</li>
<li><p>open 属性：该属性值是在拼接SQL语句之前拼接的语句，只会拼接一次 </p>
</li>
<li><p>close 属性：该属性值是在拼接SQL语句拼接后拼接的语句，只会拼接一次</p>
</li>
</ul>
<p>另外一种写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> <span class="type">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure>


<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">    delete</span><br><span class="line">    from user2</span><br><span class="line">    where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    ;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteBtIds</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] ids = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        <span class="comment">//3.1  获取UserMapper接口的代理对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        userMapper.deleteByIds(ids);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="注解完成增删改查"><a href="#注解完成增删改查" class="headerlink" title="注解完成增删改查"></a>注解完成增删改查</h2><p>使用注解开发会比配置文件开发更加方便。</p>
<p>注解是用来替换映射配置文件方式配置的，所以使用了注解，就不需要再映射配置文件中书写对应的 statement </p>
<p>注解如下：</p>
<ul>
<li>查询 ：@Select </li>
<li>添加 ：@Insert </li>
<li>修改 ：@Update </li>
<li>删除 ：@Delete</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into user2 (user_account, password, phone_number, age)\n&quot; +</span></span><br><span class="line"><span class="meta">        &quot;values (#&#123;account&#125;, #&#123;password&#125;, #&#123;phoneNumber&#125;, #&#123;age&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update user set account = #&#123;account&#125;,password = #&#123;password&#125; where id = #&#123;id&#125;;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习（1）</title>
    <url>/2022/11/16/Spring%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<p>Spring官网：spring.io</p>
<h2 id="Spring系统架构"><a href="#Spring系统架构" class="headerlink" title="Spring系统架构"></a>Spring系统架构</h2><p>Spring Framework是Spring生态圈中最基础的项目，是其他项目的根基。</p>
<p>Spring Framework系统架构</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB38ae665de07aa74df9a08cfc728f0287?method=download&shareKey=a10a7cb7b46fa36ee80e0cd2c75e9503" alt="1668179759631"></p>
<h3 id="学习线路"><a href="#学习线路" class="headerlink" title="学习线路"></a>学习线路</h3><p><img src="https://note.youdao.com/yws/api/personal/file/WEB4105d0963ac50667835aa9a5c07fc952?method=download&shareKey=070b719c04a641d5d6c57cbf0524fa41" alt="1668180041813"></p>
<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="IoC-Inversion-of-Control-控制反转"><a href="#IoC-Inversion-of-Control-控制反转" class="headerlink" title="IoC( Inversion of Control )控制反转"></a>IoC( Inversion of Control )控制反转</h3><p>使用对象时，由主动new产生对象转换为由外部提供对象，此过程中对象创建控制权由程序转移到外部，此思想称为控制反转。</p>
<p>Spring技术对Ioc思想进行了实现。</p>
<p>Spring提供了一个容器，称为IoC容器，用来充当IoC思想中的外部。</p>
<p>IoC容器负责对象的创建、初始化等一系列工作，被创建或被管理的对象在IoC容器中统称为Bean</p>
<h3 id="DI-Dependency-Injection-依赖注入"><a href="#DI-Dependency-Injection-依赖注入" class="headerlink" title="DI ( Dependency Injection )依赖注入"></a>DI ( Dependency Injection )依赖注入</h3><p>在容器中建立bean与bean之间的依赖关系的整个过程，称为依赖注入</p>
<h3 id="目标-充分解耦"><a href="#目标-充分解耦" class="headerlink" title="目标:充分解耦"></a>目标:充分解耦</h3><p>使用IoC容器管理bean (IoC)<br>在IoC容器内将有依赖关系的bean进行关系绑定（DI)</p>
<h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p>使用对象时不仅可以直接从Ioc容器中获取，并且获取到的bean已经绑定了所有的依赖关系</p>
<h2 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h2><h3 id="导入Spring坐标"><a href="#导入Spring坐标" class="headerlink" title="导入Spring坐标"></a>导入Spring坐标</h3><p>在pom.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringTest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>//这里</span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="定义Spring管理的类（接口"><a href="#定义Spring管理的类（接口" class="headerlink" title="定义Spring管理的类（接口)"></a>定义Spring管理的类（接口)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.example.dao.impl.BookDaoImpl;</span><br><span class="line"><span class="keyword">import</span> org.example.service.BookService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDaoImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建Spring配置文件，配置对应类作为Spring管理的bean"><a href="#创建Spring配置文件，配置对应类作为Spring管理的bean" class="headerlink" title="创建Spring配置文件，配置对应类作为Spring管理的bean"></a>创建Spring配置文件，配置对应类作为Spring管理的bean</h3><p>在resources下新建applicationContext.xml文件。</p>
<p>New-&gt;XML Configuration File-&gt;Spring Config</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;bookDao&quot;</span> class=<span class="string">&quot;org.example.dao.impl.BookDaoImpl&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;bookService&quot;</span> class=<span class="string">&quot;org.example.service.impl.BookServiceImpl&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>bean定义时id属性在同一个上下文中不能重复</p>
<h3 id="初始化IoC容器-Spring核心容器-x2F-Spring容器），通过容器获取bean"><a href="#初始化IoC容器-Spring核心容器-x2F-Spring容器），通过容器获取bean" class="headerlink" title="初始化IoC容器( Spring核心容器&#x2F;Spring容器），通过容器获取bean"></a>初始化IoC容器( Spring核心容器&#x2F;Spring容器），通过容器获取bean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.example.service.BookService;</span><br><span class="line"><span class="keyword">import</span> org.example.service.impl.BookServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//加载配置文件得到上下文对象，也就是容器对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">	    <span class="comment">//获取资源</span></span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService) ctx.getBean(<span class="string">&quot;bookService&quot;</span>);</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h2><h3 id="删除使用new的形式创建对象的代码"><a href="#删除使用new的形式创建对象的代码" class="headerlink" title="删除使用new的形式创建对象的代码"></a>删除使用new的形式创建对象的代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private BookDao bookDao = new BookDaoImpl();</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="提供依赖对象对应的setter方法"><a href="#提供依赖对象对应的setter方法" class="headerlink" title="提供依赖对象对应的setter方法"></a>提供依赖对象对应的setter方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private BookDao bookDao = new BookDaoImpl();</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>set方法是容器在执行。</p>
<h3 id="配置service与dao之间的关系"><a href="#配置service与dao之间的关系" class="headerlink" title="配置service与dao之间的关系"></a>配置service与dao之间的关系</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;bookDao&quot;</span> class=<span class="string">&quot;org.example.dao.impl.BookDaoImpl&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--&lt;bean id=<span class="string">&quot;bookService&quot;</span> class=<span class="string">&quot;org.example.service.impl.BookServiceImpl&quot;</span>/&gt;--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;bookService&quot;</span> class=<span class="string">&quot;org.example.service.impl.BookServiceImpl&quot;</span>&gt;</span><br><span class="line">        &lt;!--property标签表示配置当前bean的属性</span><br><span class="line">        name属性表示配置哪一个具体的属性</span><br><span class="line">        ref属性表示参照哪一个bean--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;bookDao&quot;</span> ref=<span class="string">&quot;bookDao&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<h2 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h2><h3 id="bean基础配置"><a href="#bean基础配置" class="headerlink" title="bean基础配置"></a>bean基础配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.service.impl.BookServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="bean别名配置"><a href="#bean别名配置" class="headerlink" title="bean别名配置"></a>bean别名配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dao1 bookDaoImpl1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.dao.impl.BookDaoImpl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;service, bookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.service.impl.BookServiceImpl&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>获取bean无论是通过id还是name获取，如果无法获取到，将抛出异常NoSuchBeanDefinitionExceptionNoSuchBeanDefinitionException: No bean named ‘bookServiceImpl’ available</p>
<h3 id="bean作用范围"><a href="#bean作用范围" class="headerlink" title="bean作用范围"></a>bean作用范围</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.dao.impl.BookDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过scope定义bean的作用范围，可选范围如下<br>singleton:单例(默认)<br>prototype :非单例</p>
<h2 id="bean的实例化"><a href="#bean的实例化" class="headerlink" title="bean的实例化"></a>bean的实例化</h2><p>bean的实例化有3种方式。</p>
<h3 id="构造方法-常用"><a href="#构造方法-常用" class="headerlink" title="构造方法(常用)"></a>构造方法(常用)</h3><p>提供可访问的构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookDaoImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book constructor is running ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.dao.impl.BookDaoImpl&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>无参构造方法如果不存在，将抛出异常BeanCreationException</p>
<h3 id="静态工厂-了解"><a href="#静态工厂-了解" class="headerlink" title="静态工厂(了解)"></a>静态工厂(了解)</h3><p>静态工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OrderDao <span class="title function_">getOrderDao</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">&quot;getOrderDao&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.OrderDaoFactory&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实例工厂-了解"><a href="#实例工厂-了解" class="headerlink" title="实例工厂(了解)"></a>实例工厂(了解)</h3><p>实例工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getUserDao</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.UserDaoFactory&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">factory-bean</span>=<span class="string">&quot;userDaoFactory&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="FactoryBean-实用"><a href="#FactoryBean-实用" class="headerlink" title="FactoryBean(实用)"></a>FactoryBean(实用)</h3><p>FactoryBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;UserDao&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">get0bject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> class&lt;?&gt; getobjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> UserDao.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.UserDaoFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="bean生命周期控制"><a href="#bean生命周期控制" class="headerlink" title="bean生命周期控制"></a>bean生命周期控制</h2><p>提供生命周期控制方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book init ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;book destory ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置生命周期控制方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">destory</span>&quot; /&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>实现InitializingBean,DisposableBean接口(了解)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> , InitializingBean, DisposableBean &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterPropertiesSet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>生命周期</strong></p>
<p>初始化容器</p>
<blockquote>
<p>1．创建对象（内存分配)</p>
<p>2．执行构造方法</p>
<p>3．执行属性注入( set操作)</p>
<p>4．执行bean初始化方法</p>
</blockquote>
<p>使用bean</p>
<blockquote>
<p>1．执行业务操作</p>
</blockquote>
<p>关闭&#x2F;销毁容器</p>
<blockquote>
<p>1．执行bean销毁方法</p>
</blockquote>
<p><strong>容器关闭前触发bean的销毁</strong></p>
<p><strong>关闭容器方式</strong><br>手工关闭容器<br>ConfigurableApplicationContext接口close()操作注册关闭钩子，在虚拟机退出前先关闭容器再退出虚拟机<br>ConfigurableApplicationContext接口registerShutdownHook()操作</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Web核心-Http-Tomcat-Servlet</title>
    <url>/2023/01/31/Web%E6%A0%B8%E5%BF%83-Http-Tomcat-Servlet/</url>
    <content><![CDATA[<p>Web：全球广域网，也称为万维网(www)，能够通过浏览器访问的网站</p>
<p>JavaWeb： 是用 Java技术来解决相关web互联网领域的技术栈</p>
<p><strong>JavaWeb 技术栈</strong> </p>
<ul>
<li><p>B&#x2F;S 架构：Browser&#x2F;Server，浏览器&#x2F;服务器 架构模式，它的特点是，客户端只需要浏览器，应用程序的逻辑和数据都存储在服务器端。浏览器只需要请求服务器，获取Web资源，服务器把Web资源发送给浏览器即可</p>
<p>好处：易于维护升级：服务器端升级后，客户端无需任何部署就可以使用到新的版本</p>
</li>
<li><p>静态资源：HTML、CSS、JavaScript、图片等。负责页面展现</p>
</li>
<li><p>动态资源：Servlet、JSP 等。负责逻辑处理</p>
</li>
<li><p>数据库：负责存储数据</p>
</li>
<li><p>HTTP协议：定义通信规则</p>
</li>
<li><p>Web服务器：负责解析 HTTP 协议，解析请求数据，并发送响应数据</p>
</li>
</ul>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p><strong>概念</strong>：HyperText Transfer Protocol，超文本传输协议，规定了浏览器和服务器之间数据传输的规则 </p>
<p><strong>HTTP 协议特点</strong>：</p>
<ul>
<li>基于TCP协议：面向连接，安全</li>
<li>基于请求-响应模型的：一次请求对应一次响应</li>
<li>HTTP协议是无状态的协议：对于事务处理没有记忆能力。每次请求-响应都是独立的。<ul>
<li>缺点：多次请求间不能共享数据。Java中使用会话技术（Cookie、Session）来解决这个问题 </li>
<li>优点：速度快</li>
</ul>
</li>
</ul>
<h3 id="HTTP-请求数据格式"><a href="#HTTP-请求数据格式" class="headerlink" title="HTTP-请求数据格式"></a>HTTP-请求数据格式</h3><p><strong>请求数据分为3部分</strong>：</p>
<ol>
<li>请求行：请求数据的第一行。其中GET表示请求方式，&#x2F;表示请求资源路径，HTTP&#x2F;1.1表示协议版本</li>
<li>请求头：第二行开始，格式为key：value形式。</li>
<li>请求体： POST请求的最后一部分，存放请求参数</li>
</ol>
<blockquote>
<p>GET &#x2F; HTTP&#x2F;1.1 </p>
<p>Host: <a href="http://www.itcast.cn/">www.itcast.cn</a> </p>
<p>Connection: keep-alive </p>
<p>User-Agent: Mozilla&#x2F;5.0 Chrome&#x2F;91.0.4472.106</p>
<p>…</p>
</blockquote>
<blockquote>
<p>POST &#x2F; HTTP&#x2F;1.1 </p>
<p>Host: <a href="http://www.itcast.cn/">www.itcast.cn</a> </p>
<p>Connection: keep-alive </p>
<p>Cache-Control: max-age&#x3D;0 Upgrade-Insecure-Requests: 1 </p>
<p>User-Agent: Mozilla&#x2F;5.0 Chrome&#x2F;91.0.4472.106</p>
<p>username&#x3D;superbaby&amp;password&#x3D;123456</p>
</blockquote>
<p><strong>GET请求和 POST请求区别</strong>：</p>
<ul>
<li><p>GET请求请求参数在请求行中，没有请求体。</p>
<p>POST请求请求参数在请求体中</p>
</li>
<li><p>GET请求请求参数大小有限制，</p>
<p>POST没有</p>
</li>
</ul>
<p><strong>常见的HTTP 请求头</strong>：</p>
<ul>
<li>Host: 表示请求的主机名</li>
<li>User-Agent: 浏览器版本，例如Chrome浏览器的标识类似Mozilla&#x2F;5.0 … Chrome&#x2F;79，IE浏览器的标识类似Mozilla&#x2F;5.0 (Windows NT …) like Gecko；</li>
<li>Accept：表示浏览器能接收的资源类型，如text&#x2F;*，image&#x2F;<em>或者</em>&#x2F;*表示所有；</li>
<li>Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；</li>
<li>Accept-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等。</li>
</ul>
<h3 id="HTTP-响应数据格式"><a href="#HTTP-响应数据格式" class="headerlink" title="HTTP-响应数据格式"></a>HTTP-响应数据格式</h3><p><strong>响应数据分为3部分</strong>：</p>
<ul>
<li>响应行：响应数据的第一行。其中HTTP&#x2F;1.1表示协议版本，200表示响应状态码，OK表示状态码描述</li>
<li>响应头：第二行开始，格式为key：value形式</li>
<li>响应体： 最后一部分。存放响应数据</li>
</ul>
<blockquote>
<p>HTTP&#x2F;1.1 200 OK</p>
<p>Server: Tengine</p>
<p>Content-Type: text&#x2F;html</p>
<p>Transfer-Encoding: chunked…</p>
<p>&lt;html&gt;</p>
<p>&lt;head&gt;</p>
<p>​     &lt;title&gt;&lt;&#x2F;title&gt;</p>
<p>&lt;&#x2F;head&gt;</p>
<p>&lt;body&gt;&lt;&#x2F;body&gt;</p>
<p>&lt;&#x2F;html&gt;</p>
</blockquote>
<p><strong>常见的HTTP 响应头</strong>：</p>
<ul>
<li>Content-Type：表示该响应内容的类型，例如text&#x2F;html，image&#x2F;jpeg；</li>
<li>Content-Length：表示该响应内容的长度（字节数）；</li>
<li>Content-Encoding：表示该响应压缩算法，例如gzip；</li>
<li>Cache-Control：指示客户端应如何缓存，例如max-age&#x3D;300表示可以最多缓存300秒</li>
</ul>
<h2 id="Web服务器-Tomcat"><a href="#Web服务器-Tomcat" class="headerlink" title="Web服务器 - Tomcat"></a>Web服务器 - Tomcat</h2><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><p>Web服务器是一个应用程序（软件），对 HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是“提供网上信息浏览服务” 。</p>
<h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul>
<li>概念: Tomcat是Apache软件基金会一个核心项目，是一个开源免费的轻量级Web服务器，支持Servlet&#x2F;ISP少量JavaEE规范。</li>
<li>JavaEE: Java Enterprise Edition，Java企业版。指Java企业级开发的技术规范总和。包含13项技术规范:JDBC、JNDI、EJB、RMI、JSP、Servlet、XML、JMS、Java lDL、JTS、JTA、JavaMail、JAF</li>
<li>Tomcat 也被称为 Web容器、Servlet容器。Servlet 需要依赖于 Tomcat才能运行 </li>
<li>官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></li>
</ul>
<h4 id="基本使用-安装、卸载、启动、关闭、配置、部署项目"><a href="#基本使用-安装、卸载、启动、关闭、配置、部署项目" class="headerlink" title="基本使用:安装、卸载、启动、关闭、配置、部署项目"></a>基本使用:安装、卸载、启动、关闭、配置、部署项目</h4><ul>
<li><p>下载：官网下载</p>
</li>
<li><p>安装：绿色版，直接解压即可</p>
</li>
<li><p>卸载：直接删除目录即可</p>
</li>
<li><p>启动：双击：bin\startup.bat</p>
<ul>
<li><p>Tomcat输出日志的编码为UTF-8，而Windows控制台为GBK，一般会出现乱码。</p>
<p>修改conf&#x2F; logging.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.util.logging.ConsoleHandler.encoding = GBK</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>关闭：</p>
<ol>
<li>直接×掉运行窗口：强制关闭</li>
<li>bin\shutdown.bat：正常关闭</li>
<li>Ctrl+C：正常关闭</li>
</ol>
</li>
<li><p>配置：</p>
<p>修改启动端口号：conf&#x2F;server.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：HTTP协议默认端口号为80，如果将Tomcat端口号改为80，则将来访问Tomcat时，将不用输入端口号</p>
</li>
<li><p>Tomcat 部署项目：</p>
<p>将项目放置到 webapps 目录下， 即部署完成</p>
<p>一般 JavaWeb项目会被打成war包，然后将 war包放到 webapps目录下，Tomcat会自动解压缩 war文件</p>
</li>
</ul>
<h4 id="IDEA中创建Maven-Web项目"><a href="#IDEA中创建Maven-Web项目" class="headerlink" title="IDEA中创建Maven Web项目"></a>IDEA中创建Maven Web项目</h4><h5 id="Web项目结构"><a href="#Web项目结构" class="headerlink" title="Web项目结构"></a><strong>Web项目结构</strong></h5><p>Maven Web项目结构：开发中的项目 :</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB5e7efc16732bebf8ef5336a78770aa0b?method=download&shareKey=e9cc2d666d3b86d940c6cd5d368383cb" alt="1674702434056"></p>
<p>部署的JavaWeb项目结构：开发完成，可以部署的项目 :</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB2382ab56282e38b4103d2f62bfccbf4b?method=download&shareKey=0de164ca1661dc081fdbb97ac770c97f" alt="1674702525921"></p>
<ul>
<li>编译后的Java字节码文件和resources的资源文件，放到WEB-INF下的classes目录下</li>
<li>pom.xml中依赖坐标对应的jar包，放入WEB-INF下的lib目录下</li>
</ul>
<h5 id="使用骨架创建"><a href="#使用骨架创建" class="headerlink" title="使用骨架创建"></a><strong>使用骨架创建</strong></h5><p>骨架：项目模板 </p>
<p>创建一个新项目或模块，再点击Maven Archetype，在Archetype中选择。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.apache.maven.archetypes:maven-archetype-webapp</span><br></pre></td></tr></table></figure>

<p>点击Create创建完成。</p>
<p>可以发现，在main下没有Java目录，右键main，New，Directory，直接选择Java就行。</p>
<h5 id="不适用骨架创建"><a href="#不适用骨架创建" class="headerlink" title="不适用骨架创建"></a><strong>不适用骨架创建</strong></h5><p>创建一个新项目或模块：File-&gt;New -&gt; Module…或者Project…</p>
<p>我这里创建一个模块，再选择New Module，Build System选择Maven。</p>
<p>点击Create创建完成。</p>
<p>再pom.xml中编写打包方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后要创建webapp目录，可以手动创建，也可以自动创建。</p>
<p>自动创建：打开Project Structure，选择Facets，右键Web，点击Add，选择Web，选择刚刚创建的项目。</p>
<p>修改Deployment Descriptors中的路径。</p>
<p>修改Web Resource Directories中的路径。</p>
<p>点击Apply，再点击OK即可。</p>
<h4 id="IDEA中使用Tomcat"><a href="#IDEA中使用Tomcat" class="headerlink" title="IDEA中使用Tomcat"></a>IDEA中使用Tomcat</h4><p>在IDEA中集成使用Tomcat有两种方式，分别是<strong>集成本地Tomcat</strong>和<strong>Tomcat Maven插件</strong></p>
<h5 id="集成本地Tomcat"><a href="#集成本地Tomcat" class="headerlink" title="集成本地Tomcat"></a>集成本地Tomcat</h5><p>点击Edit Congfigurations…，再点击+号，选择Tomcat Server、Local。</p>
<p>点击Application server后的configure…,选择Tomcat Home的路径。点击OK。</p>
<p>接下来是部署，切换到Deployment。点击Deploy at the server startup下的+号，再点击Artifact…，选择tomcat-deom:war 即可。</p>
<p>最后点击apply，再点击OK就完成了。</p>
<h5 id="Tomcat-Maven插件"><a href="#Tomcat-Maven插件" class="headerlink" title="Tomcat Maven插件"></a>Tomcat Maven插件</h5><p>在pom.xml中添加Tomcat插件，可以使用快捷键alt+(fn)+ins(ert)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>tomcat-deom<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在项目中，右键-&gt;Run Maven -&gt; tomcat7:run运行</p>
<p>Maven Tomcat插件目前只有Tomcat7版本，没有更高的版本可以使用</p>
<p>使用Maven Tomcat插件，要想修改Tomcat的端口和访问路径，可以直接修改pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>tomcat-deom<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8000<span class="tag">&lt;/<span class="name">port</span>&gt;</span><span class="comment">&lt;!--访问端口号 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目访问路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>Servlet是JavaWeb最为核心的内容，它是Java提供的一门动态web资源开发技术。</p>
<p>Servlet是JavaEE规范之一，其实就是一个接口，将来我们需要定义Servlet类实现Servlet接口，并由web服务器运行Servlet。</p>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol>
<li><p>创建web项目，导入Servlet依赖坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">	...</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      provided指的是在编译和测试过程中有效,最后生成的war包时不会加入</span></span><br><span class="line"><span class="comment">       因为Tomcat的lib目录中已经有servlet-api这个jar包，如果在生成war包的时候生效就会和Tomcat中的jar包冲突，导致报错</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>web-demo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建：定义一个类，实现Servlet接口，并重写接口中的所有方法，并在service方法中输出一句话</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo1</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet:Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置：在类上使用@WebServlet注解，配置该Servlet的访问路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo1</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问：启动Tomcat，浏览器输入URL访问该Servlet</p>
</li>
</ol>
<h3 id="Servlet执行流程"><a href="#Servlet执行流程" class="headerlink" title="Servlet执行流程"></a>Servlet执行流程</h3><ul>
<li>浏览器发出<code>http://localhost:8080/web-demo/demo1</code>请求，从请求中可以解析出三部分内容，分别是<code>localhost:8080</code>、<code>web-demo</code>、<code>demo1</code><ul>
<li>根据<code>localhost:8080</code>可以找到要访问的Tomcat Web服务器</li>
<li>根据<code>web-demo</code>可以找到部署在Tomcat服务器上的web-demo项目</li>
<li>根据<code>demo1</code>可以找到要访问的是项目中的哪个Servlet类，根据@WebServlet后面的值进行匹配</li>
</ul>
</li>
<li>找到ServletDemo1这个类后，<strong>Tomcat Web服务器就会为ServletDemo1这个类创建一个对象</strong>，<strong>然后调用对象中的service方法</strong><ul>
<li>service方法中有ServletRequest和ServletResponse两个参数，ServletRequest封装的是请求数据，ServletResponse封装的是响应数据</li>
</ul>
</li>
</ul>
<h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><p>生命周期: 对象的生命周期指一个对象从被创建到被销毁的整个过程。</p>
<p>Servlet运行在Servlet容器(web服务器)中，其生命周期由容器来管理，分为4个阶段：</p>
<ol>
<li><p><strong>加载和实例化</strong>：默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象</p>
<p>默认情况，Servlet会在第一次访问被容器创建。</p>
<p>也可以在服务器启动的时候来创建Servlet：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">loadOnstartup的取值有两类情况</span></span><br><span class="line"><span class="comment">	（1）负整数:第一次访问时创建Servlet对象</span></span><br><span class="line"><span class="comment">	（2）0或正整数:服务器启动时创建Servlet对象，数字越小优先级越高</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/demo1&quot;,loadOnStartup = 1)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>初始化</strong>：在Servlet实例化之后，容器将调用Servlet的init()方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只调用一次</p>
</li>
<li><p><strong>请求处理</strong>：每次请求Servlet时，Servlet容器都会调用Servlet的service()方法对请求进行处理</p>
</li>
<li><p><strong>服务终止</strong>：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的destroy()方法完成资源的释放。在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收</p>
</li>
</ol>
<p>可以在Terminal命令行中，使用<code>mvn tomcat7:run</code>启动，然后再使用<code>ctrl+c</code>关闭tomcat</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xlr.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/demo2&quot;,loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo2</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  初始化方法</span></span><br><span class="line"><span class="comment">     *  1.调用时机：默认情况下，Servlet被第一次访问时，调用</span></span><br><span class="line"><span class="comment">     *      * loadOnStartup: 默认为-1，修改为0或者正整数，则会在服务器启动的时候，调用</span></span><br><span class="line"><span class="comment">     *  2.调用次数: 1次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供服务</span></span><br><span class="line"><span class="comment">     * 1.调用时机:每一次Servlet被访问时，调用</span></span><br><span class="line"><span class="comment">     * 2.调用次数: 多次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet:Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁方法</span></span><br><span class="line"><span class="comment">     * 1.调用时机：内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用</span></span><br><span class="line"><span class="comment">     * 2.调用次数: 1次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Servlet方法"><a href="#Servlet方法" class="headerlink" title="Servlet方法"></a>Servlet方法</h3><ul>
<li>初始化方法，在Servlet被创建时执行，只执行一次</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>提供服务方法， 每次Servlet被访问，都会调用该方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>销毁方法，当Servlet被销毁时，调用该方法。在内存释放或服务器关闭时销毁Servlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> </span><br></pre></td></tr></table></figure>

<p>剩下的两个方法是:</p>
<ul>
<li>获取Servlet信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">getServletInfo</span><span class="params">()</span> </span><br><span class="line"><span class="comment">//该方法用来返回Servlet的相关信息，没有什么太大的用处，一般我们返回一个空字符串即可</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>获取ServletConfig对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<h3 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h3><p><img src="https://note.youdao.com/yws/api/personal/file/WEB410da7f45e125f3a964b9aeca7b6381a?method=download&shareKey=7fb9ce329752936b26574dfb0b7c08e8" alt="1674960858034"></p>
<p>我们将来开发B&#x2F;S架构的web项目，都是针对HTTP协议，所以我们自定义Servlet,会通过继承HttpServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//TODO GET 请求方式处理逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;get&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//TODO POST 请求方式处理逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;post&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>要想发送一个<strong>GET请求</strong>，请求该Servlet，只需要通过浏览器发送<code>http://localhost:8080/web-demo/demo4</code>,就能看到doGet方法被执行了</p>
</li>
<li><p>要想发送一个<strong>POST请求</strong>，需要编写一个form表单来发送请求，在webapp下创建一个<code>a.html</code>页面，内容如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/web-demo/demo4&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动测试，即可看到doPost方法被执行了。</p>
</li>
</ul>
<p>前端发送GET和POST请求的时候，参数的位置不一致，GET请求参数在请求行中，POST请求参数在请求体中。为了能处理不同的请求方式，我们得在service方法中进行判断，然后写不同的业务处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/demo5&quot;,loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo5</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取请求方式，根据不同的请求方式进行不同的业务处理</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 获取请求方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 判断</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;GET&quot;</span>.equals(method)) &#123;</span><br><span class="line">            <span class="comment">// get方式处理逻辑</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(method)) &#123;</span><br><span class="line">            <span class="comment">// get方式处理逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们可以对Servlet接口进行继承封装，来简化代码开发。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xlr.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHttpServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取请求方式，根据不同的请求方式进行不同的业务处理</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 获取请求方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 判断</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;GET&quot;</span>.equals(method)) &#123;</span><br><span class="line">            <span class="comment">// get方式处理逻辑</span></span><br><span class="line">            doGet(request,servletResponse);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(method)) &#123;</span><br><span class="line">            <span class="comment">// get方式处理逻辑</span></span><br><span class="line">            doPost(request,servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>有了MyHttpServlet这个类，以后我们再编写Servlet类的时候，只需要继承MyHttpServlet，重写父类中的doGet和doPost方法，就可以用来处理GET和POST请求的业务逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xlr.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Servlet-urlPattern配置"><a href="#Servlet-urlPattern配置" class="headerlink" title="Servlet urlPattern配置"></a>Servlet urlPattern配置</h3><p>Servlet要想被访问，必须配置其访问路径（urlPattern）</p>
<p>一个Servlet可以配置多个urlPattern</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &#123;&quot;/demo&quot;,&quot;/demo0&quot;&#125;)</span></span><br></pre></td></tr></table></figure>

<p>urlPattern配置规则：</p>
<ol>
<li><p>精确匹配</p>
<ul>
<li>配置路径：<code>@WebServlet(&quot;/demo5&quot;)</code></li>
<li>访问路径：<code>localhost:8030/web-demo/demo5</code></li>
</ul>
</li>
<li><p>目录匹配</p>
<ul>
<li><p>配置路径：<code>@WebServlet(&quot;/demo/*&quot;)</code></p>
</li>
<li><p>访问路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localhost:8030/web-demo/demo</span><br><span class="line">localhost:8030/web-demo/demo/abc</span><br><span class="line">localhost:8030/web-demo/demo/123</span><br><span class="line">localhost:8030/web-demo/demo/abc/123</span><br></pre></td></tr></table></figure>

<p><code>/*</code>代表的是零或多个层级访问目录，同时精确匹配优先级要高于目录匹配。</p>
</li>
</ul>
</li>
<li><p>拓展名匹配</p>
<ul>
<li>配置路径：<code>@WebServlet(&quot;*.do&quot;)</code></li>
<li>访问路径：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localhost:8030/web-demo/abc.do</span><br><span class="line">localhost:8030/web-demo/123.do</span><br></pre></td></tr></table></figure>

<ol>
<li>如果路径配置的不是扩展名，那么在路径的前面就必须要加<code>/</code>否则会报错</li>
<li>如果路径配置的是<code>*.do</code>,那么在*.do的前面不能加<code>/</code>,否则会报错</li>
</ol>
</li>
<li><p>任意匹配</p>
<ul>
<li><p>配置路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@WebServlet(&quot;/&quot;)</span><br><span class="line">@WebServlet(&quot;/*&quot;)	</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localhost:8030/web-demo/abc</span><br><span class="line">localhost:8030/web-demo/123</span><br></pre></td></tr></table></figure>

<p>当我们的项目中的Servlet配置了 “&#x2F;“,会覆盖掉tomcat中的DefaultServlet</p>
<p>会引发请求静态资源的时候没有走默认的而是走了自定义的Servlet类，如：localhost:8030&#x2F;web-demo&#x2F;a.html无法被访问到</p>
<p><strong>DefaultServlet：</strong>当其他的url-pattern都匹配不上时走这个Servlet</p>
</li>
</ul>
<p>优先级为 精确匹配 &gt; 目录匹配 &gt; 扩展名匹配 &gt; &#x2F;* &gt; &#x2F;</p>
</li>
</ol>
<h3 id="XML配置方式编写Servlet"><a href="#XML配置方式编写Servlet" class="headerlink" title="XML配置方式编写Servlet"></a>XML配置方式编写Servlet</h3><p>Servlet从3.0版本后开始支持注解配置，3.0版本前只支持XML配置文件的配置方法。</p>
<p>对于XML的配置步骤有两步:</p>
<ul>
<li><p>编写Servlet类</p>
</li>
<li><p>在web.xml中配置该Servlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--Servleet全类名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.xlr.web.ServletDemo<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--Servlet访问路径--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet的名称，要和上面的名称一致--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>ViewPager使用</title>
    <url>/2022/08/02/ViewPager%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Android 3.0后引入了一个UI控件——ViewPager(视图滑动切换工具) 。因为是3.0后引入的，如果想在低版本下使用，就需要引入v4 兼容包 。</p>
<blockquote>
<p>ViewPager是一个简单的页面切换组件，我们可以往里面填充多个View，然后我们可以左右滑动，从而切换不同的View。和前面学的ListView，GridView一样，我们也需要一个Adapter (适配器)将我们的View和ViewPager进行绑定。</p>
</blockquote>
<h2 id="View的布局"><a href="#View的布局" class="headerlink" title="View的布局"></a>View的布局</h2><p>首先是每个View的布局 ，新建三个布局：fragment_me.xml，fragment_news.xml，fragment_toolbox.xml。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@color/shallowgreen&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;70sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Me!&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面是fragment_me.xml的代码，另外两个都是类似的，稍微修改就行。</p>
<h2 id="编写activity-main-xml布局"><a href="#编写activity-main-xml布局" class="headerlink" title="编写activity_main.xml布局"></a>编写activity_main.xml布局</h2><p>然后编写activity_main.xml布局。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.viewpager.widget.ViewPager</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/viewPager&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.tabs.TabLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tabLayout&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;55dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:tabIndicatorHeight</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:tabRippleColor</span>=<span class="string">&quot;@android:color/transparent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里在布局文件中加入了ViewPager控件 ，除此之外还添加了TabLayout控件。<br>Tablayout继承自HorizontalScrollView，用作页面切换指示器，因使用简便功能强大而广泛使用在App中。<br>然后Tablayout这里需要新建一个布局tablayout.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;45dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:ignore</span>=<span class="string">&quot;UseCompoundDrawables&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/TabIcon&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;30dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/TabText&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;15sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/gray&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="新建类"><a href="#新建类" class="headerlink" title="新建类"></a>新建类</h2><p>接下来分别新建三个类：Me.java，News.java，Toolbox.java。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Me</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//引入布局，获取控件的实例</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="line"><span class="params">                             Bundle savedInstanceState)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> inflater.inflate(R.layout.fragment_me,container,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点击对应按钮后的操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 上面是Me.java的代码，另外两个与此类似。</p>
<h2 id="设置适配器"><a href="#设置适配器" class="headerlink" title="设置适配器"></a>设置适配器</h2><p>然后，我们需要给ViewPager设置适配器 。</p>
<p>新建一个ViewPagerAdapter：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewPagerAdapter</span> <span class="keyword">extends</span> <span class="title class_">FragmentPagerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面导航栏的名字</span></span><br><span class="line">    <span class="keyword">private</span> String[] name = &#123;<span class="string">&quot;工具&quot;</span>,<span class="string">&quot;消息&quot;</span>,<span class="string">&quot;我的&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//导航栏对应的图标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] icon = &#123;R.drawable.test1,R.drawable.test3,R.drawable.test5&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//适配器的参数，Context和FragmentManager</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ViewPagerAdapter</span><span class="params">(Context mContext, FragmentManager fm)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(fm);</span><br><span class="line">        <span class="built_in">this</span>.mContext = mContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建导航栏碎片</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Fragment <span class="title function_">getItem</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">Fragment</span> <span class="variable">fragment</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (position) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                fragment = <span class="keyword">new</span> <span class="title class_">Toolbox</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                fragment = <span class="keyword">new</span> <span class="title class_">News</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                fragment = <span class="keyword">new</span> <span class="title class_">Me</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取名字长度，name是自己创建的字符数组</span></span><br><span class="line">    <span class="comment">//获取字符串个数</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取名字的位置，这里只有三个，所以是0,1,2</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CharSequence <span class="title function_">getPageTitle</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name[position];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对tablayout的两个控件进行处理，进行初始化工作</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getTabView</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">v</span> <span class="operator">=</span> LayoutInflater.from(mContext).inflate(R.layout.tablayout,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">ImageView</span> <span class="variable">Icon</span> <span class="operator">=</span> v.findViewById(R.id.TabIcon);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">Text</span> <span class="operator">=</span> v.findViewById(R.id.TabText);</span><br><span class="line">        Icon.setImageResource(icon[position]);<span class="comment">//设置图片</span></span><br><span class="line">        Text.setText(name[position]);<span class="comment">//设置文字</span></span><br><span class="line">        <span class="comment">//初始情况就是第一个会默认变色，所以要单独处理</span></span><br><span class="line">        <span class="keyword">if</span> (position==<span class="number">0</span>) &#123;</span><br><span class="line">            Icon.setImageResource(R.drawable.test2);</span><br><span class="line">            Text.setTextColor(v.getResources().getColor(R.color.blue));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，ViewPagerAdapter 继承 FragmentPagerAdapter。</p>
<blockquote>
<p>FragmentPagerAdapter 继承自 PagerAdapter。相比通用的 PagerAdapter，该类更专注于每一页均为 Fragment 的情况。 该类内的每一个生成的 Fragment 都将保存在内存之中，因此适用于那些相对静态的页，数量也比较少的那种;FragmentPagerAdapter 重载实现了几个必须的函数，因此来自 PagerAdapter 的函数，我们只需要实现 getCount()即可。且，由于 FragmentPagerAdapter.instantiateItem() 的实现中，调用了一个新增的虚函数 getItem()，因此，我们还至少需要实现一个 getItem()。因此，总体上来说，相对于继承自 PagerAdapter，更方便一些。</p>
</blockquote>
<h2 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h2><p>最后就是MainActivity的修改了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    TabLayout tabLayout;</span><br><span class="line">    ViewPager viewPager;</span><br><span class="line">    ViewPagerAdapter viewPagerAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取实例</span></span><br><span class="line">        viewPager = findViewById(R.id.viewPager);</span><br><span class="line">        tabLayout = findViewById(R.id.tabLayout);</span><br><span class="line">        <span class="comment">//设置适配器</span></span><br><span class="line">        viewPagerAdapter = <span class="keyword">new</span> <span class="title class_">ViewPagerAdapter</span>(<span class="built_in">this</span>,getSupportFragmentManager());</span><br><span class="line">        viewPager.setAdapter(viewPagerAdapter);</span><br><span class="line">        <span class="comment">//将下面的tablayout导航栏和viewpager进行关联</span></span><br><span class="line">        tabLayout.setupWithViewPager(viewPager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//图标文字初始化设置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tabLayout.getTabCount(); i++) &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;ViewPager&quot;</span>,i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            Objects.requireNonNull(tabLayout.getTabAt(i)).setCustomView(viewPagerAdapter.getTabView(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对tablayout进行监听</span></span><br><span class="line">        tabLayout.setOnTabSelectedListener(<span class="keyword">new</span> <span class="title class_">TabLayout</span>.OnTabSelectedListener() &#123;</span><br><span class="line">            ImageView imageView;</span><br><span class="line">            <span class="comment">//tablayout选中时的操作</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTabSelected</span><span class="params">(TabLayout.Tab tab)</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> (tab.getPosition()) &#123;</span><br><span class="line">                    <span class="comment">//根据位置，对图标进行设置</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        imageView = tab.getCustomView().findViewById(R.id.TabIcon);</span><br><span class="line">                        imageView.setImageResource(R.drawable.test2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        imageView = tab.getCustomView().findViewById(R.id.TabIcon);</span><br><span class="line">                        imageView.setImageResource(R.drawable.test4);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        imageView = tab.getCustomView().findViewById(R.id.TabIcon);</span><br><span class="line">                        imageView.setImageResource(R.drawable.test6);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Log.d(<span class="string">&quot;ViewPager&quot;</span>,tab.getPosition()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="comment">//获取tabtext，对文字的颜色进行设置</span></span><br><span class="line">                <span class="type">TextView</span> <span class="variable">textView</span> <span class="operator">=</span> tab.getCustomView().findViewById(R.id.TabText);</span><br><span class="line">                textView.setTextColor(getResources().getColor(R.color.blue));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//tablayout未选中时的操作</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTabUnselected</span><span class="params">(TabLayout.Tab tab)</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> (tab.getPosition()) &#123;</span><br><span class="line">                    <span class="comment">//根据位置，对图标进行设置</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        imageView = tab.getCustomView().findViewById(R.id.TabIcon);</span><br><span class="line">                        imageView.setImageResource(R.drawable.test1);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        imageView = tab.getCustomView().findViewById(R.id.TabIcon);</span><br><span class="line">                        imageView.setImageResource(R.drawable.test3);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        imageView = tab.getCustomView().findViewById(R.id.TabIcon);</span><br><span class="line">                        imageView.setImageResource(R.drawable.test5);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//获取tabtext，对文字的颜色进行设置</span></span><br><span class="line">                <span class="type">TextView</span> <span class="variable">textView</span> <span class="operator">=</span> tab.getCustomView().findViewById(R.id.TabText);</span><br><span class="line">                textView.setTextColor(getResources().getColor(R.color.gray));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//tablayout再次被选中时的操作</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTabReselected</span><span class="params">(TabLayout.Tab tab)</span> &#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>,<span class="string">&quot;You clicked again&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>《软件工程》复习</title>
    <url>/2023/02/09/%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E3%80%8B%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>软件工程的一些概念</p>
<h2 id="SE1-1-程序及质量保证方法"><a href="#SE1-1-程序及质量保证方法" class="headerlink" title="SE1.1 程序及质量保证方法"></a>SE1.1 程序及质量保证方法</h2><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><p><strong>程序</strong>（Program）是由程序设计语言所描述的、能为计算机所理解和处理的一组语句序列 </p>
<h3 id="外在-External-质量"><a href="#外在-External-质量" class="headerlink" title="外在(External)质量"></a>外在(External)质量</h3><ul>
<li><strong>用户</strong>视点</li>
<li>对外可展示，用户可直接感触到、所关心的</li>
<li><strong>使用流畅性、响应速度、界面美观、操作简易性、运行可靠性等</strong></li>
</ul>
<h3 id="内在-Internal-质量"><a href="#内在-Internal-质量" class="headerlink" title="内在(Internal)质量"></a>内在(Internal)质量</h3><ul>
<li><strong>程序员</strong>视点</li>
<li>体现在程序的内在方面，程序员可以感触到的、所关心的</li>
<li><strong>易于理解、结构清晰、易于修改、可重用好</strong></li>
</ul>
<h3 id="何为代码重用"><a href="#何为代码重用" class="headerlink" title="何为代码重用"></a>何为代码重用</h3><ul>
<li>在编写代码过程中，充分利用已有和现成的代码，并将其集成到程序之中，从而来实现程序功能</li>
</ul>
<h3 id="代码重用有何好处"><a href="#代码重用有何好处" class="headerlink" title="代码重用有何好处"></a>代码重用有何好处</h3><ul>
<li>由于被重用的代码经过多次反复的使用，代码质量得到充分检验，因而代码重用不仅可极大提高编程效率，而且还可有效提高程序质量</li>
</ul>
<h3 id="结对编程带来的好处"><a href="#结对编程带来的好处" class="headerlink" title="结对编程带来的好处"></a>结对编程带来的好处</h3><ul>
<li>提高程序质量<ul>
<li>提供更好的设计质量和代码质量</li>
<li>合作解决问题能力强，1+1 &gt; 2</li>
</ul>
</li>
<li>提升开发效率<ul>
<li>开发人员更加信心</li>
<li>有效地避免了闭门造车</li>
<li>更易于发现问题和纠正问题</li>
</ul>
</li>
<li>促进学习交流<ul>
<li>有效的学习，做中学效果更好</li>
<li>相互学习和分享经验</li>
<li>更好应对人员流动，一个走了另一个人可以替换上</li>
</ul>
</li>
</ul>
<h3 id="自动化代码分析工具"><a href="#自动化代码分析工具" class="headerlink" title="自动化代码分析工具"></a><strong>自动化代码分析工具</strong></h3><ul>
<li><p>SonarQube</p>
<p>基于Web、用于管理程序代码质量的代码分析工具</p>
<p><a href="http://www.sonarqube.org/">www.sonarqube.org</a> </p>
<p>能以插件的形式集成到众多的软件开发环境（如Eclipse）</p>
</li>
<li><p>CheckStyle</p>
</li>
<li><p>FindBugs，</p>
</li>
<li><p>PMD</p>
</li>
<li><p>Jtest</p>
</li>
<li><p>……</p>
</li>
</ul>
<h3 id="SonarQube可分析的质量问题"><a href="#SonarQube可分析的质量问题" class="headerlink" title="SonarQube可分析的质量问题"></a>SonarQube可分析的质量问题</h3><ul>
<li>是否违反编码规则</li>
<li>是否存在静态常规缺陷</li>
<li>模块、方法、类的复杂度是否过高</li>
<li>是否存在重复的代码</li>
<li>代码的注释是否恰当和充分</li>
<li>统计和分析代码的单元测试覆盖率</li>
<li>判断软件体系结构设计是否合理</li>
</ul>
<h2 id="SE1-2-软件及其特点"><a href="#SE1-2-软件及其特点" class="headerlink" title="SE1.2 软件及其特点"></a>SE1.2 软件及其特点</h2><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p><strong>软件</strong>是指在计算机系统的支持下，能够完成特定功能与性能的程序、数据和相关文档</p>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p><strong>文档</strong>：记录软件开发活动和阶段性成果、软件配置及变更的阐述性资料</p>
<h3 id="软件生命周期"><a href="#软件生命周期" class="headerlink" title="软件生命周期"></a><strong>软件生命周期</strong></h3><ul>
<li><strong>软件从提出开发开始到最终灭亡所经历的时期</strong></li>
<li>不同阶段具有不同的特征</li>
</ul>
<h3 id="软件特点"><a href="#软件特点" class="headerlink" title="软件特点"></a><strong>软件特点</strong></h3><ul>
<li><p>逻辑性</p>
</li>
<li><p>设计开发</p>
</li>
<li><p>易变性</p>
</li>
<li><p>复杂性</p>
</li>
<li><p>缺陷的隐蔽性</p>
</li>
</ul>
<h3 id="软件的分类"><a href="#软件的分类" class="headerlink" title="软件的分类"></a><strong>软件的分类</strong></h3><ul>
<li><p>应用软件</p>
<ul>
<li><p>面向特定应用领域的专用软件。它们针对相关行业和领域的特定问题，为其提供基于计算的新颖解决方案。</p>
</li>
<li><p>示例：淘宝、12306、携程、微信、QQ等软件</p>
</li>
</ul>
</li>
<li><p>系统软件</p>
<ul>
<li>对计算机资源进行管理，为应用软件的运行提供基础设施和服务的一类软件。从计算服务的视角，系统软件介于计算机硬件和应用软件之间。</li>
<li>示例：操作系统、数据库管理系统、编译软件、软件中间件等</li>
</ul>
</li>
<li><p>支撑软件</p>
<ul>
<li>辅助软件开发和运维，帮助开发人员完成软件开发和维护工作的一类软件</li>
<li>示例：SonarQube、Visual Studio、Eclipse等</li>
</ul>
</li>
</ul>
<h3 id="何为闭源软件"><a href="#何为闭源软件" class="headerlink" title="何为闭源软件"></a>何为<strong>闭源软件</strong></h3><ul>
<li>软件代码不对用户开放的一类软件，购买软件时只提供可运行软件或服务，没有提供源代码</li>
<li>以许可证（License）的方式授权用户使用软件</li>
</ul>
<h3 id="何为开源软件"><a href="#何为开源软件" class="headerlink" title="何为开源软件"></a>何为<strong>开源软件</strong></h3><ul>
<li>一种源代码可以自由获取和传播的计算机软件，其拥有者通过开源许可证赋予被许可人对软件进行使用、修改和传播</li>
</ul>
<h3 id="开源软件的好处"><a href="#开源软件的好处" class="headerlink" title="开源软件的好处"></a>开源软件的好处</h3><ul>
<li>源代码可自由传播</li>
<li>激发创作者的热情</li>
<li>免费使用降低成本</li>
</ul>
<h3 id="开源软件的优势"><a href="#开源软件的优势" class="headerlink" title="开源软件的优势"></a>开源软件的优势</h3><ul>
<li>采购和开发的成本更低<ul>
<li>开源软件通常是免费的，即使要付费，其费用也非常低廉</li>
</ul>
</li>
<li>软件质量更高、更安全<ul>
<li>核心代码都在公众的视野之中，代码问题（如缺陷、安全漏洞等）很容易被人发现</li>
</ul>
</li>
<li>软件研制和交付的更快<ul>
<li>基于开源软件的项目开发可以更为快速地给用户交付软件产品</li>
</ul>
</li>
<li>软件功能更为强大<ul>
<li>大量的软件开发者不仅参与软件开发，贡献他们的代码，而且还参与软件的创新，提出和构思软件需求，不断完善软件功能</li>
</ul>
</li>
</ul>
<h3 id="软件质量要素"><a href="#软件质量要素" class="headerlink" title="软件质量要素"></a>软件质量要素</h3><ul>
<li><p>正确性（Correctness）</p>
<ul>
<li>软件满足规格说明和用户要求的程度，即在预定环境下能正确地完成预期功能和非功能需求的程度。</li>
</ul>
</li>
<li><p>可靠性（Reliability）</p>
<ul>
<li>在规定条件下、限定时间范围内，软件系统完成预期功能、不引起系统故障的能力。</li>
</ul>
</li>
<li><p>健壮性（Robustness）</p>
<ul>
<li>在计算环境发生故障、输入无效数据或操作错误等意外情况下，软件仍能做出适当响应的程度。</li>
</ul>
</li>
<li><p>有效性（Efficiency）</p>
<ul>
<li>软件利用计算资源和存储资源以实现其功能的能力。</li>
</ul>
</li>
<li><p>安全性</p>
<ul>
<li>包括系统安全（Safety）和信息安全（Security），系统安全是指软件能及时有效地避免给人员、设施、环境、经济等造成损害，信息安全是指软件能有效防控各类的非法获取、传播和使用</li>
</ul>
</li>
<li><p>可维护性（Maintainability）</p>
<ul>
<li>是否易于对其进行修改以更正错误、增强功能、适应新运行环境</li>
</ul>
</li>
<li><p>可移植性（Portability）</p>
<ul>
<li>把软件从一种运行环境转移到另一种运行环境下运行的难易程度</li>
</ul>
</li>
<li><p>可重用性（Reusability）</p>
<ul>
<li>软件模块、构件、设计方案等在其他软件开发中被再次使用程度</li>
</ul>
</li>
<li><p>可理解性（Comprehensibility）</p>
<ul>
<li>软件开发者或用户理解该软件系统的容易程度</li>
</ul>
</li>
<li><p>可信性（Dependability）</p>
<ul>
<li>采取有效措施确认软件满足人们的要求和期望</li>
</ul>
</li>
<li><p>持续性（Sustainability）</p>
<ul>
<li>面对各种突发异常事件，仍能提供令人满意的服务的能力</li>
</ul>
</li>
<li><p>可用性（Usability）</p>
<ul>
<li>使用和操作软件系统难以程度</li>
</ul>
</li>
<li><p>互操作性（Interoperability）</p>
<ul>
<li>软件系统与其他的系统进行交换信息、协同工作的能力</li>
</ul>
</li>
</ul>
<h2 id="SE2-软件工程概述"><a href="#SE2-软件工程概述" class="headerlink" title="SE2 软件工程概述"></a>SE2 软件工程概述</h2><h3 id="软件危机的出现"><a href="#软件危机的出现" class="headerlink" title="软件危机的出现"></a>软件危机的出现</h3><ul>
<li>开发成本高</li>
<li>进度难以控制</li>
<li>质量难以保证</li>
<li>软件维护困难</li>
<li>失败风险很大</li>
</ul>
<h3 id="软件工程的诞生"><a href="#软件工程的诞生" class="headerlink" title="软件工程的诞生"></a>软件工程的诞生</h3><ul>
<li>时间：1968年</li>
<li>地点：西德南部小城</li>
<li>事件：NATO科技委出资召开的会议</li>
<li>人物： 11 个国家 50 位代表参加</li>
<li>主题：如何解决软件危机</li>
<li>成果：提出了软件工程</li>
</ul>
<h3 id="何为软件工程"><a href="#何为软件工程" class="headerlink" title="何为软件工程"></a>何为软件工程</h3><p>将系统的、规范的、可量化的方法应用于软件的开发、运行和维护的过程；以及上述方法的研究 –  [IEEE 93] </p>
<h3 id="软件工程的三要素"><a href="#软件工程的三要素" class="headerlink" title="软件工程的三要素"></a>软件工程的三要素</h3><ul>
<li>过程</li>
<li>方法学</li>
<li>工具</li>
</ul>
<h3 id="软件开发的本质"><a href="#软件开发的本质" class="headerlink" title="软件开发的本质"></a>软件开发的本质</h3><p>软件开发 &#x3D; 软件创作 + 软件生产 </p>
<p>软件创作：基于软件开发者的经验和技能，借助于智慧，进行自由创新，如软件设计、编码实现等 </p>
<p>软件生产：基于工程化的手段，遵循约束和规范，开展软件生产，如遵循过程、按照标准、质量保证等</p>
<h3 id="软件工程的目标"><a href="#软件工程的目标" class="headerlink" title="软件工程的目标"></a>软件工程的目标</h3><p>在成本、进度等约束下，指导软件开发和运维，开发出满足用户要求的足够好软件 </p>
<h3 id="软件工程原则"><a href="#软件工程原则" class="headerlink" title="软件工程原则"></a>软件工程原则</h3><ul>
<li>抽象和建模 </li>
<li>模块化</li>
<li>软件重用</li>
<li>信息隐藏</li>
<li>关注点分离</li>
<li>分而治之</li>
<li>双向追踪原则</li>
<li>工具辅助</li>
</ul>
<h2 id="SE3-1-软件过程模型"><a href="#SE3-1-软件过程模型" class="headerlink" title="SE3.1 软件过程模型"></a>SE3.1 软件过程模型</h2><h3 id="软件开发的特点"><a href="#软件开发的特点" class="headerlink" title="软件开发的特点"></a>软件开发的特点</h3><ul>
<li>基于智力的协作过程</li>
<li>软件项目内在复杂性</li>
<li>循序渐进的开发过程</li>
</ul>
<h3 id="软件过程"><a href="#软件过程" class="headerlink" title="软件过程"></a>软件过程</h3><ul>
<li>过程(Process)<ul>
<li>活动：明确要做哪些事情，包括具体的活动</li>
<li>关系：活动间存在逻辑关系，如依赖和先后次序</li>
<li>示例：考研的过程</li>
</ul>
</li>
<li>软件过程(Software Process)<ul>
<li>按照项目进度、成本和质量要求，遵循用户需求，开发和维护软件、管理软件项目的一系列有序软件开发活动</li>
<li>软件开发活动：技术活动和管理活动</li>
</ul>
</li>
</ul>
<h3 id="软件过程模型"><a href="#软件过程模型" class="headerlink" title="软件过程模型"></a>软件过程模型</h3><ul>
<li>软件过程模型(Software Process Model)<ul>
<li>定义了软件开发的具体活动以及活动间的逻辑关系</li>
</ul>
</li>
</ul>
<h3 id="瀑布模型-Waterfall-Model"><a href="#瀑布模型-Waterfall-Model" class="headerlink" title="瀑布模型(Waterfall Model )"></a>瀑布模型(Waterfall Model )</h3><ul>
<li>特点<ul>
<li>与软件生命周期相互一致</li>
<li>每个活动结束后需要评审</li>
<li>相邻活动间存在因果关系</li>
</ul>
</li>
<li>优点<ul>
<li>简单，一目了然，易理解、掌握、应用和管理</li>
</ul>
</li>
</ul>
<p>适合于需求易于定义、不易变动的软件系统 </p>
<h3 id="改进的瀑布模型：带反馈和回溯"><a href="#改进的瀑布模型：带反馈和回溯" class="headerlink" title="改进的瀑布模型：带反馈和回溯"></a>改进的瀑布模型：带反馈和回溯</h3><ul>
<li>后期活动发现有问题后，可返回到前面活动加以解决</li>
<li>提高了过程模型的灵活性</li>
</ul>
<p>不足</p>
<ul>
<li>软件开发处于动荡之中</li>
<li>需等到所有功能实现后，才能得到可运行软件</li>
</ul>
<h3 id="增量模型-Incremental-Model"><a href="#增量模型-Incremental-Model" class="headerlink" title="增量模型(Incremental Model)"></a>增量模型(Incremental Model)</h3><ul>
<li>渐进式、增量式地实现软件功能</li>
<li>优点：渐进快速交付，并行开发，提高效率</li>
<li>不足<ul>
<li>软件需求可确定且不易于变化</li>
</ul>
</li>
</ul>
<h3 id="迭代模型-Iterative-Model"><a href="#迭代模型-Iterative-Model" class="headerlink" title="迭代模型(Iterative Model)"></a>迭代模型(Iterative Model)</h3><p>每次迭代完成部分可确定的软件需求</p>
<ul>
<li>每次迭代是一完整过程</li>
<li>体现了小步快跑的开发理念</li>
<li>适合需求难导出、不易确定且持续变动的软件</li>
<li>不足<ul>
<li>迭代多少次不确定</li>
<li>管理较为复杂</li>
</ul>
</li>
</ul>
<h3 id="原型模型-Prototype-Model"><a href="#原型模型-Prototype-Model" class="headerlink" title="原型模型(Prototype Model)"></a>原型模型(Prototype Model)</h3><p>何为软件原型？</p>
<ul>
<li>用户界面</li>
<li>执行流程</li>
</ul>
<p>特点</p>
<ul>
<li>软件原型作为交流载体和媒介</li>
<li>支持用户参与到软件开发中</li>
<li>持续、渐进地导出用户要求</li>
</ul>
<p>适合于需求难导出、不易确定且持续变动的软件</p>
<h3 id="螺旋模型-Spiral-Model"><a href="#螺旋模型-Spiral-Model" class="headerlink" title="螺旋模型(Spiral Model)"></a>螺旋模型(Spiral Model)</h3><ul>
<li>集成迭代模型和原型模型</li>
<li>引入风险分析，风险驱动的过程模型</li>
<li>每个迭代四个阶段，若干活动</li>
<li>适合于需求不明确、开发风险高、开发过程中需求变更大的软件项目</li>
<li>不足：管理复杂</li>
</ul>
<blockquote>
<p>软件风险</p>
<ul>
<li>使软件开发受到影响和损失、甚至导致失败的、可能会发生的事件</li>
</ul>
</blockquote>
<h3 id="不同软件过程模型的特点"><a href="#不同软件过程模型的特点" class="headerlink" title="不同软件过程模型的特点"></a>不同软件过程模型的特点</h3><table>
<thead>
<tr>
<th>模型名称</th>
<th>指导思想</th>
<th>关注点</th>
<th>适合软件</th>
<th>管理难度</th>
</tr>
</thead>
<tbody><tr>
<td>瀑布模型</td>
<td>提供系统性指导</td>
<td>与软件生命周期相一致</td>
<td>需求变动不大、较为明确、可预先定义的应用</td>
<td>易</td>
</tr>
<tr>
<td>原型模型</td>
<td>以原型为媒介指导用户的需求导出和评价</td>
<td>需获取、导出和确认</td>
<td>理解需求难以表述清楚、不易导出和获取的应用</td>
<td>易</td>
</tr>
<tr>
<td>增量模型</td>
<td>快速交付和并行开发</td>
<td>软件详细设计、编码和测试的增量式完成</td>
<td>需求变动不大、较为明确、可预先定义的应用</td>
<td>易</td>
</tr>
<tr>
<td>迭代模型</td>
<td>多次迭代，每次仅针对部分明确软件需求</td>
<td>分多次迭代来开发软件，每次仅关注部分需求</td>
<td>需求变动大、难以一次性说清楚的应用</td>
<td>中等</td>
</tr>
<tr>
<td>螺旋模型</td>
<td>集成迭代模型和原型模型，引入风险分析</td>
<td>软件计划制定和实施，软件风险管理，基于原型的迭代式开发</td>
<td>开发风险大，需求难以确定的应用</td>
<td>难</td>
</tr>
</tbody></table>
<h3 id="敏捷软件开发方法-Agile-Method"><a href="#敏捷软件开发方法-Agile-Method" class="headerlink" title="敏捷软件开发方法(Agile Method)"></a>敏捷软件开发方法(Agile Method)</h3><ul>
<li>重视人和交互、重视可运行软件系统、重视客户合作、重视响应用户需求变化</li>
<li>少写软件文档，以代码为中心，快速响应变化</li>
</ul>
<h2 id="SE3-2-敏捷开发方法"><a href="#SE3-2-敏捷开发方法" class="headerlink" title="SE3.2 敏捷开发方法"></a>SE3.2 敏捷开发方法</h2><h3 id="什么是敏捷（Agile）方法"><a href="#什么是敏捷（Agile）方法" class="headerlink" title="什么是敏捷（Agile）方法"></a>什么是敏捷（Agile）方法</h3><ul>
<li>一种轻量级软件开发方法<ul>
<li>相对于重量级的软件开发方法而言</li>
</ul>
</li>
<li>主张软件开发要以代码为中心，快速、轻巧和主动应对需求变化，持续、及时交付可运行的软件系统<ul>
<li>轻便、轻巧</li>
</ul>
</li>
<li>提供了一组思想和策略，指导快速响应用户需求的变化，快速交付可运行的软件制品</li>
</ul>
<h3 id="敏捷开发方法的基本观点"><a href="#敏捷开发方法的基本观点" class="headerlink" title="敏捷开发方法的基本观点"></a>敏捷开发方法的基本观点</h3><ul>
<li>较之于过程和工具，应更加重视人和交互的价值</li>
<li>较之于面面俱到文档，应更加重视可运行软件系统的价值</li>
<li>较之于合同谈判，应更加重视客户合作的价值</li>
<li>较之于遵循计划，应更加重视响应用户需求变化的价值</li>
</ul>
<h3 id="敏捷准则"><a href="#敏捷准则" class="headerlink" title="敏捷准则"></a>敏捷准则</h3><ul>
<li>尽早和持续地交付有价值的软件，以使用户满意</li>
<li>即使到了软件开发后期，也欢迎用户需求的变化</li>
<li>不断交付可运行的软件系统，交付周期可以从几周到几个月</li>
<li>在整个软件项目开发期间，用户和开发人员最好能每天一起工作</li>
<li>由积极主动的人来承担项目开发，给他们提供所需环境和支持，信任他们的能力</li>
<li>团队内部最有效的信息传递方式是面对面的交谈</li>
<li>将可运行软件作为衡量软件开发进度的首要标准</li>
<li>可持续性的开发，出资方、开发方和用户方应当保持长期、恒定的开发速度</li>
<li>关注优秀的技能和良好的设计会增强敏捷性</li>
<li>简单化</li>
<li>最好的架构、需求和设计出自于自组织的团队</li>
<li>软件开发团队应定期就如何提高工作效率的问题进行反思，并进行相应的调整</li>
</ul>
<h3 id="极限编程的基本思想"><a href="#极限编程的基本思想" class="headerlink" title="极限编程的基本思想"></a>极限编程的基本思想</h3><ul>
<li>由Kent Beck提出的一种特殊的敏捷软件开发方法</li>
<li>四条核心思想<ul>
<li>交流，强调基于口头（而非文档、报表和计划）的交流</li>
<li>反馈，通过持续、明确反馈来获得软件状态</li>
<li>简单，用最简单的技术来解决问题</li>
<li>勇气，快速开发并在必要时具有重新进行开发的信心</li>
</ul>
</li>
<li>将经过数十年检验的准则结合在一起，定义了五条指导性原则和十二条须遵循的核心准则</li>
</ul>
<h3 id="Scrum方法"><a href="#Scrum方法" class="headerlink" title="Scrum方法"></a>Scrum方法</h3><p>旨在通过增量或迭代的方式加强软件项目的管理</p>
<h3 id="Scrum方法的大致流程"><a href="#Scrum方法的大致流程" class="headerlink" title="Scrum方法的大致流程"></a>Scrum方法的大致流程</h3><ul>
<li>首先，产品拥有者需创建软件产品订单库即“Backblog”<ul>
<li>描述软件产品需提供的功能需求以及它们的优先级排序</li>
</ul>
</li>
<li>其次，筛选出最应该实现的软件需求，<ul>
<li>Scrum主人基于“Backblog”中各项软件需求及其优先级，形成待实现的软件产品冲刺订单库，即“SprintLog”</li>
</ul>
</li>
<li>然后，软件开发将进入冲刺“Sprint”周期<ul>
<li>以实现选定软件订单，每个冲刺就是一次增量开发，一般持续1到4周</li>
</ul>
</li>
<li>最后，共同开展Scrum评审<ul>
<li>一次冲刺完成后，每个团队成员演示自己的开发成果，大家共同审查成果是否高质量地实现了既定功能，并就其中的问题进行反思，以指导和改进下一次冲刺</li>
</ul>
</li>
</ul>
<h3 id="敏捷方法的特点"><a href="#敏捷方法的特点" class="headerlink" title="敏捷方法的特点"></a>敏捷方法的特点</h3><ul>
<li><p>小</p>
<ul>
<li>生成少量软件文档，每个文档规模要小</li>
<li>每次迭代要实现软件功能的数量和规模要小，迭代周期要小</li>
</ul>
</li>
<li><p>简</p>
<ul>
<li>技术、工具以及每次迭代要解决的问题尽可能简单</li>
</ul>
<p>ü只关注当前欲实现的功能需求，而不要考虑将来的问题</p>
</li>
<li><p>快</p>
<ul>
<li>快速响应变化、从用户处获得反馈，给用户提交有价值软件，对软件产品进行迭代和更新</li>
</ul>
</li>
<li><p>变</p>
<ul>
<li>允许需求动态变化，要以变应变，开发团队应是自组织的</li>
</ul>
</li>
</ul>
<h2 id="SE3-3-群体化软件开发方法"><a href="#SE3-3-群体化软件开发方法" class="headerlink" title="SE3.3 群体化软件开发方法"></a>SE3.3 群体化软件开发方法</h2><h3 id="闭源软件"><a href="#闭源软件" class="headerlink" title="闭源软件"></a>闭源软件</h3><ul>
<li>何为闭源软件<ul>
<li>软件代码不对用户开放的一类软件，购买软件时只提供可运行软件或服务，没有提供源代码</li>
<li>以使用许可证（License）的方式授权用户使用软件</li>
</ul>
</li>
<li>闭源软件的特点<ul>
<li>无法获得源代码（无渠道）</li>
<li>无权使用源代码（合法性）</li>
</ul>
</li>
<li>闭源软件带来的问题<ul>
<li>无法掌握软件内部实现情况（如是否存在恶意代码），难可信；</li>
<li>无法修改和完善软件，影响了开发者的创新自由</li>
</ul>
</li>
</ul>
<h3 id="开源软件-Open-Source-Software"><a href="#开源软件-Open-Source-Software" class="headerlink" title="开源软件(Open Source Software)"></a>开源软件(Open Source Software)</h3><ul>
<li>何为开源软件<ul>
<li>一种源代码可以自由获取和传播的计算机软件，其拥有者通过开源许可证赋予被许可人对软件进行使用、修改和传播</li>
</ul>
</li>
<li>开源软件的特点<ul>
<li>源程序代码对外开放</li>
<li>自由使用、修改和传播</li>
</ul>
</li>
<li>任何人都可获得开源软件的代码</li>
</ul>
<h3 id="何为群体化开发方法"><a href="#何为群体化开发方法" class="headerlink" title="何为群体化开发方法"></a>何为群体化开发方法</h3><ul>
<li>依托互联网平台来吸引、汇聚、组织和管理互联网上的大规模软件开发人员，通过竞争、合作、协商等多种自主协同方式，让他们参与软件开发、分享软件开发知识和成果、贡献智慧和力量的一种新颖软件开发方法</li>
</ul>
<h3 id="群体化软件开发方法的特点"><a href="#群体化软件开发方法的特点" class="headerlink" title="群体化软件开发方法的特点"></a>群体化软件开发方法的特点</h3><ul>
<li><p>软件开发边界开放</p>
</li>
<li><p>互联网大众自由参与</p>
</li>
<li><p>利用海量的大众资源</p>
</li>
<li><p>共享源程序代码</p>
</li>
<li><p>兼顾软件创作和生产</p>
</li>
<li><p>依托互联网平台</p>
</li>
</ul>
<h3 id="基于P-x2F-R分布式协同开发技术的优势"><a href="#基于P-x2F-R分布式协同开发技术的优势" class="headerlink" title="基于P&#x2F;R分布式协同开发技术的优势"></a>基于P&#x2F;R分布式协同开发技术的优势</h3><ul>
<li>简单<ul>
<li>使用门槛低，开发人员可方便地贡献代码、评论他人贡献，极大提高了开发人员参与软件项目开发的积极性</li>
</ul>
</li>
<li>规范<ul>
<li>PR机制提供了规范化的协同开发流程，促进互联网上大众群体围绕代码贡献的交流与合作，并与大众评论、软件测试、代码审查等环节结合在一起，确保了软件开发质量</li>
</ul>
</li>
<li>透明<ul>
<li>所有软件开发历史信息和社交活动信息都会保留下来，在开发人员主页或软件项目主页中展现</li>
</ul>
</li>
</ul>
<h2 id="SE3-4-Git介绍及使用"><a href="#SE3-4-Git介绍及使用" class="headerlink" title="SE3.4 Git介绍及使用"></a>SE3.4 Git介绍及使用</h2><h3 id="什么是版本控制（Revision-Control）-？"><a href="#什么是版本控制（Revision-Control）-？" class="headerlink" title="什么是版本控制（Revision Control） ？"></a>什么是版本控制（Revision Control） ？</h3><ul>
<li>版本控制是对计算机程序、文档、数据等的更改和管理，它是软件配置管理的重要组成部分<ul>
<li>实现跨区域、多人的协同开发  </li>
<li>记载和追踪一个或者多个文件的历史记录</li>
<li>组织和保护软件制品：源代码和文档</li>
<li>统计软件开发工作量</li>
<li>跟踪记录软件开发过程</li>
</ul>
</li>
</ul>
<h3 id="集中式版本控制"><a href="#集中式版本控制" class="headerlink" title="集中式版本控制"></a>集中式版本控制</h3><ul>
<li>版本库集中存放在中央服务器之中</li>
<li>开发前先从中央服务器取得最新版本</li>
<li>开发完再把自己的工作推送给中央服务器</li>
<li>中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完后再放回图书馆</li>
</ul>
<p>典型系统：CVS、SVN、ClearCase </p>
<p>特点：高度依赖中央服务器、速度慢、难以有效支持协同开发 </p>
<h3 id="分布式版本控制"><a href="#分布式版本控制" class="headerlink" title="分布式版本控制"></a>分布式版本控制</h3><ul>
<li>有一个中央仓库</li>
<li>开发前通过克隆在本机上拷贝一个完整的软件仓库</li>
<li>开发完把自己工作提交到本地仓库中</li>
<li>需要同步给协作者时再递交到中央仓库</li>
<li>版本库分步存储于各协作者电脑中</li>
</ul>
<p>典型系统：Git </p>
<p>优点：不依赖中央服务器、可在本地开发、有效支持协同开发</p>
<h3 id="Git的基本工作原理"><a href="#Git的基本工作原理" class="headerlink" title="Git的基本工作原理"></a>Git的基本工作原理</h3><ul>
<li>仓库（Repository）软件所有文件的完整修订历史</li>
<li>版本（Revision）代码库的编号方案，如Tag 0.1</li>
<li>分支（Branch）对代码库并行修改时的代码库副本<ul>
<li>如master, develop, branch1,…</li>
</ul>
</li>
<li>提交（Commit）对分支的一次修订</li>
<li>下拉（Pull）将远程的一个分支读取并保存到本地分支</li>
<li>推送（Push）将本地分支代码发送到远程某个分支</li>
<li>合并（Merge）将对相同文件在不同分支的修改合并到一个分支中</li>
<li>冲突（Conflict）当两个分支中存在对同一文件的不同修改，并试图合并这两个分支时，就会发生冲突</li>
</ul>
<h3 id="Git的操作"><a href="#Git的操作" class="headerlink" title="Git的操作"></a>Git的操作</h3><h4 id="创建本地版本库"><a href="#创建本地版本库" class="headerlink" title="创建本地版本库"></a>创建本地版本库</h4><p>命令：git init</p>
<ul>
<li>在执行完成 git init 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据</li>
<li>使用当前目录作为git仓库，直接在当前目录进行初始化</li>
<li>使用指定目录作为git仓库，在初始化命令之后加上指定目录路径，如 git init newrepo</li>
</ul>
<h4 id="克隆远程版本库"><a href="#克隆远程版本库" class="headerlink" title="克隆远程版本库"></a>克隆远程版本库</h4><p>git clone &lt;repo&gt; &lt;directory&gt;</p>
<ul>
<li>其中repo表示远程仓库目录，directory代表本地仓库目录</li>
<li>将远程仓库中的代码拷贝项目到本地仓库</li>
</ul>
<h4 id="在暂存区添加-x2F-撤销文件"><a href="#在暂存区添加-x2F-撤销文件" class="headerlink" title="在暂存区添加&#x2F;撤销文件"></a>在暂存区添加&#x2F;撤销文件</h4><p>git add [file1][file2] … or [dir] </p>
<ul>
<li>将文件添加到暂存区</li>
</ul>
<p>git checkout [file1]</p>
<ul>
<li>撤销不需要的修改：</li>
</ul>
<h4 id="提交修改到本地仓库"><a href="#提交修改到本地仓库" class="headerlink" title="提交修改到本地仓库"></a>提交修改到本地仓库</h4><p>git commit -m [message] </p>
<p>git commit [file1][file2] … -m [message]</p>
<ul>
<li>将暂存区内容添加到本地仓库中</li>
</ul>
<p>git log</p>
<ul>
<li>查看commit提交日志</li>
</ul>
<h4 id="添加远程版本库"><a href="#添加远程版本库" class="headerlink" title="添加远程版本库"></a>添加远程版本库</h4><p>git remote add “远程仓库名” “远程仓库地址”</p>
<ul>
<li>添加远程版本库</li>
</ul>
<h4 id="推送本地内容到远程仓库"><a href="#推送本地内容到远程仓库" class="headerlink" title="推送本地内容到远程仓库"></a>推送本地内容到远程仓库</h4><p>git push 远程仓库名 本地分支名 远程分支名</p>
<ul>
<li>将你的修改推送到远程仓库，便于测试或者和团队中其他人协作</li>
<li>推送本地内容时，会将所有未推送至远程仓库的内容，都提交到远程仓库</li>
</ul>
<h4 id="拉取远程分支到本地"><a href="#拉取远程分支到本地" class="headerlink" title="拉取远程分支到本地"></a>拉取远程分支到本地</h4><p>git pull 远程主机名 远程分支名:本地分支名</p>
<ul>
<li>在团队协作中，如果别人对项目做了修改，而你需要将这些修改合并到你本地时，需要使用git pull命令</li>
</ul>
<p>git pull 远程主机名 远程分支名:本地分支名 -f</p>
<ul>
<li>如果远程分支和本地分支对同一内容做了修改，这将导致将远程分支修改合并到本地分支时会发生冲突</li>
<li>可以选择直接强制拉取，使用远程分支的修改，覆盖本地分支的修改。强制拉取需要用到-f参数</li>
</ul>
<h2 id="SE4-软件需求分析基础"><a href="#SE4-软件需求分析基础" class="headerlink" title="SE4 软件需求分析基础"></a>SE4 软件需求分析基础</h2><h2 id="SE5-获取软件需求"><a href="#SE5-获取软件需求" class="headerlink" title="SE5 获取软件需求"></a>SE5 获取软件需求</h2><h2 id="SE6-分析软件需求"><a href="#SE6-分析软件需求" class="headerlink" title="SE6 分析软件需求"></a>SE6 分析软件需求</h2><h2 id="SE7-软件设计基础"><a href="#SE7-软件设计基础" class="headerlink" title="SE7 软件设计基础"></a>SE7 软件设计基础</h2><h3 id="何为软件设计？"><a href="#何为软件设计？" class="headerlink" title="何为软件设计？"></a>何为软件设计？</h3><ul>
<li>软件设计<ul>
<li>针对软件需求，综合考虑各种制约因素，探究软件实现的解决方案</li>
</ul>
</li>
<li>设计前提：软件需求<ul>
<li>定义了要做什么样的软件</li>
</ul>
</li>
<li>设计考虑：制约因素<ul>
<li>资源：时间、人力、财力、开发辅助工具</li>
<li>技术：技术平台，如DBMS还是文件系统</li>
</ul>
</li>
</ul>
<h3 id="软件设计的质量要求"><a href="#软件设计的质量要求" class="headerlink" title="软件设计的质量要求"></a>软件设计的质量要求</h3><ul>
<li>正确性<ul>
<li>正确实现所有的软件需求项；设计元素间无逻辑冲突；在技术平台和软件项目的可用资源约束条件下，采用程序设计语言可完整地实现设计模型</li>
</ul>
</li>
<li>充分性<ul>
<li>所有的设计元素已充分细化，模型易于理解，编程人员勿需再面对影响软件功能和质量的技术抉择或权衡</li>
</ul>
</li>
<li>优化性<ul>
<li>以合理的、充分优化的方式实现软件需求模型，目标软件产品能够表现出良好的软件质量属性，尤其是正确性、有效性、可靠性和可修改性</li>
</ul>
</li>
<li>简单性<ul>
<li>模型中的模块的功能或职责尽可能简明易懂，模块间的关系简单直观，模型的结构尽可能自然地反映待解软件问题的结构</li>
</ul>
</li>
</ul>
<h3 id="软件设计元素"><a href="#软件设计元素" class="headerlink" title="软件设计元素"></a>软件设计元素</h3><ul>
<li>设计类<ul>
<li>类既是最基本的设计单元，也是最基本的模块单元</li>
</ul>
</li>
<li>软构件<ul>
<li>可分离、可独立部署和执行、可单独重用的一类设计元素</li>
<li>如动态链接库（.DLL）、可运行的Java JAR包、微服务镜像等就属于软构件</li>
</ul>
</li>
<li>子系统<ul>
<li>完成特定功能、逻辑上相互关联的一组模块集合</li>
<li>有助于管理软件系统的复杂度，简化软件设计和实现</li>
</ul>
</li>
</ul>
<h3 id="软件设计要考虑的因素"><a href="#软件设计要考虑的因素" class="headerlink" title="软件设计要考虑的因素"></a>软件设计要考虑的因素</h3><ul>
<li>满足需求<ul>
<li>正确、一致、可行、完整、无冗余</li>
</ul>
</li>
<li>权衡抉择<ul>
<li>多种设计方案，明确优缺点，综合考虑多方因素</li>
<li>关注质量要求</li>
</ul>
</li>
<li>应对变化<ul>
<li>易于理解、扩展、高效</li>
</ul>
</li>
</ul>
<h3 id="软件设计基本原则"><a href="#软件设计基本原则" class="headerlink" title="软件设计基本原则"></a>软件设计基本原则</h3><p>①抽象与逐步求精</p>
<p>②模块化，高内聚度、低耦合度</p>
<p>③信息隐藏</p>
<p>④多视点和关注点分离</p>
<p>⑤软件重用</p>
<p>⑥迭代设计</p>
<p>⑦可追踪性</p>
<h3 id="软件设计的CASE工具"><a href="#软件设计的CASE工具" class="headerlink" title="软件设计的CASE工具"></a>软件设计的CASE工具</h3><ul>
<li>软件设计文档撰写工具<ul>
<li>如借助于Microsoft Office、WPS等</li>
</ul>
</li>
<li>软件设计建模工具<ul>
<li>如Microsoft Visio、StarUML、Argo UML等工具</li>
</ul>
</li>
<li>软件设计分析和转换工具<ul>
<li>如IBM Rational Rose等软件工具</li>
</ul>
</li>
<li>配置管理工具和平台<ul>
<li>如Git、Github、Gitlab、PVCS、Microsoft SourceSafe等，支持软件需求制品（如模型、文档等）的配置、版本管理、变化跟踪等</li>
</ul>
</li>
</ul>
<h3 id="软件设计的输出"><a href="#软件设计的输出" class="headerlink" title="软件设计的输出"></a>软件设计的输出</h3><ul>
<li>软件设计模型<ul>
<li>它从多个不同的视角、不同的抽象层次描述了软件的设计信息，并采用诸如UML、模块图、层次图等图形化的方式来加以刻画</li>
</ul>
</li>
<li>软件设计文档<ul>
<li>它采用自然语言的形式，结合软件设计模型，详细描述软件系统的各项设计，包括体系结构设计、子系统和构件设计、用户界面设计、用例设计、数据设计等等</li>
</ul>
</li>
</ul>
<h3 id="软件设计文档的规范"><a href="#软件设计文档的规范" class="headerlink" title="软件设计文档的规范"></a>软件设计文档的规范</h3><ul>
<li>文档概述</li>
<li>系统概述</li>
<li>设计目标和原则</li>
<li>设计约束和现实限制</li>
<li>体系结构设计</li>
<li>用户界面设计</li>
<li>子系统&#x2F;构件设计</li>
<li>用例设计</li>
<li>类设计</li>
<li>数据设计</li>
<li>接口设计</li>
</ul>
<h3 id="软件设计中的缺陷"><a href="#软件设计中的缺陷" class="headerlink" title="软件设计中的缺陷"></a>软件设计中的缺陷</h3><ul>
<li>设计未能满足需求<ul>
<li>对软件需求的理解存在偏差，未能正确地理解用户的软件需求，导致所设计的软件无法满足用户的需要</li>
</ul>
</li>
<li>设计质量低下<ul>
<li>设计过程中未能遵循设计原则、缺乏设计经验，导致软件设计质量低下，如设计的软件不易于维护和扩展</li>
</ul>
</li>
<li>设计存在不一致<ul>
<li>不同软件设计制品对同一个设计有不同的描述，或者存在不一致甚至相冲突的设计内容；多个不同软件设计要素之间存在不一致</li>
</ul>
</li>
<li>设计不够详尽<ul>
<li>未能提供设计细节性信息，导致程序员无法根据设计来开展编码工作</li>
</ul>
</li>
</ul>
<h3 id="软件设计的评审"><a href="#软件设计的评审" class="headerlink" title="软件设计的评审"></a>软件设计的评审</h3><ul>
<li>谁参与评审<ul>
<li>程序员、软件测试工程师、用户、质量保证人员、设计工程师等</li>
</ul>
</li>
<li>评审什么内容<ul>
<li>文档规范性，软件设计文档是否符合软件设计规格说明书</li>
<li>设计制品的可理解性，是否简洁、易于理解</li>
<li>设计内容的合法性，设计结果是否符合相关的标准、法律和法规</li>
<li>设计的质量水平，软件设计是否遵循设计原则，质量如何</li>
<li>设计是否满足需求，设计是否完整和正确地实现了软件需求</li>
<li>设计优化性，软件设计是否还有待优化的内容</li>
</ul>
</li>
</ul>
<h3 id="软件设计的管理"><a href="#软件设计的管理" class="headerlink" title="软件设计的管理"></a>软件设计的管理</h3><ul>
<li>软件设计的变更管理<ul>
<li>明确哪些方面发生了变更、这些变化反应在软件设计模型和文档的哪些部分、导致软件设计模型和文档的版本发生了什么样变化</li>
</ul>
</li>
<li>软件设计的追溯管理<ul>
<li>搞清楚是什么原因导致了软件设计的变更，评估设计变更的影响域，评估设计变更对软件项目开发带来的影响</li>
</ul>
</li>
<li>软件设计的基线管理<ul>
<li>一旦软件设计模型和文档通过了评审，纳入到基线库中</li>
</ul>
</li>
</ul>
<h2 id="SE8-软件体系结构设计"><a href="#SE8-软件体系结构设计" class="headerlink" title="SE8 软件体系结构设计"></a>SE8 软件体系结构设计</h2><h3 id="软件体系结构的概念"><a href="#软件体系结构的概念" class="headerlink" title="软件体系结构的概念"></a>软件体系结构的概念</h3><ul>
<li>软件体系结构(Software Architecture，SA)<ul>
<li>也称软件架构，从高层抽象角度刻画组成软件系统的设计元素及它们之间的逻辑关联</li>
</ul>
</li>
</ul>
<h3 id="软件体系结构的设计元素"><a href="#软件体系结构的设计元素" class="headerlink" title="软件体系结构的设计元素"></a>软件体系结构的设计元素</h3><ul>
<li>构件(Component)<ul>
<li>构成体系结构的基本功能部件</li>
</ul>
</li>
<li>连接件(Connector)<ul>
<li>组件之间的连接和交互关系</li>
</ul>
</li>
<li>约束(Constraint)<ul>
<li>组件中的元素应满足的条件以及组件经由连接件组装成更大模块时应满足的条件</li>
</ul>
</li>
</ul>
<h3 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h3><table>
<thead>
<tr>
<th>视点</th>
<th>图（diagram）</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>结构</td>
<td>包图（package diagram）</td>
<td>从包层面描述系统的静态结构</td>
</tr>
<tr>
<td></td>
<td>类图（class diagram）</td>
<td>从类层面描述系统的静态结构</td>
</tr>
<tr>
<td></td>
<td>对象图（object   diagram）</td>
<td>从对象层面描述系统的静态结构</td>
</tr>
<tr>
<td></td>
<td>构件图(component   diagram)</td>
<td>描述系统中构件及其依赖关系</td>
</tr>
<tr>
<td>行为</td>
<td>状态图(statechart diagram )</td>
<td>描述状态的变迁</td>
</tr>
<tr>
<td></td>
<td>活动图(activity   diagram)</td>
<td>描述系统活动的实施</td>
</tr>
<tr>
<td></td>
<td>通信图(communication diagram)</td>
<td>描述对象间的消息传递与协作</td>
</tr>
<tr>
<td></td>
<td>顺序图(sequence diagram)</td>
<td>描述对象间的消息传递与协作</td>
</tr>
<tr>
<td>部署</td>
<td>部署图（deployment   diagram）</td>
<td>描述系统中工件在物理运行环境中的部署情况</td>
</tr>
<tr>
<td>用例</td>
<td>用例图（use   case diagram）</td>
<td>从外部用户角度描述系统功能</td>
</tr>
</tbody></table>
<h3 id="不同体系结构风格适合的应用"><a href="#不同体系结构风格适合的应用" class="headerlink" title="不同体系结构风格适合的应用"></a>不同体系结构风格适合的应用</h3><table>
<thead>
<tr>
<th>类别</th>
<th>特点</th>
<th>典型应用</th>
</tr>
</thead>
<tbody><tr>
<td>管道&#x2F;过滤器风格</td>
<td>数据驱动的分级处理，处理流程可灵活重组，过滤器可重用</td>
<td>数据驱动的事务处理软件，如编译器、Web服务请求等</td>
</tr>
<tr>
<td>层次风格</td>
<td>分层抽象、层次间耦合度低、层次的功能可重用和可替换</td>
<td>绝大部分的应用软件</td>
</tr>
<tr>
<td>MVC风格</td>
<td>模型、处理和显示的职责明确，构件间的关系局部化，各个软构件可重用</td>
<td>单机软件系统，Web应用软件系统</td>
</tr>
<tr>
<td>SOA风格</td>
<td>以服务作为基本的构件，支持异构构件之间的互操作，服务的灵活重用和组装</td>
<td>部署和运行在云平台上的软件系统</td>
</tr>
<tr>
<td>消息总线风格</td>
<td>提供统一的消息总线，支持异构构件之间的消息传递和处理</td>
<td>异构构件之间消息通信密集型的软件系统</td>
</tr>
</tbody></table>
<h3 id="撰写软件体系结构设计文档"><a href="#撰写软件体系结构设计文档" class="headerlink" title="撰写软件体系结构设计文档"></a>撰写软件体系结构设计文档</h3><p>1.文档概述</p>
<p>2.系统概述</p>
<p>3.设计目标和原则</p>
<p>4.设计约束和现实限制</p>
<p>5.逻辑视点的体系结构设计</p>
<p>6.部署视点的体系结构设计</p>
<p>7.开发视点的体系结构设计</p>
<p>8.运行视点的体系结构设计</p>
<h3 id="评审软件体系结构设计"><a href="#评审软件体系结构设计" class="headerlink" title="评审软件体系结构设计"></a>评审软件体系结构设计</h3><ul>
<li>满足性<ul>
<li>体系结构是否能够满足软件需求，体系结构怎样满足软件需求</li>
</ul>
</li>
<li>优化性<ul>
<li>体系结构是否以充分优化方式实现所有软件需求项</li>
</ul>
</li>
<li>可扩展性<ul>
<li>是否易于扩展，以应对软件需求的变化</li>
</ul>
</li>
<li>可追踪性<ul>
<li>软件体系结构中的所有设计元素是否有相对应的软件需求项</li>
</ul>
</li>
<li>详尽程度<ul>
<li>体系结构的详略程度是否恰当</li>
</ul>
</li>
</ul>
<h3 id="软件体系结构设计的输出"><a href="#软件体系结构设计的输出" class="headerlink" title="软件体系结构设计的输出"></a>软件体系结构设计的输出</h3><ul>
<li>软件模型<ul>
<li>用UML包图、部署图等描述的软件体系结构模型</li>
</ul>
</li>
<li>软件文档<ul>
<li>体系结构设计规格说明书文档</li>
</ul>
</li>
</ul>
<h2 id="SE9-用户界面设计"><a href="#SE9-用户界面设计" class="headerlink" title="SE9 用户界面设计"></a>SE9 用户界面设计</h2><h3 id="人机交互的常见方式"><a href="#人机交互的常见方式" class="headerlink" title="人机交互的常见方式"></a>人机交互的常见方式</h3><ul>
<li>文本<ul>
<li>通过文本方式进行输入和输出，如DOS、Linux下的文本命令，特点：须记忆命令、不友好</li>
</ul>
</li>
<li>图形化界面<ul>
<li>通过图形化界面进行输入和输出，如窗口、按钮、对话框，特点：直观、简洁、友好</li>
</ul>
</li>
<li>语音<ul>
<li>通过语音来进行输入和输出，如与机器人的交互、Siri、手机导航软件等，特点：将双手解放出来，需要麦克风</li>
</ul>
</li>
<li>手势<ul>
<li>通过姿势(gesture)来进行交互，如与无人机交互等，特点：准确性不高，需要视频传感器</li>
</ul>
</li>
</ul>
<h3 id="人机交互的关键"><a href="#人机交互的关键" class="headerlink" title="人机交互的关键"></a>人机交互的关键</h3><ul>
<li>用户的满意度<ul>
<li>用户通常将用户界面视为软件本身，用户界面是用户接触软件的主体要素</li>
<li>用户界面设计的质量直接决定了用户对软件系统的评价，影响用户对软件系统的满意度</li>
</ul>
</li>
<li>方便输入<ul>
<li>快速、便捷、准确、友好的输入；鼠标、点击、选择等</li>
</ul>
</li>
<li>直观输出<ul>
<li>直观、显式、可理解、简洁的输出；所见即所得、图形展示等</li>
</ul>
</li>
</ul>
<h3 id="用户界面元素及实现方式"><a href="#用户界面元素及实现方式" class="headerlink" title="用户界面元素及实现方式"></a>用户界面元素及实现方式</h3><ul>
<li>静态元素<ul>
<li>与软件系统的运行状态无关，没有变化</li>
<li>如文本、图标、图形、图像</li>
</ul>
</li>
<li>动态元素<ul>
<li>与软件运行状态和业务逻辑相关，不允许用户修改</li>
<li>如不可编辑文本、表格、图标、图形等</li>
</ul>
</li>
<li>用户输入元素<ul>
<li>由用户填写或者选择</li>
<li>如编辑文本、单选按钮、多选框等</li>
</ul>
</li>
<li>用户命令元素<ul>
<li>点击后激活后端的业务处理或者刷新界面</li>
<li>如按钮、菜单、超链接等</li>
</ul>
</li>
</ul>
<h3 id="用户界面设计的任务"><a href="#用户界面设计的任务" class="headerlink" title="用户界面设计的任务"></a>用户界面设计的任务</h3><p>根据软件需求及其操作流程，为其设计出与用户进行交互的界面，支持用户对软件的操作和使用</p>
<h3 id="用户界面设计原则"><a href="#用户界面设计原则" class="headerlink" title="用户界面设计原则"></a>用户界面设计原则</h3><ul>
<li>直观性<ul>
<li>界面元素贴近业务领域，具有简洁、明确、直观特性</li>
<li>界面中屏幕间的跳转关系简单、自然</li>
</ul>
</li>
<li>易操作性<ul>
<li>简单、简洁、不繁琐</li>
<li>尽量减少用户输入的次数和信息量</li>
</ul>
</li>
<li>反应性<ul>
<li>界面必须在合理时间内对用户操作做出响应</li>
<li>对耗时较长的内部处理过程必须提供及时的进度反馈</li>
</ul>
</li>
<li>一致性<ul>
<li>保持一致的界面风格和操作方式</li>
<li>与业界相关的用户界面规范和操作习惯相一致</li>
</ul>
</li>
<li>容错性<ul>
<li>界面设计应降低用户的误操作率、容忍用户的误操作</li>
<li>对所有可能造成损害的动作，必须在用户确认后才进行</li>
<li>允许用户对尽可能多的界面操作反悔（Undo）</li>
</ul>
</li>
<li>人性化<ul>
<li>在适当时机给用户提供需要的帮助或建议</li>
<li>在任何情况用户均能理解软件系统的当前状态和响应信息</li>
<li>界面的布局和色彩应使用户感觉舒适、自然</li>
</ul>
</li>
</ul>
<h3 id="用户界面设计过程"><a href="#用户界面设计过程" class="headerlink" title="用户界面设计过程"></a>用户界面设计过程</h3><p>用户界面设计以软件需求模型为依据，基于用例模型、用例交互模型等，采用自顶向下、逐步求精的设计原则</p>
<p>用户界面初步设计 → 建立界面跳转关系 → 精化各个界面设计  → 评审界面设计</p>
<h2 id="SE10-软件详细设计"><a href="#SE10-软件详细设计" class="headerlink" title="SE10 软件详细设计"></a>SE10 软件详细设计</h2><h3 id="详细设计的任务"><a href="#详细设计的任务" class="headerlink" title="详细设计的任务"></a>详细设计的任务</h3><ul>
<li>输入：软件体系结构设计、用户界面设计、软件需求</li>
<li>任务：对体系结构设计和用户界面设计成果进行细化和精化，获得高质量、面向实现的设计模型<ul>
<li>面向实现：直接支持编码和程序设计</li>
<li>精化和细化的具体对象：子系统、构件、关键设计类和界面类</li>
</ul>
</li>
</ul>
<h3 id="软件详细设计的活动"><a href="#软件详细设计的活动" class="headerlink" title="软件详细设计的活动"></a>软件详细设计的活动</h3><ul>
<li>用例设计<ul>
<li>给出用例的具体实现解决方案，描述用例是如何通过各个设计元素（包括子系统、软构件、设计类等）的交互和协作来完成的</li>
</ul>
</li>
<li>类设计<ul>
<li>给出每个设计类的具体实现细节，包括类的属性定义、方法的实现算法等，使得程序员能够基于类设计给出这些类的实现代码</li>
</ul>
</li>
<li>数据设计<ul>
<li>对软件所涉及的持久数据及其操作进行设计，明确持久数据的存储方式和格式，细化数据操作的实现细节</li>
</ul>
</li>
<li>子系统&#x2F;软构件设计<ul>
<li>针对粗粒度的子系统和软构件，给出其细粒度的设计元素，如子子系统、设计类等，明确这些设计元素之间的协作关系，使得它们能够实现子系统&#x2F;软构件接口所规定的相关功能和服务</li>
</ul>
</li>
</ul>
<h3 id="软件详细设计的要求和原则"><a href="#软件详细设计的要求和原则" class="headerlink" title="软件详细设计的要求和原则"></a>软件详细设计的要求和原则</h3><ul>
<li>针对软件需求<ul>
<li>从软件需求出发，确保每一项软件需求都有相应的详细设计元素加以实现</li>
</ul>
</li>
<li>深入优化设计<ul>
<li>精心设计，以充分优化软件系统的性能、效能等，提高软件系统的可靠性、可重用性和可维护性等</li>
</ul>
</li>
<li>设计足够详细<ul>
<li>得到详实程度足以支持程序员编码的软件设计模型</li>
</ul>
</li>
<li>充分软件重用<ul>
<li>从多个不同的维度和层次进行充分的软件重用，以提高软件开发的效率和质量，减低开发成本</li>
</ul>
</li>
</ul>
<h3 id="用例的实现方案"><a href="#用例的实现方案" class="headerlink" title="用例的实现方案"></a>用例的实现方案</h3><ul>
<li>用例如何通过各个设计元素来实现的<ul>
<li>子系统、构件、设计类、界面元素类等</li>
</ul>
</li>
<li>这些设计元素之间在用例实现过程中的协同和交互<ul>
<li>消息传递</li>
</ul>
</li>
<li>精化各个设计元素的设计<ul>
<li>如接口、实现细节等</li>
</ul>
</li>
</ul>
<h3 id="用例设计原则"><a href="#用例设计原则" class="headerlink" title="用例设计原则"></a>用例设计原则</h3><ul>
<li>以软件需求为基础<ul>
<li>以需求模型为前提，包括用例模型、交互模型、分析类模型等</li>
<li>不能抛开软件需求来给出用例的实现方案</li>
</ul>
</li>
<li>通过整合设计元素来实现用例<ul>
<li>整合软件体系结构设计、用户界面设计等产生了一系列设计元素，包括：子系统、构件、关键设计类等等</li>
<li>不能抛开前期设计工作成果</li>
</ul>
</li>
<li>精化软件设计<ul>
<li>用例设计不仅要给出用例实现的解决方案，也要依此为目的进一步精化软件设计，以获得更为详实的设计信息</li>
<li>为后续的详细设计奠定基础</li>
</ul>
</li>
</ul>
<h3 id="类设计的任务"><a href="#类设计的任务" class="headerlink" title="类设计的任务"></a>类设计的任务</h3><ul>
<li>任务<ul>
<li>对界面类、关键设计类、设计类等进行设计优化和精化，</li>
<li>明确设计类的内部实现细节</li>
<li>精化到可以提交软件实现的程度</li>
</ul>
</li>
<li>设计与建模<ul>
<li>明确类的可见范围，类的操作和属性，类之间的关系等</li>
<li>对类设计进行建模</li>
</ul>
</li>
<li>结果<ul>
<li>类图、状态图、活动图等</li>
</ul>
</li>
</ul>
<h3 id="类设计原则"><a href="#类设计原则" class="headerlink" title="类设计原则"></a>类设计原则</h3><ul>
<li>准确化<ul>
<li>对类的内部结构、行为等给予准确的表达，以支持程序员精准地理解类设计，进而编写出类的程序代码</li>
</ul>
</li>
<li>细节化<ul>
<li>对类的接口、属性、方法等方面给予足够详细的设计，以便程序员能够对类进行编程</li>
</ul>
</li>
<li>一致性<ul>
<li>要确保类的关系、属性、方法等的设计是相互一致的，类的内部属性、方法等设计与类的职责、关系等是相互一致的</li>
</ul>
</li>
<li>遵循软件设计的基本原则<ul>
<li>按照模块化、高内聚度、低耦合度、信息隐藏等基本原则来进行类设计，必要时需要基于这些原则对所设计的类进行必要的拆分和合并，以提高类设计的质量</li>
</ul>
</li>
</ul>
<h3 id="数据设计"><a href="#数据设计" class="headerlink" title="数据设计"></a>数据设计</h3><ul>
<li>任务<ul>
<li>设计需要持久保存的数据以及这些数据之间的关系</li>
<li>数据组织方式（例如关系数据库中的表、关键字、外键等）之间进行映射</li>
<li>为提高数据存储、操作性能而设计持久存储机制优化设施</li>
</ul>
</li>
<li>设计与建模<ul>
<li>设计数据的结构、存储、组织和访问</li>
<li>对数据设计的结果进行建模</li>
</ul>
</li>
</ul>
<h3 id="数据设计的原则"><a href="#数据设计的原则" class="headerlink" title="数据设计的原则"></a>数据设计的原则</h3><ul>
<li>可追踪<ul>
<li>根据软件需求、体系结构设计、用例设计等模型开展数据设计</li>
</ul>
</li>
<li>无冗余<ul>
<li>尽可能不要产生一些冗余、不必要的数据设计。</li>
</ul>
</li>
<li>考虑和权衡时空效率<ul>
<li>反复折中数据的执行效率（如操作数据需要的时间）和存储效率（如存储数据所需的空间），以满足非功能性需求</li>
</ul>
</li>
<li>贯穿整个软件设计阶段<ul>
<li>针对关键性、全局性的数据条目建立最初的数据模型</li>
<li>数据模型应该不断丰富、演进、完善，以满足用例、子系统、构件、类等设计元素对持久数据存储的需求</li>
</ul>
</li>
<li>验证数据的完整性</li>
</ul>
<h3 id="子系统设计的任务"><a href="#子系统设计的任务" class="headerlink" title="子系统设计的任务"></a>子系统设计的任务</h3><ul>
<li>确定子系统内部的结构<ul>
<li>设计包含于其中的、粒度更小的子系统、构件和设计类</li>
<li>设计它们之间的接口和协作关系</li>
</ul>
</li>
<li>确保它们能够协同实现体系结构模型中该子系统的服务提供接口所规定的全部功能和行为</li>
</ul>
<h3 id="子系统设计的原则"><a href="#子系统设计的原则" class="headerlink" title="子系统设计的原则"></a>子系统设计的原则</h3><ul>
<li>将分析模型中一个或一些较复杂、职责粒度较大的分析类抽象为一个子系统，并对此进行单独设计</li>
<li>考虑软件非功能性需求，思考实现非功能需求的方法</li>
<li>确保将子系统的职责分解到各个设计元素之中</li>
<li>确保子系统设计元素能够完整地实现整个子系统职责</li>
<li>不仅将注意力集中在子系统内部元素的设计上，还要思考所设计的子系统如何通过接口与其外部的设计元素（如构件、设计类、其他子系统等）进行交互和协作。</li>
<li>结合已有软件资产、考虑实现约束等因素来进行子系统的设计，尽可能地通过重用开源软件、集成遗留系统</li>
</ul>
<h3 id="子系统内部设计的方法"><a href="#子系统内部设计的方法" class="headerlink" title="子系统内部设计的方法"></a>子系统内部设计的方法</h3><ul>
<li>理解和分解子系统的职责<ul>
<li>通过一系列交互图来进一步分析子系统的职责</li>
</ul>
</li>
<li>采用自顶向下和自底向上相结合的方式<ul>
<li>将子系统职责交由一组相对独立的设计元素（如设计类、构件等）来完成</li>
</ul>
</li>
<li>重用已有的软件资产（如开源软件、遗留系统）<ul>
<li>如果它们能够承担部分职责，那么将相关的软件资产作为构成子系统的成分之一</li>
</ul>
</li>
<li>绘制一系列UML交互图<ul>
<li>刻画子系统中软件元素如何通过交互来实现子系统的职责</li>
</ul>
</li>
<li>选择合适的设计模式有助于重用和优化子系统设计<ul>
<li>重用一些有效的问题求解和职责实现方式</li>
</ul>
</li>
</ul>
<h3 id="软件详细设计的输出"><a href="#软件详细设计的输出" class="headerlink" title="软件详细设计的输出"></a>软件详细设计的输出</h3><ul>
<li>模型<ul>
<li>用UML类图、构件图、包图、状态图、顺序图等描述的详细设计模型</li>
</ul>
</li>
<li>文档<ul>
<li>软件详细设计规格说明书</li>
</ul>
</li>
</ul>
<h2 id="SE11-软件实现基础"><a href="#SE11-软件实现基础" class="headerlink" title="SE11 软件实现基础"></a>SE11 软件实现基础</h2><h3 id="何为软件实现"><a href="#何为软件实现" class="headerlink" title="何为软件实现"></a>何为软件实现</h3><ul>
<li>根据软件设计模型，编写出目标软件系统的程序代码，并对代码进行必要的测试，以发现和纠正代码存在中的缺陷，并将可运行的目标代码部署到目标计算机上运行</li>
<li>软件实现不仅要编写出程序代码，还要确保代码的质量，因此软件实现涉及多方面的开发工作，如编码、测试、调试等</li>
</ul>
<h3 id="程序设计语言的类别"><a href="#程序设计语言的类别" class="headerlink" title="程序设计语言的类别"></a>程序设计语言的类别</h3><ul>
<li>机器语言</li>
<li>汇编语言</li>
<li>结构化程序设计语言 <ul>
<li>如C、Fortran、Pascal等 d)</li>
</ul>
</li>
<li>面向对象程序设计语言<ul>
<li>如Java、C++等</li>
</ul>
</li>
<li>描述性程序设计语言<ul>
<li>如Prolog、Lisp、ML</li>
</ul>
</li>
</ul>
<h3 id="编写代码的原则"><a href="#编写代码的原则" class="headerlink" title="编写代码的原则"></a>编写代码的原则</h3><ul>
<li>易读，一看就懂</li>
<li>易改，便于维护 </li>
<li>降低代码的复杂度</li>
<li>尽可能地开展软件重用和编写可重用的程序代码</li>
<li>要有处理异常和提高代码的容错性</li>
<li>代码要与模型和文档相一致</li>
</ul>
<h2 id="SE12-编写代码"><a href="#SE12-编写代码" class="headerlink" title="SE12 编写代码"></a>SE12 编写代码</h2><h3 id="编写代码的任务"><a href="#编写代码的任务" class="headerlink" title="编写代码的任务"></a>编写代码的任务</h3><ul>
<li>根据软件设计信息，借助于程序设计语言，编写出目标软件系统的源程序代码，开展程序单元测试、代码审查等质量保证工作<ul>
<li>编写代码既是一个生成代码的过程，也是对生成的代码进行质量保证的过程</li>
</ul>
</li>
<li>兼具软件创作和软件生产的过程<ul>
<li>自由地开展代码创作，编写出满足要求的程序代码，发挥其创新性和主观能动性，创作出算法精巧、运行高效的代码</li>
<li>按照软件质量保证的规范和要求，生产出高质量的代码。程序员需要约束其编程行为，防止随意性、自由性的编程活动，确保其编程活动及其所产生的程序代码满足工程化开发的要求</li>
</ul>
</li>
</ul>
<h3 id="何为软件缺陷"><a href="#何为软件缺陷" class="headerlink" title="何为软件缺陷"></a>何为软件缺陷</h3><ul>
<li>软件缺陷是指软件制品中存在不正确的软件描述和实现<ul>
<li>存在缺陷的软件制品不仅包括程序代码，而且还包括需求和设计的模型和文档</li>
<li>软件缺陷产生于软件开发全过程，只有有人介入的地方就有可能产生软件缺陷</li>
<li>任何人都有可能在软件开发过程中犯错误，进而引入软件缺陷</li>
<li>无论是高层的需求分析和软件架构缺陷还是底层的详细设计缺陷，它们最终都会反映在程序代码之中，导致程序代码存在缺陷</li>
</ul>
</li>
</ul>
<h3 id="软件缺陷的描述"><a href="#软件缺陷的描述" class="headerlink" title="软件缺陷的描述"></a>软件缺陷的描述</h3><ul>
<li>标识符<ul>
<li>每个软件缺陷都被给予一个唯一的标识符。</li>
</ul>
</li>
<li>类型<ul>
<li>说明软件缺陷的类型，如需求缺陷、设计缺陷、代码缺陷</li>
<li>代码缺陷还可以进一步区分为是逻辑缺陷、计算缺陷、判断缺陷</li>
</ul>
</li>
<li>严重程度<ul>
<li>危急程度是指缺陷会影响软件的正常运行甚至危及用户安全</li>
<li>严重程度的缺陷是指会导致软件丧失某些重要功能，或出现错误</li>
<li>一般程度的缺陷是指缺陷会使得软件丧失某些次要的功能</li>
<li>轻微程度是指缺陷会导致软件出现小毛病，但不影响正常运行</li>
</ul>
</li>
<li>症状：软件缺陷所引发的程序错误是什么，有何运行表现</li>
<li>修复优先级：缺陷应该被修复的优先程度，包括：非常紧迫、紧迫、一般和不紧迫等几种</li>
<li>状态：描述缺陷处理的进展状态，如已经安排人员来处理、正在修复、修复已经完成等。</li>
<li>发现者：谁发现了软件缺陷。</li>
<li>发现时机：什么状况下发现的软件缺陷</li>
<li>源头：软件缺陷源头在哪里，如软件文档的哪一个部分</li>
<li>原因：说明导致软件缺陷的原因是什么</li>
</ul>
<h3 id="软件缺陷的应对方法"><a href="#软件缺陷的应对方法" class="headerlink" title="软件缺陷的应对方法"></a>软件缺陷的应对方法</h3><ul>
<li>预防缺陷<ul>
<li>通过运用各种软件工程技术、方法和管理手段，在软件开发过程中预防和避免软件缺陷，减少软件缺陷的数量，降低软件缺陷的严重程度</li>
<li>采用结对编程、严格的过程管理、必要的技术培训、CASE工具的使用等手段，起到预防缺陷的目的</li>
</ul>
</li>
<li>容忍缺陷<ul>
<li>增强软件的缺陷容忍度，借助于软件容错机制和技术，允许软件出现错误，但是在出现错误时软件仍然能够正常的运行</li>
<li>在高可靠软件系统的开发过程中，软件工程师通常需要提供容错模块和代码。显然这会增加软件开发的复杂度和冗余度</li>
</ul>
</li>
<li>发现缺陷<ul>
<li>通过有效的技术和管理手段来发现这些软件缺陷</li>
<li>例如，制定和实施软件质量保证计划、开展软件文档和模型的评审、程序代码的走查、软件测试等工作。它们都可以帮助软件工程师找到潜藏在文档、模型和代码中的软件缺陷</li>
</ul>
</li>
<li>修复缺陷<ul>
<li>通过一系列的手段来修复缺陷</li>
<li>采用程序调试等手段来找到缺陷的原因、定位缺陷的位置，进而修改存在缺陷的程序代码，将软件缺陷从软件制品中移除出去</li>
</ul>
</li>
</ul>
<h3 id="软件缺陷的状态"><a href="#软件缺陷的状态" class="headerlink" title="软件缺陷的状态"></a>软件缺陷的状态</h3><ul>
<li>尚未确认（Unconfirmed）<ul>
<li>有人汇报了软件缺陷，但是尚未确认该软件缺陷是否真实存在</li>
</ul>
</li>
<li>有效（New）<ul>
<li>经过确认，所汇报的软件缺陷真实存在，被正式视为是新缺陷，并等待进一步处理</li>
</ul>
</li>
<li>无效（Invalid）<ul>
<li>经过确认，所汇报的软件缺陷并不存在，是一个无效的软件缺陷汇报</li>
</ul>
</li>
<li>重复（Duplicate）<ul>
<li>该软件缺陷之前已经有人汇报过，属于重复性的软件缺陷</li>
</ul>
</li>
<li>已分配（Assigned）<ul>
<li>以安排人员负责修复缺陷</li>
</ul>
</li>
<li>已修复（Fixed）<ul>
<li>缺陷已经修复</li>
</ul>
</li>
<li>信息不完整（Incomplete）<ul>
<li>缺陷的描述信息不完整，导致无法准确和清晰地理解缺陷的内容</li>
</ul>
</li>
<li>已解决（Resolved）<ul>
<li>针对该缺陷的处理已经完成</li>
</ul>
</li>
<li>已关闭（Closed）<ul>
<li>关闭该缺陷，后续将不再针对该缺陷采用任何措施</li>
</ul>
</li>
</ul>
<h2 id="SE13-软件测试"><a href="#SE13-软件测试" class="headerlink" title="SE13 软件测试"></a>SE13 软件测试</h2><h3 id="何为软件测试？"><a href="#何为软件测试？" class="headerlink" title="何为软件测试？"></a>何为软件测试？</h3><ul>
<li>运行软件或模拟软件的执行，发现软件缺陷的过程</li>
<li>注意点<ul>
<li>软件测试通过运行程序代码的方式来发现程序代码中潜藏的缺陷，这和代码走查、静态分析形成鲜明对比。</li>
<li>软件测试的目的是为了发现软件中的缺陷。它只负责发现缺陷，不负责修复和纠正缺陷</li>
</ul>
</li>
</ul>
<h3 id="软件测试的目的"><a href="#软件测试的目的" class="headerlink" title="软件测试的目的"></a>软件测试的目的</h3><ul>
<li>目的<ul>
<li>发现软件中的缺陷</li>
<li>最大限度、尽可能多的找到缺陷</li>
</ul>
</li>
<li>功效<ul>
<li>发现的缺陷越多 →软件中遗留的缺陷越少→交付的软件质量越高 →后期维护工作量就越少</li>
</ul>
</li>
</ul>
<h3 id="软件测试的步骤"><a href="#软件测试的步骤" class="headerlink" title="软件测试的步骤"></a>软件测试的步骤</h3><ol>
<li>明确待测试对象<ul>
<li>什么粒度的程序代码</li>
</ul>
</li>
<li>设计测试用例<ul>
<li>{&lt;Data, Result&gt;}</li>
<li>可能有许多</li>
</ul>
</li>
<li>运行代码和测试用例<ul>
<li>输入和处理测试用例</li>
</ul>
</li>
<li>分析运行结果<ul>
<li>对比运行结果和预期结果，发现问题和缺陷</li>
</ul>
</li>
</ol>
<h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><ul>
<li>测试对象<ul>
<li>对软件基本模块单元进行测试</li>
<li>过程、函数、方法、类</li>
</ul>
</li>
<li>测试方法<ul>
<li>大多采用白盒测试技术</li>
</ul>
</li>
<li>测试的内容<ul>
<li>模块接口测试</li>
<li>模块局部数据结构测试</li>
<li>模块独立执行路径测试</li>
<li>模块错误处理通道测试</li>
<li>模块边界条件测试</li>
</ul>
</li>
</ul>
<h3 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h3><ul>
<li>测试对象<ul>
<li>对软件模块之间的接口进行测试</li>
<li>过程调用、函数调用、消息传递、远程过程调用</li>
</ul>
</li>
<li>测试技术<ul>
<li>采用黑盒测试技术</li>
</ul>
</li>
<li>集成测试的内容<ul>
<li>过程调用</li>
<li>函数调用</li>
<li>消息传递</li>
<li>远程过程调用</li>
<li>网络消息</li>
</ul>
</li>
</ul>
<h3 id="确认测试"><a href="#确认测试" class="headerlink" title="确认测试"></a>确认测试</h3><ul>
<li>测试对象<ul>
<li>对软件的功能和性能进行测试</li>
<li>判断目标软件系统是否满足用户需求</li>
</ul>
</li>
<li>依据和标准<ul>
<li>软件需求规格说明书</li>
</ul>
</li>
<li>测试技术<ul>
<li>采用黑盒测试技术</li>
</ul>
</li>
</ul>
<h3 id="a测试和b测试"><a href="#a测试和b测试" class="headerlink" title="a测试和b测试"></a>a测试和b测试</h3><ul>
<li>a测试<ul>
<li>软件开发<strong>公司组织内部人员</strong>模拟各类用户行为对即将面市的软件产品（称为α版本、内部测试版）进行测试，发现错误并修正</li>
<li>尽可能逼真地<strong>模拟实际运行环境和用户</strong>对软件产品的操作，并尽最大努力涵盖所有可能的用户操作方式</li>
<li>经α测试并进行修改后的软件产品称为β版本（也称外部测试版）</li>
</ul>
</li>
<li>b测试<ul>
<li>软件开发公司组织各方面的<strong>典型用户</strong>在日常工作中实际使用β版本，或为对外进行宣传而将β版本免费赠送给典型用户（很多情况下，β版本可以通过Internet免费下载，也可以向软件公司索取），并要求用户报告异常情况、提出批评意见</li>
<li>β测试是在与开发者无法控制的环境下进行的软件现场应用</li>
</ul>
</li>
</ul>
<h3 id="软件测试技术-白盒测试"><a href="#软件测试技术-白盒测试" class="headerlink" title="软件测试技术-白盒测试"></a>软件测试技术-白盒测试</h3><ul>
<li>设计测试用例思想<ul>
<li>根据程序单元内部工作流程来设计测试用例</li>
</ul>
</li>
<li>发现程序单元缺陷<ul>
<li>运行待测试的程序，检验程序是否按内部工作流程来运行的，如果不是则存在缺陷</li>
</ul>
</li>
<li>特点<ul>
<li>必须了解程序的内部工作流程才能设计测试用例</li>
</ul>
</li>
</ul>
<h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><ul>
<li>思想<ul>
<li>根据已知的程序功能和性能(而非内部细节)，设计测试用例并通过测试检验程序的每个功能和性能是否正常</li>
</ul>
</li>
<li>依据<ul>
<li>程序的功能和性能描述</li>
</ul>
</li>
<li>特点<ul>
<li>知道程序功能和性能，不必了解程序内部结构和处理细节</li>
</ul>
</li>
</ul>
<h2 id="SE14-软件部署"><a href="#SE14-软件部署" class="headerlink" title="SE14 软件部署"></a>SE14 软件部署</h2><h3 id="软件运行环境"><a href="#软件运行环境" class="headerlink" title="软件运行环境"></a>软件运行环境</h3><p>软件运行所依赖的上下文，它为软件系统的运行提供必要的基础服务和功能、必须的数据和基本的计算能力</p>
<h3 id="何为软件部署"><a href="#何为软件部署" class="headerlink" title="何为软件部署"></a>何为软件部署</h3><ul>
<li>软件部署是指将目标软件系统（包括软构件、配置文件、用户手册、帮助文档等）进行<strong>收集、打包、安装、配置和发布</strong>到<strong>运行环境</strong>的过程</li>
<li>涉及二方面的工作<ul>
<li>安装和配置运行环境</li>
<li>安装和配置软件系统</li>
</ul>
</li>
</ul>
<h3 id="软件部署的原则"><a href="#软件部署的原则" class="headerlink" title="软件部署的原则"></a>软件部署的原则</h3><ul>
<li>最小化原则<ul>
<li>只需安装、部署和配置支撑软件运行和服务提供的最少软硬件要素，以提高软件系统和运行环境的精简性，提升目标软件系统的运行效率，减低运行和维护成本</li>
</ul>
</li>
<li>相关性原则<ul>
<li>部署的运行环境和软件系统要素均与系统建设相关联，剔除不想关的软硬件要素，防止将无关的软件要素部署到计算平台之中，以简化软件系统的部署和配置，降低软件运行和维护的复杂度</li>
</ul>
</li>
<li>适应性原则<ul>
<li>当软件系统的运行环境发生变化时，目标软件系统的部署也要随之发生变化，以确保目标软件系统部署的灵活性，提高目标软件系统的健壮性，提升软件部署和运维的自动化程度</li>
</ul>
</li>
</ul>
<h3 id="单机部署方式"><a href="#单机部署方式" class="headerlink" title="单机部署方式"></a>单机部署方式</h3><ul>
<li>将软件的各个要素（如可运行软构件、数据、文档等）集中部署到某个单一的计算设备上<ul>
<li>软件的运行环境只依赖于单一的计算设施</li>
<li>不同软构件之间不存在网络通讯</li>
<li>计算设施不仅仅是指各种计算机，如个人计算机、笔记本电脑或服务器等，还包括智能手机、智能手环等嵌入式计算设施</li>
</ul>
</li>
<li>典型示例<ul>
<li>小米便签、闹钟和时钟、光盘刻录软件、扫雷游戏软件</li>
</ul>
</li>
</ul>
<h3 id="分布式部署"><a href="#分布式部署" class="headerlink" title="分布式部署"></a>分布式部署</h3><ul>
<li><p>将软件的各个要素（如可运行的软构件、数据和文档等）分散部署在多个计算设备上的部署方式</p>
<ul>
<li>基于C&#x2F;S的部署方式</li>
<li>基于客户端-应用服务器-数据库服务器的部署方式</li>
<li>基于互联网的软件部署方式</li>
</ul>
</li>
<li><p>典型示例</p>
<ul>
<li>空巢老人看护、Google搜索引擎、淘宝和中国铁路“12306”</li>
</ul>
</li>
</ul>
<h2 id="SE15-软件维护与演化"><a href="#SE15-软件维护与演化" class="headerlink" title="SE15 软件维护与演化"></a>SE15 软件维护与演化</h2><h3 id="何为软件维护"><a href="#何为软件维护" class="headerlink" title="何为软件维护"></a>何为软件维护</h3><ul>
<li>软件在交付使用后，由于应用需求和环境变化以及自身问题，对软件系统进行改造和调整的过程</li>
</ul>
<h3 id="软件维护的形式"><a href="#软件维护的形式" class="headerlink" title="软件维护的形式"></a>软件维护的形式</h3><ul>
<li>纠正性维护<ul>
<li>纠正软件中的缺陷和错误</li>
<li>起因：用户在使用软件过程中一旦发现缺陷，他们会向开发人员提出纠正性维护的请求 </li>
<li>目的：诊断和改正软件系统中潜藏的缺陷</li>
</ul>
</li>
<li>完善性维护<ul>
<li>对软件进行改造以便适应新的运行环境和平台 </li>
<li>起因：软件运行于一定的环境(硬件、OS、网络等)之上，运行环境发展很快，出现了变化 </li>
<li>目的：适应环境变化和发展而对软件进行维护</li>
</ul>
</li>
<li>适应性维护<ul>
<li>对软件进行改造以增加新的功能、修改已有的功能</li>
<li>起因：在软件系统运行期间，用户可能要求增加新的功能、建议修改已有功能或提出其他改进意见 </li>
<li>目的：满足用户日益增长的各种需求而对软件系统进行的改善和补充</li>
</ul>
</li>
<li>预防性维护<ul>
<li>对软件结构进行改造以便提高软件的可靠性和可维护性等 </li>
<li>起因：为进一步改善软件系统的可维护性和可靠性，为以后的软件改进奠定基础的维护活动</li>
<li>目的：获取软件结构，重新改善软件结构</li>
</ul>
</li>
</ul>
<h3 id="软件维护的特点"><a href="#软件维护的特点" class="headerlink" title="软件维护的特点"></a>软件维护的特点</h3><ul>
<li>同步性<ul>
<li>软件维护需要与软件使用同步进行</li>
</ul>
</li>
<li>周期长<ul>
<li>软件维护周期会更长，一些软件会服役十几年甚至几十年的时间</li>
</ul>
</li>
<li>费用高<ul>
<li>维护成本高达总成本80%以上，维护费用是开发费用的3倍以上</li>
</ul>
</li>
<li>难度大<ul>
<li>充分理解待维护软件的架构、设计和代码，这极困难。尤其是在软件设计文档缺失的情况下，这一问题更为突出</li>
<li>%-90%的时间被消耗在理解程序上</li>
</ul>
</li>
</ul>
<h3 id="软件演化及其特点"><a href="#软件演化及其特点" class="headerlink" title="软件演化及其特点"></a>软件演化及其特点</h3><ul>
<li>软件演化是指针对软件的大规模功能增强和结构调整，以实现变化的软件需求，或者提高软件系统的质量<ul>
<li>功能增强粒度大，软件演化针对的是粗粒度需求变化及功能增强</li>
<li>主动应对变更，基于对用户需求及其变化的理解，综合考虑软件各项功能实现的时间投入及开发成本，规划软件系统的整体演化，并以此开展功能增强等维护活动</li>
<li>持续性，预先规划好软件演化的路线图，完成当前软件演化工作后，软件维护团队随后将连续性的进入到另一项软件演化工作</li>
<li>引发版本变化，每一次演化结束后通常会产生一个新的软件版本</li>
</ul>
</li>
</ul>
<h3 id="软件演化法则"><a href="#软件演化法则" class="headerlink" title="软件演化法则"></a>软件演化法则</h3><ul>
<li>大型闭源软件的演化特点和规律</li>
<li>持续变化法则<ul>
<li>除非系统持续不断地被修改以满足用户的需求，否则系统将变得越来越不实用</li>
</ul>
</li>
<li>增加复杂性法则<ul>
<li>除非有额外的工作来明显降低软件系统的复杂性，否则软件系统会变得越来越复杂</li>
</ul>
</li>
<li>自我调节法则<ul>
<li>在软件演化过程中，软件产品和过程的测量遵循正态分布，演化过程是自我可调节的</li>
</ul>
</li>
<li>组织稳定性守恒法则<ul>
<li>在整个生命周期中，产生一个新版本所需的平均额外工作量几乎是相同的</li>
</ul>
</li>
<li>熟悉度守恒法则<ul>
<li>在一个不断演化的系统中，平均增量增长几乎相同</li>
</ul>
</li>
<li>功能持续增长法则<ul>
<li>在软件的生命周期中，软件功能必须持续增加，否则用户的满意度会降低</li>
</ul>
</li>
<li>质量衰减法则<ul>
<li>软件的质量会随代码的不断变更而呈现出整体逐渐下降的趋势。如果没有严格的维护和适应性调整，使得软件适应运行环境的变化，软件的质量必然会随着软件演化而逐渐下降</li>
</ul>
</li>
<li>反馈系统法则<ul>
<li>系统的演化过程包括多回路的活动和多层次的反馈。软件工程师必须识别这些复杂的交互，以持续演化现有系统，提供更多的功能和更高的质量</li>
</ul>
</li>
</ul>
<h3 id="何为软件逻辑老化"><a href="#何为软件逻辑老化" class="headerlink" title="何为软件逻辑老化"></a>何为软件逻辑老化</h3><ul>
<li>软件在维护和演化的过程中出现的用户满意度降低、质量逐渐下降、变更成本不断上升这样一种现象<ul>
<li>这些现象发生在逻辑层面，而非发生在物理层面</li>
</ul>
</li>
</ul>
<h3 id="代码重组"><a href="#代码重组" class="headerlink" title="代码重组"></a>代码重组</h3><ul>
<li>在不改变软件功能的前提下，对程序代码进行重新组织，使得重组后的代码具有更好的可维护性，能够有效支持对代码的变更</li>
</ul>
<h3 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h3><ul>
<li>基于低抽象层次软件制品，通过对其进行理解和分析，产生高抽象层次的软件制品<ul>
<li>通过对程序代码进行逆向的分析，产生与代码相一致的设计模型和文档</li>
<li>基于对程序代码和设计模型的理解，逆向分析出软件系统的需求模型和文档</li>
</ul>
</li>
<li>典型应用场景<ul>
<li>分析已有程序，寻求比源代码更高层次的抽象形式（如设计甚至需求）</li>
</ul>
</li>
</ul>
<h3 id="设计重构"><a href="#设计重构" class="headerlink" title="设计重构"></a>设计重构</h3><ul>
<li>如果一个软件的设计文档缺失，软件文档与程序代码不一致、或者软件设计的内容不详实，那么软件维护工程师可以采用设计重构的手段来获得软件设计方面的文档信息</li>
<li>通过读入程序代码，理解和和分析代码中的变量使用、模块内部的封装、模块之间的调用或消息传递、程序的控制路径等方面的信息，产生用自然语言或图形化信息所描述的软件设计文档</li>
<li>是逆向工程的一种具体表现形式</li>
</ul>
<h3 id="再工程"><a href="#再工程" class="headerlink" title="再工程"></a>再工程</h3><ul>
<li>通过分析和变更软件的架构，实现更高质量的软件系统的过程</li>
<li>再工程既包括逆向工程也包括正向工程</li>
</ul>
<h3 id="影响软件可维护性的因素"><a href="#影响软件可维护性的因素" class="headerlink" title="影响软件可维护性的因素"></a>影响软件可维护性的因素</h3><ul>
<li>软件开发方法(结构化、OO)</li>
<li>软件文档是否齐全</li>
<li>文档结构是否标准化</li>
<li>软件是否易于扩展</li>
<li>软件结构是否清晰易于理解</li>
<li>是否采用标准的程序设计语言</li>
<li>程序代码是否易于理解</li>
</ul>
<h2 id="SE16-软件项目管理"><a href="#SE16-软件项目管理" class="headerlink" title="SE16 软件项目管理"></a>SE16 软件项目管理</h2><h3 id="何为项目-Project"><a href="#何为项目-Project" class="headerlink" title="何为项目 (Project)?"></a>何为项目 (Project)?</h3><ul>
<li>项目概念<ul>
<li>项目是指为创建一个唯一的产品或者提供唯一的服务而进行的努力 </li>
<li>项目是基于既定资源与约束，为实现既定目标而实施的活动，它是一份临时工作，目的是创造独特产品、服务或者结果</li>
</ul>
</li>
</ul>
<h3 id="项目特点"><a href="#项目特点" class="headerlink" title="项目特点"></a>项目特点</h3><ul>
<li>目标性: 获得预期的结果</li>
<li>进度性: 在限定期间完成</li>
<li>约束性: 具有有限的资源（如人员、经费、工具等）</li>
<li>多方性: 涉及多个不同人与组织</li>
<li>独立性: 项目间无重复性</li>
<li>不确定性: 项目的实施及其结果不确定性</li>
</ul>
<h3 id="软件项目及其特点"><a href="#软件项目及其特点" class="headerlink" title="软件项目及其特点"></a>软件项目及其特点</h3><h4 id="何为软件项目"><a href="#何为软件项目" class="headerlink" title="何为软件项目"></a><strong>何为软件项目</strong></h4><ul>
<li>针对软件这一特定产品和服务的项目努力开展“软件开发活动”</li>
</ul>
<h4 id="软件项目的特点"><a href="#软件项目的特点" class="headerlink" title="软件项目的特点"></a>软件项目的特点</h4><ul>
<li>对象：作为逻辑产品的软件</li>
<li>过程：不以制造为主，没有重复生产过程</li>
<li>属性：实施要素难以度量和估算，如成本、进度、质量</li>
<li>复杂性：作为逻辑产品的复杂性非常高</li>
<li>易变性：软件需求通常难以确定且经常变化</li>
</ul>
<h3 id="软件项目的任务"><a href="#软件项目的任务" class="headerlink" title="软件项目的任务"></a>软件项目的任务</h3><ul>
<li>按照预定的进度、成本和质量，开发出满足用户要求的软件产品<ul>
<li>用户需求</li>
<li>确保质量</li>
<li>成本限制</li>
<li>进度限制</li>
</ul>
</li>
</ul>
<h3 id="何为软件项目管理"><a href="#何为软件项目管理" class="headerlink" title="何为软件项目管理?"></a>何为软件项目管理?</h3><p>对软件项目所涉及的过程、人员、产品、成本和进度等要素进行度量、分析、规划、组织和控制的过程，以确保软件项目按照预定的成本、进度、质量要求顺利完成</p>
<h3 id="软件项目管理的对象"><a href="#软件项目管理的对象" class="headerlink" title="软件项目管理的对象"></a>软件项目管理的对象</h3><ul>
<li>过程管理<ul>
<li>过程：怎么做(How)</li>
</ul>
</li>
<li>人员管理<ul>
<li>人员：谁来做(Who)</li>
</ul>
</li>
<li>产品管理<ul>
<li>产品：结果(What)</li>
</ul>
</li>
</ul>
<h3 id="软件项目的管理要素"><a href="#软件项目的管理要素" class="headerlink" title="软件项目的管理要素"></a>软件项目的管理要素</h3><ul>
<li>管理软件过程<ul>
<li>明确软件开发活动及过程：<strong>过程定义</strong></li>
<li>估算软件项目工作量成本：<strong>软件度量</strong></li>
<li><strong>制定计划、跟踪过程、风险控制等</strong></li>
</ul>
</li>
<li>管理软件产品<ul>
<li>明确有哪些产品，呈什么形式(规范文档)</li>
<li><strong>质量保证、配置管理、需求管理，风险控制</strong></li>
</ul>
</li>
<li>管理项目人员<ul>
<li>组建开发团队、调动积极性和激情</li>
<li><strong>团队建设与沟通、机制设计、风险控制</strong></li>
</ul>
</li>
</ul>
<h3 id="软件度量"><a href="#软件度量" class="headerlink" title="软件度量"></a>软件度量</h3><ul>
<li>软件度量(Metrics)是指对软件产品、软件开发过程或者资源的简单属性的定量描述<ul>
<li>产品：软件开发过程中所生成的各种文档和程序</li>
<li>过程：与软件开发有关的各种活动，如软件设计等</li>
<li>资源：软件开发过程中所需支持，如人员、费用等</li>
</ul>
</li>
<li>注意点<ul>
<li>定量描述而不是定性描述</li>
<li>简单属性：无需参照其它属性便可直接获得定量描述</li>
</ul>
</li>
<li>简单属性示例<ul>
<li>例子：**软件系统的代码行数目为1132 KLOC</li>
</ul>
</li>
</ul>
<h3 id="软件测量"><a href="#软件测量" class="headerlink" title="软件测量"></a>软件测量</h3><ul>
<li>软件测量(Measure)<ul>
<li>对软件产品、软件开发过程和资源复杂属性的定量描述，它是简单属性度量值函数，用于事后或实时状态，如软件可靠性</li>
</ul>
</li>
<li>注意点<ul>
<li>定量描述而不是定性描述</li>
<li>复杂属性-不可直接获得、需参照其它属性的度量值</li>
<li>实时或者事后状态，用于对历史进行评估</li>
</ul>
</li>
<li>复杂属性示例<ul>
<li>软件质量、软件可靠性等等</li>
<li>例子：软件可靠性为0.95</li>
</ul>
</li>
</ul>
<h3 id="估算"><a href="#估算" class="headerlink" title="估算"></a>估算</h3><ul>
<li>估算(Estimation)<ul>
<li>对软件产品、软件开发过程和资源复杂属性的定量描述，它是简单属性度量值的函数，软件估算用于事前</li>
</ul>
</li>
<li>注意点<ul>
<li>定量描述，而不是定性描述</li>
<li>复杂属性，不可直接获得、需参照其它属性的度量值</li>
<li>事前状态，可采用经验公式</li>
</ul>
</li>
<li>示例<ul>
<li>如某个软件的开发成本为125万元</li>
</ul>
</li>
</ul>
<h3 id="软件项目计划"><a href="#软件项目计划" class="headerlink" title="软件项目计划"></a>软件项目计划</h3><p>对软件项目实施所涉及的活动、人员的安排、任务的划分、开发进度、资源的分配和使用等方面作出的预先规划</p>
<p>计划内容</p>
<ul>
<li>软件开发进度计划</li>
<li>人员任务分工计划</li>
<li>资源分配使用计划</li>
<li>……</li>
</ul>
<h3 id="项目跟踪"><a href="#项目跟踪" class="headerlink" title="项目跟踪"></a>项目跟踪</h3><p>任务</p>
<ul>
<li>跟踪和及时调整软件项目开发计划，提供项目情况的可视性，保证计划的适时调整</li>
</ul>
<p>问题</p>
<ul>
<li>要对哪些方面进行跟踪？</li>
<li>如何对软件项目进行跟踪？</li>
<li>当无法按预定计划实施时如何调整计划？</li>
<li>当跟踪发现问题时如何进行处理</li>
<li>如何提供工具辅助对软件项目进行跟踪……</li>
</ul>
<h3 id="风险管理"><a href="#风险管理" class="headerlink" title="风险管理"></a>风险管理</h3><p>任务</p>
<ul>
<li>对软件开发过程中各种风险进行分析、预测、评估、监控的过程</li>
</ul>
<p>问题</p>
<ul>
<li>什么是软件开发风险？</li>
<li>软件开发可能会有哪些风险？</li>
<li>如何客观地预测风险？</li>
<li>如何评估风险带来的影响？</li>
<li>如何避免和消除风险？</li>
<li>如何提供工具支持风险分析？……</li>
</ul>
<h3 id="何为软件风险"><a href="#何为软件风险" class="headerlink" title="何为软件风险"></a>何为软件风险</h3><p>软件风险</p>
<ul>
<li>使软件项目的实施受到影响和损失、甚至导致失败的、可能会发生的事件</li>
<li>例如，人员的临时流失，计划过于乐观，设计的低劣</li>
</ul>
<p>软件风险特点</p>
<ul>
<li>事先难以确定</li>
<li>带来损失，影响项目实施，甚至会导致项目失败</li>
</ul>
<h3 id="风险管理模式"><a href="#风险管理模式" class="headerlink" title="风险管理模式"></a>风险管理模式</h3><ul>
<li>危机管理<ul>
<li>类似于救火模式，听任软件风险的发生，及至造成麻烦后才着手进行处理</li>
</ul>
</li>
<li>失败处理<ul>
<li>听任软件风险的发生和演化，只是在风险发生之后才采取应对措施</li>
</ul>
</li>
<li>风险缓解<ul>
<li>识别软件风险，事先制定好风险发生后的补救措施，但不做任何防范措施</li>
</ul>
</li>
<li>风险预防<ul>
<li>预先识别和分析哪些不好事件可能会发生，制定好了万一发生的应对措施，同时采取措施防止它发生</li>
</ul>
</li>
<li>消灭根源<ul>
<li>不仅要识别出软件开发过程中各种潜在的软件风险，而且还要分析导致这些软件风险发生的主要因素，并采取积极的措施消除软件风险产生的根源</li>
</ul>
</li>
</ul>
<h3 id="软件质量保证"><a href="#软件质量保证" class="headerlink" title="软件质量保证"></a>软件质量保证</h3><ul>
<li>任务<ul>
<li>为软件产品的质量提供某种可视性，知道哪些地方有质量问题，便于改进方法和措施，提高软件产品的质量</li>
</ul>
</li>
<li>问题<ul>
<li>高质量的软件体现在哪些方面？</li>
<li>如何发现和保证软件产品的质量？</li>
<li>如何制定软件产品质量保证计划？</li>
<li>如何有效落实和实施计划？</li>
<li>如何提供工具支持软件质量保证？</li>
</ul>
</li>
<li>什么是软件质量保证<ul>
<li>为管理层提供为获知产品质量信息所需的数据，从而获得产品质量是否符合预定目标的认识和信息</li>
</ul>
</li>
<li>软件质量保证的目的<ul>
<li>为软件产品的质量提供可视性</li>
<li>知道哪些地方有质量问题</li>
<li>便于改进方法和措施</li>
</ul>
</li>
<li>示例<ul>
<li>对软件进行测试，发现有哪些错误</li>
<li>掌握这些错误的性质(严重、一般)</li>
</ul>
</li>
</ul>
<h3 id="产品管理-–-软件配置管理"><a href="#产品管理-–-软件配置管理" class="headerlink" title="产品管理 – 软件配置管理"></a>产品管理 – 软件配置管理</h3><p>任务</p>
<ul>
<li>对软件产品进行标识、存储、更动和发放，记录和报告其状态，验证软件产品的正确性和一致性，并对上述工作的审计的过程</li>
</ul>
<p>问题</p>
<ul>
<li>如何标识和描述软件产品</li>
<li>如何对其软件产品的版本进行控制？</li>
<li>如何控制软件产品的变更？</li>
<li>如何制定软件配置计划？</li>
<li>如何利用工具支持软件配置活动……</li>
</ul>
<h3 id="软件需求管理"><a href="#软件需求管理" class="headerlink" title="软件需求管理"></a>软件需求管理</h3><p>任务</p>
<ul>
<li>获取、文档化和评审用户需求，对用户需求变更进行控制和管理</li>
</ul>
<p>问题</p>
<ul>
<li>如何获取需求？</li>
<li>如何撰写软件需求规格说明书？</li>
<li>如何对需求进行评审以发现问题？</li>
<li>如何控制需求的变更？</li>
<li>如何提供工具支持需求管理……</li>
</ul>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯部分题目</title>
    <url>/2023/01/06/%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/</url>
    <content><![CDATA[<p>蓝桥杯的一些练习题</p>
<h2 id="数字三角形-简单"><a href="#数字三角形-简单" class="headerlink" title="数字三角形(简单)"></a>数字三角形(简单)</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://www.lanqiao.cn/problems/505/learning/">数字三角形 - 蓝桥云课 (lanqiao.cn)</a> </p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB43f0822f4c09bb656e8fb993eb8c4d51?method=download&shareKey=c65f97994f618d17eaed559719c3329a" alt="图片描述"></p>
<p>上图给出了一个数字三角形。从三角形的顶部到底部有很多条不同的路径。对于每条路径，把路径上面的数加起来可以得到一个和，你的任务就是找到最大的和。</p>
<p>路径上的每一步只能从一个数走到下一层和它最近的左边的那个数或者右 边的那个数。此外，向左下走的次数与向右下走的次数相差不能超过 1。</p>
<h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含一个整数 N (1≤N≤100)，表示三角形的行数。</p>
<p>下面的 N 行给出数字三角形。数字三角形上的数都是 0 至 100 之间的整数。</p>
<h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数，表示答案。</p>
<h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote>
<p>输入</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">7</span><br><span class="line">3 8</span><br><span class="line">8 1 0</span><br><span class="line">2 7 4 4</span><br><span class="line">4 5 2 6 5</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">27</span><br></pre></td></tr></table></figure>

<h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul>
<li>最大运行时间：1s</li>
<li>最大运行内存: 256M</li>
</ul>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>关于向左向右步数不能相差1的理解：</p>
<p>说明最后在最后一层一定会落到<strong>中间</strong>,所以只需判断最后一层。</p>
<p>最后一层为奇数：中位数</p>
<p>最后一层偶数：中间两个取最大</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> num[<span class="number">200</span>][<span class="number">200</span>],n,ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">	  <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= i;j++) &#123;</span><br><span class="line">	      cin &gt;&gt; num[i][j];</span><br><span class="line">		  num[i][j] += <span class="built_in">max</span>(num[i<span class="number">-1</span>][j],num[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">	  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ans = <span class="built_in">max</span>(num[n][(n+<span class="number">1</span>)/<span class="number">2</span>],num[n][(n+<span class="number">2</span>)/<span class="number">2</span>]);</span><br><span class="line">  cout &lt;&lt; ans;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="排序-简单）"><a href="#排序-简单）" class="headerlink" title="排序(简单）"></a>排序(简单）</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://www.lanqiao.cn/problems/598/learning/">排序 - 蓝桥云课 (lanqiao.cn)</a> </p>
<p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p>
<p>小蓝最近学习了一些排序算法，其中冒泡排序让他印象深刻。</p>
<p>在冒泡排序中，每次只能交换相邻的两个元素。</p>
<p>小蓝发现，如果对一个字符串中的字符排序，只允许交换相邻的两个字符， 则在所有可能的排序方案中，冒泡排序的总交换次数是最少的。</p>
<p>例如，对于字符串 lan 排序，只需要 1 次交换。对于字符串 qiao 排序，总共需要 4次交换。</p>
<p>小蓝找到了很多字符串试图排序，他恰巧碰到一个字符串，需要 100 次交 换，可是他忘了吧这个字符串记下来，现在找不到了。</p>
<p>请帮助小蓝找一个只包含小写英文字母且没有字母重复出现的字符串，对 该串的字符排序，正好需要 100 次交换。如果可能找到多个，请告诉小蓝最短的那个。如果最短的仍然有多个，请告诉小蓝字典序最小的那个。</p>
<h3 id="运行限制-1"><a href="#运行限制-1" class="headerlink" title="运行限制"></a>运行限制</h3><ul>
<li>最大运行时间：1s</li>
<li>最大运行内存: 128M</li>
</ul>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>对于<strong>完全乱序时的</strong>N个字母的字符串，最多需要交换N*(N-1)&#x2F;2次 </p>
<p>当N&#x3D;15时，有15*14&#x2F;2&#x3D;105，即满足100次交换所需的最短字符串有15个字母。 </p>
<p>要求字典序最小，那么显然要取a~o这15个字典序最小的字母 </p>
<p>逆向思考，目标字符串经过100次交换后，得到正序字符串abcdefghijklmno，而完全逆序的字符串onmlkjihgfedcba变成正序字符串需要105次交换，那么将完全逆序的字符串交换5次后，便能得到答案。</p>
<p>而要求字典序最小，那么将j交换5次提到字符串最前面，就得到了最小的情况</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;jonmlkihgfedcba&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="杨辉三角形-中等"><a href="#杨辉三角形-中等" class="headerlink" title="杨辉三角形(中等)"></a>杨辉三角形(中等)</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://www.lanqiao.cn/problems/1457/learning/">杨辉三角形 - 蓝桥云课 (lanqiao.cn)</a> </p>
<p>下面的图形是著名的杨辉三角形：</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB10001394df5976a0891b51ff0bbb9545?method=download&shareKey=2b18f242ed67fd3c0162877fa7e5c174" alt="image"></p>
<p>如果我们按从上到下、从左到右的顺序把所有数排成一列，可以得到如下数列： 1,1,1,1,2,1,1,3,3,1,1,4,6,4,1,⋯</p>
<p>给定一个正整数 NN，请你输出数列中第一次出现 NN 是在第几个数？</p>
<h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入一个整数 NN。</p>
<h3 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数代表答案。</p>
<h3 id="输入输出样例-1"><a href="#输入输出样例-1" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><blockquote>
<p>输入</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure>

<h3 id="评测用例规模与约定"><a href="#评测用例规模与约定" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 %20 的评测用例，1≤N≤10； 对于所有评测用例，1≤N≤1000000000。</p>
<h3 id="运行限制-2"><a href="#运行限制-2" class="headerlink" title="运行限制"></a>运行限制</h3><ul>
<li>最大运行时间：1s</li>
<li>最大运行内存: 256M</li>
</ul>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>杨辉三角对称，因此我们只要算一半的数即可(算全部的TLE)，用两个数组维护上一状态和这一状态的数 。</p>
<p>另外还要注意数据范围。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">100025</span>],b[<span class="number">100025</span>];</span><br><span class="line"><span class="comment">//开两个数组，一个保存上一行那一半的数，一个保存目的行那一半的数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> n,cnt;</span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">      cout &lt;&lt; <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  a[<span class="number">0</span>] = b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>;i &lt;= <span class="number">44723</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= i/<span class="number">2</span>;j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(j == i/<span class="number">2</span> &amp;&amp; i%<span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//如果行数为奇数那么就有个中间数，就是上一行前面数的两倍</span></span><br><span class="line">        b[j] = a[j<span class="number">-1</span>]*<span class="number">2</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        b[j] = a[j<span class="number">-1</span>] + a[j];<span class="comment">//杨辉三角</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(b[j] == n) &#123;</span><br><span class="line">        cnt = i*(i<span class="number">-1</span>)/<span class="number">2</span>+j+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">goto</span> next;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新a数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= i/<span class="number">2</span>;j++) &#123;</span><br><span class="line">      a[j] = b[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cnt = n*(n+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">2</span>;<span class="comment">//防止溢出</span></span><br><span class="line">  next:</span><br><span class="line">  cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="跑步锻炼"><a href="#跑步锻炼" class="headerlink" title="跑步锻炼"></a>跑步锻炼</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://www.lanqiao.cn/problems/597/learning/">跑步锻炼 - 蓝桥云课 (lanqiao.cn)</a> </p>
<p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p>
<p>小蓝每天都锻炼身体。</p>
<p>正常情况下，小蓝每天跑 1 千米。如果某天是周一或者月初（1日），为了激励自己，小蓝要跑 22千米。如果同时是周一或月初，小蓝也是跑 2 千米。</p>
<p>小蓝跑步已经坚持了很长时间，从 2000 年 1 月 1 日周六（含）到 2020 年 10 月 1 日周四（含）。请问这段时间小蓝总共跑步多少千米？</p>
<h3 id="运行限制-3"><a href="#运行限制-3" class="headerlink" title="运行限制"></a>运行限制</h3><ul>
<li>最大运行时间：1s</li>
<li>最大运行内存: 128M</li>
</ul>
<h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isLeap</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((n%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;n%<span class="number">100</span>!=<span class="number">0</span>)||n%<span class="number">400</span>==<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> month[]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line">  <span class="type">int</span> week = <span class="number">6</span>;</span><br><span class="line">  <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2000</span>;i &lt;= <span class="number">2020</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">12</span>;j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">isLeap</span>(i)) &#123;</span><br><span class="line">        month[<span class="number">2</span>] = <span class="number">29</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        month[<span class="number">2</span>] = <span class="number">28</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k &lt;= month[j];k++) &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">if</span>(week &gt; <span class="number">7</span>) &#123;</span><br><span class="line">          week = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(week == <span class="number">1</span> || k == <span class="number">1</span>) &#123;  <span class="comment">//判断周一和每月的一号</span></span><br><span class="line">          ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        week++;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">2020</span> &amp;&amp; j == <span class="number">10</span> &amp;&amp; k == <span class="number">1</span>) &#123;</span><br><span class="line">          cout &lt;&lt; ans;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小明的彩灯-简单"><a href="#小明的彩灯-简单" class="headerlink" title="小明的彩灯(简单)"></a>小明的彩灯(简单)</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://www.lanqiao.cn/problems/1276/learning/">小明的彩灯 - 蓝桥云课 (lanqiao.cn)</a> </p>
<p>小明拥有 N 个彩灯，第 i 个彩灯的初始亮度为 ai。</p>
<p>小明将进行 Q 次操作，每次操作可选择一段区间，并使区间内彩灯的亮度 +x（x 可能为负数）。</p>
<p>求 Q 次操作后每个彩灯的亮度（若彩灯亮度为负数则输出 0）。</p>
<h3 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行包含两个正整数 N，Q分别表示彩灯的数量和操作的次数。</p>
<p>第二行包含 NN 个整数，表示彩灯的初始亮度。</p>
<p>接下来 Q 行每行包含一个操作，格式如下：</p>
<p><code>l r x</code>，表示将区间 l∼r 的彩灯的亮度 +x。</p>
<p>1≤N,Q≤5×10^5，0≤ai≤10^9，1≤l≤r≤N，−10^9≤x≤10^9</p>
<h3 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出共 1 行，包含 NN个整数，表示每个彩灯的亮度。</p>
<h3 id="输入输出样例-2"><a href="#输入输出样例-2" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例-1-1"><a href="#示例-1-1" class="headerlink" title="示例 1"></a>示例 1</h4><blockquote>
<p>输入</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 3</span><br><span class="line">2 2 2 1 5</span><br><span class="line">1 3 3</span><br><span class="line">4 5 5</span><br><span class="line">1 1 -100</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 5 5 6 10</span><br></pre></td></tr></table></figure>

<h3 id="运行限制-4"><a href="#运行限制-4" class="headerlink" title="运行限制"></a>运行限制</h3><ul>
<li>最大运行时间：1s</li>
<li>最大运行内存: 128M</li>
</ul>
<h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>用到了差分。</p>
<p><strong>一维差分结论</strong>：给<code>a</code>数组中的<code>[l, r] </code>区间中的每一个数都加上<code>c</code>,只需对差分数组<code>b</code>做 <code>b[l] += c</code>, <code>b[r+1] -= c </code>。时间复杂度为<code>O(1)</code>, 大大提高了效率。 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> light[<span class="number">500005</span>],f[<span class="number">500005</span>];</span><br><span class="line"><span class="comment">//light-灯数组，f-差分数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 请在此输入您的代码</span></span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> n,q,l,r,x;</span><br><span class="line">  </span><br><span class="line">  cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">    cin &gt;&gt; light[i];</span><br><span class="line">    f[i] = light[i]-light[i<span class="number">-1</span>];  <span class="comment">//计算差分数组 </span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">    cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">    f[l] += x;</span><br><span class="line">    f[r+<span class="number">1</span>] -= x;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">    f[i] += f[i<span class="number">-1</span>];  <span class="comment">//求差分数组前缀</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(f[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      f[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小明的背包1-dp"><a href="#小明的背包1-dp" class="headerlink" title="小明的背包1(dp)"></a>小明的背包1(dp)</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://www.lanqiao.cn/problems/1174/learning/">小明的背包1 - 蓝桥云课 (lanqiao.cn)</a> </p>
<p>小明有一个容量为 V 的背包。</p>
<p>这天他去商场购物，商场一共有 N 件物品，第 i 件物品的体积为 wi，价值为 vi。</p>
<p>小明想知道在购买的物品总体积不超过 V 的情况下所能获得的最大价值为多少，请你帮他算算。</p>
<h3 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入第 11行包含两个正整数 N,V，表示商场物品的数量和小明的背包容量。</p>
<p>第 2∼N+1 行包含 22个正整数 w,v，表示物品的体积和价值。</p>
<p>1≤N≤10^2，1≤V≤10^3，1≤wi,vi≤10^3。</p>
<h3 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一行整数表示小明所能获得的最大价值。</p>
<h3 id="输入输出样例-3"><a href="#输入输出样例-3" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例-1-2"><a href="#示例-1-2" class="headerlink" title="示例 1"></a>示例 1</h4><blockquote>
<p>输入</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 20</span><br><span class="line">1 6</span><br><span class="line">2 5</span><br><span class="line">3 8</span><br><span class="line">5 15</span><br><span class="line">3 3 </span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">37</span><br></pre></td></tr></table></figure>

<h3 id="运行限制-5"><a href="#运行限制-5" class="headerlink" title="运行限制"></a>运行限制</h3><ul>
<li>最大运行时间：1s</li>
<li>最大运行内存: 128M</li>
</ul>
<h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> w[<span class="number">105</span>],v[<span class="number">105</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">105</span>][<span class="number">1005</span>];  <span class="comment">//dp[i][j]:i件物品体积一共为j时的价值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> N,V;</span><br><span class="line"></span><br><span class="line">  cin &gt;&gt; N &gt;&gt; V;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; N;i++) &#123;</span><br><span class="line">    cin &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= V;j++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= N;i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(j &gt;= w[i<span class="number">-1</span>]) &#123;</span><br><span class="line">        dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-w[i<span class="number">-1</span>]]+v[i<span class="number">-1</span>]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; dp[N][V];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="走迷宫-BFS"><a href="#走迷宫-BFS" class="headerlink" title="走迷宫(BFS)"></a>走迷宫(BFS)</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://www.lanqiao.cn/problems/1216/learning/">走迷宫 - 蓝桥云课 (lanqiao.cn)</a> </p>
<p>给定一个 N×M 的网格迷宫 G。G 的每个格子要么是道路，要么是障碍物（道路用 1 表示，障碍物用 0 表示）。</p>
<p>已知迷宫的入口位置为(x1,y1)，出口位置为 (x2,y2)。问从入口走到出口，最少要走多少个格子。</p>
<h3 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入第 1 行包含两个正整数 N,M，分别表示迷宫的大小。</p>
<p>接下来输入一个 N×M 的矩阵。若Gi,j&#x3D;1 表示其为道路，否则表示其为障碍物。</p>
<p>最后一行输入四个整数 x1,y1,x2,y2，表示入口的位置和出口的位置。</p>
<p>1≤N,M≤10^2，0≤Gi,j≤1，1≤x1,x2≤N，1≤y1,y2≤M。</p>
<h3 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出仅一行，包含一个整数表示答案。</p>
<p>若无法从入口到出口，则输出 −1。</p>
<h3 id="输入输出样例-4"><a href="#输入输出样例-4" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例-1-3"><a href="#示例-1-3" class="headerlink" title="示例 1"></a>示例 1</h4><blockquote>
<p>输入</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 5 </span><br><span class="line">1 0 1 1 0</span><br><span class="line">1 1 0 1 1 </span><br><span class="line">0 1 0 1 1</span><br><span class="line">1 1 1 1 1</span><br><span class="line">1 0 0 0 1</span><br><span class="line">1 1 5 5 </span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure>

<h3 id="运行限制-6"><a href="#运行限制-6" class="headerlink" title="运行限制"></a>运行限制</h3><ul>
<li>最大运行时间：1s</li>
<li>最大运行内存: 128M</li>
</ul>
<h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> x1,y1,x2,y2;</span><br><span class="line"><span class="type">int</span> grid[<span class="number">105</span>][<span class="number">105</span>],vis[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="type">int</span> dx[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    <span class="type">int</span> step;</span><br><span class="line">&#125;;</span><br><span class="line">queue&lt;point&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    point start,temp;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>,posX,posY;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++) &#123;</span><br><span class="line">            cin &gt;&gt; grid[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line"></span><br><span class="line">    start.x = x1;</span><br><span class="line">    start.y = y1;</span><br><span class="line">    start.step = <span class="number">0</span>;</span><br><span class="line">    vis[x1][y1] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(q.<span class="built_in">front</span>().x == x2 &amp;&amp; q.<span class="built_in">front</span>().y == y2) &#123;</span><br><span class="line">            flag = <span class="number">1</span>;  <span class="comment">//能够走到终点</span></span><br><span class="line">            cout &lt;&lt; q.<span class="built_in">front</span>().step;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++) &#123;</span><br><span class="line">            posX = q.<span class="built_in">front</span>().x + dx[i];</span><br><span class="line">            posY = q.<span class="built_in">front</span>().y + dy[i];</span><br><span class="line">            <span class="keyword">if</span>(grid[posX][posY] == <span class="number">1</span> &amp;&amp; vis[posX][posY] == <span class="number">0</span>) &#123;</span><br><span class="line">                temp.x = posX;</span><br><span class="line">                temp.y = posY;</span><br><span class="line">                temp.step = q.<span class="built_in">front</span>().step + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(temp);</span><br><span class="line">                vis[posX][posY] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="蓝桥骑士-中等"><a href="#蓝桥骑士-中等" class="headerlink" title="蓝桥骑士(中等)"></a>蓝桥骑士(中等)</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://www.lanqiao.cn/problems/1188/learning/">蓝桥骑士 - 蓝桥云课 (lanqiao.cn)</a> </p>
<p>小明是蓝桥王国的骑士，他喜欢不断突破自我。</p>
<p>这天蓝桥国王给他安排了 N 个对手，他们的战力值分别为 a1,a2,…,an，且按顺序阻挡在小明的前方。对于这些对手小明可以选择挑战，也可以选择避战。</p>
<p>身为高傲的骑士，小明从不走回头路，且只愿意挑战战力值越来越高的对手。</p>
<p>请你算算小明最多会挑战多少名对手。</p>
<h3 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入第一行包含一个整数 N，表示对手的个数。</p>
<p>第二行包含 N 个整数 a1,a2,…,an，分别表示对手的战力值。</p>
<p>1≤N≤3×10^5，1≤ai≤10^9。</p>
<h3 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一行整数表示答案。</p>
<h3 id="输入输出样例-5"><a href="#输入输出样例-5" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例-1-4"><a href="#示例-1-4" class="headerlink" title="示例 1"></a>示例 1</h4><blockquote>
<p>输入</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">1 4 2 2 5 6</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<h3 id="运行限制-7"><a href="#运行限制-7" class="headerlink" title="运行限制"></a>运行限制</h3><ul>
<li>最大运行时间：1s</li>
<li>最大运行内存: 128M</li>
</ul>
<h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3><blockquote>
<p>我们举一个例子：有以下序列A[ ] &#x3D; 3 1 2 6 4 5 10 7，求LIS长度。</p>
<p>我们定义一个B[ i ]来储存可能的排序序列，len 为LIS长度。我们依次把A[ i ]有序地放进B[ i ]里。</p>
<p>（为了方便，i的范围就从1~n表示第i个数）</p>
<p>A[1] &#x3D; 3，把3放进B[1]，此时B[1] &#x3D; 3，此时len &#x3D; 1，最小末尾是3</p>
<p>A[2] &#x3D; 1，因为1比3小，所以可以把B[1]中的3替换为1，此时B[1] &#x3D; 1，此时len &#x3D; 1，最小末尾是1</p>
<p>A[3] &#x3D; 2，2大于1，就把2放进B[2] &#x3D; 2，此时B[ ]&#x3D;{1,2}，len &#x3D; 2</p>
<p>同理，A[4]&#x3D;6，把6放进B[3] &#x3D; 6，B[ ]&#x3D;{1,2,6}，len &#x3D; 3</p>
<p>A[5]&#x3D;4，4在2和6之间，比6小，可以把B[3]替换为4，B[ ] &#x3D; {1,2,4}，len &#x3D; 3</p>
<p>A[6] &#x3D; 5，B[4] &#x3D; 5，B[ ] &#x3D; {1,2,4,5}，len &#x3D; 4 </p>
<p>A[7] &#x3D; 10，B[5] &#x3D; 10，B[ ] &#x3D; {1,2,4,5,10}，len &#x3D; 5</p>
<p>A[8] &#x3D; 7，7在5和10之间，比10小，可以把B[5]替换为7，B[ ] &#x3D; {1,2,4,5,7}，len &#x3D; 5</p>
<p>最终我们得出LIS长度为5，但是，但是！！！B[ ] 中的<strong>序列并不一定是正确的最长上升子序列。</strong></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num[<span class="number">300005</span>],low[<span class="number">300005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//二分法找到low数组中第一个比val大的数，替换</span></span><br><span class="line">  <span class="type">int</span> mid;</span><br><span class="line">  <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">    mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(low[mid] &lt;= val) &#123;</span><br><span class="line">      l = mid+<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      r = mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  low[l] = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n,ans = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    cin &gt;&gt; num[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  low[ans] = num[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span>(num[i] &gt; low[ans]) &#123;</span><br><span class="line">      ans++;</span><br><span class="line">      low[ans] = num[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">change</span>(<span class="number">0</span>,ans,num[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="蓝桥侦探-中等"><a href="#蓝桥侦探-中等" class="headerlink" title="蓝桥侦探(中等)"></a>蓝桥侦探(中等)</h2><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://www.lanqiao.cn/problems/1136/learning/">蓝桥侦探 - 蓝桥云课 (lanqiao.cn)</a> </p>
<p>小明是蓝桥王国的侦探。</p>
<p>这天，他接收到一个任务，任务的名字叫分辨是非，具体如下：</p>
<p>蓝桥皇宫的国宝被人偷了，犯罪嫌疑人锁定在 N 个大臣之中，他们的编号分别为1∼N。</p>
<p>在案发时这 N 个大臣要么在大厅1，要么在大厅2，但具体在哪个大厅他们也不记得了。</p>
<p>审讯完他们之后，小明把他们的提供的信息按顺序记了下来，一共 M 条，形式如下：</p>
<ul>
<li><code>x y</code>，表示大臣 x 提供的信息，信息内容为：案发时他和大臣 y 不在一个大厅。</li>
</ul>
<p>小明喜欢按顺序读信息，他会根据信息内容尽可能对案发时大臣的位置进行编排。</p>
<p>他推理得出第一个与先前信息产生矛盾的信息提出者就是偷窃者，但推理的过程已经耗费了他全部的脑力，他筋疲力尽的睡了过去。作为他的侦探助手，请你帮助他找出偷窃者！</p>
<h3 id="输入描述-6"><a href="#输入描述-6" class="headerlink" title="输入描述"></a>输入描述</h3><p>第 1 行包含两个正整数 N,M，分别表示大臣的数量和口供的数量。</p>
<p>之后的第 2∼M+1 行每行输入两个整数 x,y，表示口供的信息。</p>
<p>1≤N,M≤5×10^5，1≤x,y≤N。</p>
<h3 id="输出描述-6"><a href="#输出描述-6" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出仅一行，包含一个正整数，表示偷窃者的编号。</p>
<h3 id="输入输出样例-6"><a href="#输入输出样例-6" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例-1-5"><a href="#示例-1-5" class="headerlink" title="示例 1"></a>示例 1</h4><blockquote>
<p>输入</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 5 </span><br><span class="line">1 2</span><br><span class="line">1 3 </span><br><span class="line">2 3 </span><br><span class="line">3 4</span><br><span class="line">1 4</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h3 id="运行限制-8"><a href="#运行限制-8" class="headerlink" title="运行限制"></a>运行限制</h3><ul>
<li>最大运行时间：1s</li>
<li>最大运行内存: 256M</li>
</ul>
<h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h3><p>普通的并查集只能维护“朋友的朋友是朋友”的关系，种类并查集可以维护“敌人的敌人是朋友”，也叫做并查集的扩展域。主要为：对于一个个体a，假设存在与a对立的个体a+n，如果b与a对立，那么b与a+n在同一并查集（朋友），a与b+n也在同一并查集；反之如果b与a是朋友，那么b与a+n不在同一并查集（对立），即a与b在同一并查集，a+n与b+n在同一并查集。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pre[<span class="number">1000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pre[x] == x) &#123;</span><br><span class="line">      <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre[x] = <span class="built_in">find</span>(pre[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">join</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> fx=<span class="built_in">find</span>(x), fy=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(fx != fy) &#123;</span><br><span class="line">        pre[fx]=fy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n,m,x,y;</span><br><span class="line">  <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">2</span>*n;i++) &#123;</span><br><span class="line">    pre[i] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i) &#123;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="keyword">if</span>(ans == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">find</span>(x) == <span class="built_in">find</span>(y) || <span class="built_in">find</span>(x+n) == <span class="built_in">find</span>(y+n)) &#123;</span><br><span class="line">        ans = x;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">join</span>(x+n,y);</span><br><span class="line">        <span class="built_in">join</span>(x,y+n);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="锻造兵器"><a href="#锻造兵器" class="headerlink" title="锻造兵器"></a>锻造兵器</h2><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://www.lanqiao.cn/problems/1374/learning/">锻造兵器 - 蓝桥云课 (lanqiao.cn)</a> </p>
<p>小明一共有 n块锻造石，第 i 块锻造石的属性值为 ai。</p>
<p>现在小明决定从这 n 块锻造石中任取两块来锻造兵器。</p>
<p>通过周密计算，小明得出，只有当两块锻造石的属性值的差值等于 C，兵器才能锻造成功。</p>
<p>请你帮小明算算，他有多少种选取锻造石的方案可以使得锻造成功。</p>
<h3 id="输入描述-7"><a href="#输入描述-7" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行包含两个整数 n,C，其含义如题所述。</p>
<p>接下来一行包含 n 个整数，分别表示 a1,a2,⋯,an。</p>
<p>1≤N≤2×10^5，∣ai∣≤10^4 , 0≤C≤10^9。</p>
<h3 id="输出描述-7"><a href="#输出描述-7" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出共一行，包含一个整数，表示答案。</p>
<h3 id="输入输出样例-7"><a href="#输入输出样例-7" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例-1-6"><a href="#示例-1-6" class="headerlink" title="示例 1"></a>示例 1</h4><blockquote>
<p>输入</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6 3</span><br><span class="line">8 4 5 7 7 4</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<h3 id="运行限制-9"><a href="#运行限制-9" class="headerlink" title="运行限制"></a>运行限制</h3><ul>
<li>最大运行时间：1s</li>
<li>最大运行内存: 128M</li>
</ul>
<h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h3><p>这题如果用暴力法统计数对，很显然，复杂度为 O(n^2)，超时。所以下面试试尺取法。</p>
<p>首先第一步肯定是排序，那么对输入样例排序后得 {4 4 5 7 7 8}，其中第一个 4 和后面两个 7 是两对，第二个 4 和后面两个 7 也是两对，共四对。这用尺取法该如何实现？</p>
<p>如果仅使用 i、j 两个指针，确实是无法实现的，但如果把后面两个 7看成一个整体，一起统计数对，是不是就可以了？我们可以用两个指针 j、k 指示这种区间，[j, k] 区间内每个数都相同，这个区间可以产生 k – j个数对。使用三个指针，i 是主指针，从头到尾遍历 n 个数；j、k 是辅助指针，用于查找数字相同的区间 [j, k]。</p>
<p>代码只有一个 for 循环，且 j和 k 随着 i 递增，所以总复杂度为 O(n)。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">200005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n,c;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  cin &gt;&gt; n &gt;&gt; c;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,j = <span class="number">1</span>,k = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= n &amp;&amp; a[j] &lt; a[i]+c) &#123;</span><br><span class="line">      j++;  <span class="comment">//用j、k查找数字相同的区间</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(k &lt;= n &amp;&amp; a[k] &lt;= a[i]+c) &#123;</span><br><span class="line">      k++;  <span class="comment">//区间[j,k]内所有数字相同</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[j]-a[i] == c) &#123;</span><br><span class="line">      cnt += (k-j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; cnt;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><h3 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个长度为 N 数组 a 和一个长度为 M 的数组 b。</p>
<p>请你求出它们的最长公共子序列长度为多少。</p>
<h3 id="输入描述-8"><a href="#输入描述-8" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入第一行包含两个整数 N,M，分别表示数组 a 和 b 的长度。</p>
<p>第二行包含 N 个整数 a1,a2,…,an。</p>
<p>第三行包含 M 个整数 b1,b2,…,bn。</p>
<p>1≤N,M≤10^3，1≤ai,bi≤10^9。</p>
<h3 id="输出描述-8"><a href="#输出描述-8" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一行整数表示答案。</p>
<h3 id="输入输出样例-8"><a href="#输入输出样例-8" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例-1-7"><a href="#示例-1-7" class="headerlink" title="示例 1"></a>示例 1</h4><blockquote>
<p>输入</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 6</span><br><span class="line">1 2 3 4 5</span><br><span class="line">2 3 2 1 4 5</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<h3 id="运行限制-10"><a href="#运行限制-10" class="headerlink" title="运行限制"></a>运行限制</h3><ul>
<li>最大运行时间：1s</li>
<li>最大运行内存: 128M</li>
</ul>
<h3 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a>题解</h3><table>
<thead>
<tr>
<th>dp</th>
<th></th>
<th>2</th>
<th>3</th>
<th>2</th>
<th>1</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>4</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>3</td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>3</td>
<td>4</td>
</tr>
</tbody></table>
<p>表格中dp[i][j]位置的数值含义是，当取1-i个第一个字符串(a)的字母和取1-j个第二个字符串的字母(b)，最长公共子序列的长度是dp[i][j]。具体填表的过程可以以如下状态转移方程来表示： </p>
<p>有两种情况</p>
<p>1:当a[i]&#x3D;&#x3D;b[j]时，则当前状态转移方程为dp[i][j]&#x3D;d[i-1][j-1]+1;</p>
<p>2:当不相等时，则从dp[i-1][j]和dp[i][j-1]中取最大值赋值当前的dp[i][j]，状态转移方程为</p>
<p>dp[i][j]&#x3D;max(dp[i-1][j],dp[i][j-1]）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1005</span>],b[<span class="number">1005</span>],dp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n,m;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++) &#123;</span><br><span class="line">    cin &gt;&gt; b[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(a[i] == b[j]) &#123;</span><br><span class="line">        dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; dp[n][m];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小明的衣服"><a href="#小明的衣服" class="headerlink" title="小明的衣服"></a>小明的衣服</h2><h3 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h3><p>小明买了 n 件白色的衣服，他觉得所有衣服都是一种颜色太单调，希望对这些衣服进行染色，每次染色时，他会将某种颜色的<strong>所有</strong>衣服寄去染色厂，第 i 件衣服的邮费为 ai 元，染色厂会按照小明的要求将其中一部分衣服染成同一种任意的颜色，之后将衣服寄给小明， 请问小明要将 n 件衣服染成不同颜色的最小代价是多少？</p>
<h3 id="输入描述-9"><a href="#输入描述-9" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行为一个整数 n ，表示衣服的数量。</p>
<p>第二行包括n 个整数 a1,a2…an 表示第 i 件衣服的邮费为ai 元。</p>
<p>（1≤n≤105,1≤ai≤109 ）</p>
<h3 id="输出描述-9"><a href="#输出描述-9" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数表示小明所要花费的最小代价。</p>
<h3 id="输入输出样例-9"><a href="#输入输出样例-9" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例-1-8"><a href="#示例-1-8" class="headerlink" title="示例 1"></a>示例 1</h4><blockquote>
<p>输入</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">5 1 3 2 1 </span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">25</span><br></pre></td></tr></table></figure>

<h3 id="运行限制-11"><a href="#运行限制-11" class="headerlink" title="运行限制"></a>运行限制</h3><ul>
<li>最大运行时间：1s</li>
<li>最大运行内存: 256M</li>
</ul>
<h3 id="题解-11"><a href="#题解-11" class="headerlink" title="题解"></a>题解</h3><p>题目释义：</p>
<ol>
<li>染色时 需要把所有同色的衣服寄到厂家，然后进行染色策略厂家寄回，花费代价为小明寄到染色厂的邮费（厂家包邮 doge.jpg）</li>
<li>初始所有衣服都为白色 &#x3D;&#x3D;&gt; 第一次需要把所有衣服寄到厂家</li>
<li>染色策略为选择一部分衣服染成同一颜色，再把所有的衣服寄回</li>
<li>要求把 <strong>n</strong> 件衣服染成不同颜色的代价</li>
</ol>
<p>综上，因为染色策略是染成同一颜色，寄出策略也是同一颜色，想要得到不同颜色的结果就需要在每次染色时出一个不同颜色。 可以每次选一个染成不同的颜色，也可以选 <strong>i-1</strong> 个染成不同颜色，两种染色方式导致的结果相同。</p>
<p>所以为了获取最小代价，可以每次贪心的选择邮寄代价最大的衣服染出不同的颜色，可以防止邮寄代价较大的衣服重复寄出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">priority_queue&lt;<span class="type">long</span> <span class="type">long</span>,vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;,greater&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n = <span class="number">0</span>,temp = <span class="number">0</span>,a = <span class="number">0</span>,b = <span class="number">0</span>,sum = <span class="number">0</span>,ans = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">      cin &gt;&gt; temp;</span><br><span class="line">      q.<span class="built_in">push</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      a = q.<span class="built_in">top</span>();</span><br><span class="line">      q.<span class="built_in">pop</span>();</span><br><span class="line">      b = q.<span class="built_in">top</span>();</span><br><span class="line">      q.<span class="built_in">pop</span>();</span><br><span class="line">      sum = a+b;</span><br><span class="line">      ans += sum;</span><br><span class="line">      q.<span class="built_in">push</span>(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Practices</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络-网络层</title>
    <url>/2023/02/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
    <content><![CDATA[<p>计算机网络网络层的一些概念和知识</p>
<h2 id="网络层的几个基本概念"><a href="#网络层的几个基本概念" class="headerlink" title="网络层的几个基本概念"></a>网络层的几个基本概念</h2><p>互联网采用的设计思路：</p>
<p>网络层要设计得尽量简单，向其上层只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。</p>
<ul>
<li>网络在发送分组时不需要先建立连接。</li>
<li>每一个分组（即 IP 数据报）独立发送，与其前后的分组无关（不进行编号）。</li>
<li>网络层不提供服务质量的承诺。即所传送的分组可能出错、丢失、重复和失序（不按序到达终点），也不保证分组传送的时限。</li>
</ul>
<p>由主机中的运输层负责可靠的通信。</p>
<hr>
<p>虚电路是逻辑连接</p>
<ul>
<li>虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而并不是真正建立了一条物理连接。</li>
<li>请注意，电路交换的电话通信是先建立了一条真正的连接。</li>
<li>因此分组交换的虚连接和电路交换的连接只是类似，但并不完全一样。</li>
</ul>
<h2 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h2><p>与网际协议 IP 配套的 3 个协议：</p>
<ol>
<li><strong>地址解析协议 ARP</strong> (Address Resolution Protocol)</li>
<li><strong>网际控制报文协议 ICMP</strong> (Internet Control Message Protocol)</li>
<li><strong>网际组管理协议 IGMP</strong> (Internet Group Management Protocol)</li>
</ol>
<h3 id="虚拟互联网络"><a href="#虚拟互联网络" class="headerlink" title="虚拟互联网络"></a>虚拟互联网络</h3><p>从一般的概念来讲，将网络互相连接起来要使用一些<strong>中间设备</strong>。</p>
<ol>
<li><strong>物理层</strong>使用的中间设备叫作<strong>转发器</strong>(repeater)</li>
<li><strong>数据链路层</strong>使用的中间设备叫作<strong>网桥</strong>或<strong>桥接器</strong>(bridge) ，以及<strong>交换机</strong>(switch) </li>
<li><strong>网络层</strong>使用的中间设备叫作<strong>路由器</strong>(router) </li>
<li>在<strong>网络层及以上</strong>使用的中间设备叫作<strong>网关</strong>(gateway)</li>
</ol>
<h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><h4 id="IP地址及其表示方法"><a href="#IP地址及其表示方法" class="headerlink" title="IP地址及其表示方法"></a>IP地址及其表示方法</h4><p>互联网上的每台主机（或路由器）的每个接口分配一个在全世界唯一的 IP 地址。</p>
<p>由互联网名字和数字分配机构 ICANN (Internet Corporation for Assigned Names and Numbers) 进行分配。 </p>
<p>IP地址在整个互联网范围内是唯一的。 </p>
<p>32位的IP地址采用两级结构，由两个字段组成。2 个字段：网络号和主机号。</p>
<p>IP地址记为：<strong>IP 地址 ::&#x3D; { &lt;网络号&gt;, &lt;主机号&gt;}</strong>  ，符号::&#x3D;表示定义为。</p>
<h4 id="分类的IP地址"><a href="#分类的IP地址" class="headerlink" title="分类的IP地址"></a>分类的IP地址</h4><p><img src="https://note.youdao.com/yws/api/personal/file/WEBabc7be90b1f456c8feb1ac654b0face3?method=download&shareKey=e989a28ea034ddf7a7abb5375dc9e766" alt="1675686747698"></p>
<p><strong>注意：</strong></p>
<ul>
<li><p>A 类网络地址中， <strong>网络号</strong> 0 和 127 是保留地址，不指派。0 表示“本网络”，127 保留作为本地环回测试地址。</p>
</li>
<li><p>B 类网络地址中，<strong>网络号</strong> 128.0  是被 IANA 保留的，不指派。采用无分类编址（CIDR）时可以指派。</p>
</li>
<li><p>C 类网络地址中，<strong>网络号</strong> 192.0.0 是被 IANA 保留的，不指派。采用无分类编址（CIDR）时可以指派。</p>
</li>
<li><p>指派<strong>主机号</strong>时，要扣除全 0 和全 1 。全 0 和全 1 有特殊含义和用途。</p>
<p>全0的主机号表示该IP地址是“本主机”所连接到的<strong>单个网络地址</strong>。（例，一主机地址为5.6.7.8，则该主机所在的网络地址为5.0.0.0），而全1则表示“所有的”，即表示该网络上的所有主机。 </p>
<p>因此ABC每一类的最大主机数要减2.</p>
</li>
</ul>
<h4 id="无分类编制CIDR"><a href="#无分类编制CIDR" class="headerlink" title="无分类编制CIDR"></a>无分类编制CIDR</h4><p><strong>CIDR</strong> (Classless Inter-Domain Routing) ：<strong>无分类域间路由选择</strong>。</p>
<p>消除了传统的 A 类、B 类和 C 类地址以及划分子网的概念，可以更加有效地分配 IPv4 的地址空间，但无法解决 IP 地址枯竭的问题。</p>
<p>2 级结构，2 个字段：网络前缀和主机号</p>
<p>IP 地址 ::&#x3D; { &lt;网络前缀&gt;, &lt;主机号&gt;}  </p>
<p>最大的区别：前缀的位数 n 不固定，可以在 0 ~ 32 之间选取任意值。</p>
<hr>
<p><strong>CIDR 记法</strong>：斜线记法 (slash notation)</p>
<p>a.b.c.d &#x2F; n：二进制 IP 地址的前 n 位是网络前缀。</p>
<p>例如：128.14.35.7&#x2F;20：前 20 位是网络前缀。</p>
<p>CIDR 把网络前缀都相同的所有连续的 IP 地址组成一个 <strong>CIDR 地址块</strong>。 </p>
<hr>
<p>地址掩码 (address mask) 又称为子网掩码 (subnet mask)，32位。 </p>
<p>目的：让机器从 IP 地址迅速算出网络地址。</p>
<p>由一连串 1 和接着的一连串 0 组成，而 1 的个数就是网络前缀的长度。</p>
<p><strong>网络地址 &#x3D; (二进制的 IP 地址) AND (地址掩码)</strong> </p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB86add04745c4d624f36d9302db6e4df9?method=download&shareKey=f49da32a9d8ce63ff580cc7d6524d580" alt="1675688290599"></p>
<blockquote>
<p>每一个 CIDR 地址块中的地址数一定是 2 的整数次幂。</p>
<p>除最后几行外，CIDR 地址块都包含了多个 C 类地址（是一个 C 类地址的 2n 倍，n 是整数）。</p>
<p>因此在文献中有时称 CIDR 编址为“构造超网”</p>
</blockquote>
<p><strong>三个特殊的 CIDR 地址块</strong> </p>
<ul>
<li>&#x2F;32 : 255.255.255.255, 就是一个 IP 地址。这个特殊地址用于主机路由 </li>
<li>&#x2F;31 : 255.255.255.254, 只有两个 IP 地址，其主机号分别为 0 和 1。这个地址块用于点对点链路</li>
<li>&#x2F;0 : 0.0.0.0, 同时 IP 地址也是全 0，即 0.0.0.0&#x2F;0。用于默认路由。</li>
</ul>
<h4 id="IP-地址的特点"><a href="#IP-地址的特点" class="headerlink" title="IP 地址的特点"></a>IP 地址的特点</h4><ul>
<li><p>IP地址是一种分等级的地址结构。分两个等级的好处好处是：</p>
<p>第一，IP地址管理机构在分配IP地址时只分配网络号，而剩下的主机号则由得到该网络号的单位自行分配。这样就方便了IP地址的管理。</p>
<p>第二，路由器仅根据目的主机所连接的网络号来转发分组（而不考虑目的主机），这样就可以使路由表中的项目数大幅度减少，从而减少了路由表所占的存储空间</p>
</li>
<li><p>实际上IP地址是标志一台主机（或路由器）和一条链路的接口。</p>
</li>
<li><p>用转发器或交换机连接起来的若干个局域网仍为一个网络 </p>
</li>
<li><p>在 IP 地址中，所有分配到网络前缀的网络都是平等的。</p>
</li>
</ul>
<h4 id="IP-地址与-MAC-地址"><a href="#IP-地址与-MAC-地址" class="headerlink" title="IP 地址与 MAC 地址"></a>IP 地址与 MAC 地址</h4><p>IP 地址：</p>
<ul>
<li>虚拟地址、软件地址、逻辑地址。</li>
<li>网络层和以上各层使用。</li>
<li>放在 IP 数据报的首部。</li>
</ul>
<p>MAC 地址：</p>
<ul>
<li><p>固化在网卡上的 ROM 中。</p>
</li>
<li><p>硬件地址、物理地址。</p>
</li>
<li><p>数据链路层使用。</p>
</li>
<li><p>放在 MAC 帧的首部。</p>
</li>
</ul>
<p>在 IP 层抽象的互联网上只能看到 IP 数据报。 </p>
<p>在局域网的链路层，只能看见 MAC 帧。 </p>
<h4 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h4><p>实现 IP 通信时使用了两个地址：</p>
<ol>
<li>IP 地址（网络层地址）</li>
<li>MAC 地址（数据链路层地址）</li>
</ol>
<p>ARP 高速缓存 (ARP cache)：</p>
<ol>
<li><p>存放 IP 地址到 MAC 地址的映射表。</p>
</li>
<li><p>映射表动态更新（新增或超时删除）。</p>
<p>映射表：&lt; IP 地址；MAC 地址；生存时间 (Age)；类型等 &gt;</p>
</li>
</ol>
<p>超过生存时间的项目都从高速缓存中删除，以适应网络适配器变化。 </p>
<hr>
<p>ARP 工作:</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB02bcbedda2b3af16e9d8ff47cbb50465?method=download&shareKey=59a09c7509e2e5bcdb7ba53bae112193" alt="1675695055598"></p>
<hr>
<p><strong>ARP查找IP地址对应的MAC地址</strong>：</p>
<ul>
<li><strong>本局域网上广播发送</strong> ARP 请求（路由器不转发 ARP 请求）。</li>
<li>ARP 请求分组：包含发送方硬件地址 &#x2F; 发送方 IP 地址 &#x2F; 目标方硬件地址(未知时填 0) &#x2F; 目标方 IP 地址。</li>
<li><strong>单播</strong> ARP 响应分组：包含发送方硬件地址 &#x2F; 发送方 IP地址 &#x2F; 目标方硬件地址 &#x2F; 目标方 IP 地址。</li>
<li>ARP 分组封装在以太网帧中传输。</li>
</ul>
<p><strong>ARP 高速缓存的作用</strong> ：</p>
<ul>
<li><p>存放最近获得的 IP 地址到 MAC 地址的绑定。</p>
</li>
<li><p>减少 ARP 广播的通信量。</p>
</li>
<li><p>为进一步减少 ARP 通信量，主机 A 在发送其 ARP 请求分组时，就将自己的 IP 地址到 MAC 地址的映射写入 ARP 请求分组。</p>
</li>
<li><p>当主机 B 收到 A 的 ARP 请求分组时，就将主机 A 的 IP 地址及其对应的 MAC 地址映射写入主机 B 自己的 ARP 高速缓存中。不必在发送 ARP 请求。</p>
</li>
</ul>
<p><strong>使用 ARP 的四种典型情况</strong> ：</p>
<ol>
<li>发送方是主机，要把 IP 数据报发送到本网络上的另一个主机。这时用 ARP 找到目的主机的硬件地址。 </li>
<li>发送方是主机，要把 IP 数据报发送到另一个网络上的一个主机。这时用 ARP 找到本网络上的一个路由器的硬件地址。剩下的工作由这个路由器来完成。</li>
<li>发送方是路由器，要把 IP 数据报转发到本网络上的一个主机。这时用 ARP 找到目的主机的硬件地址。 </li>
<li>发送方是路由器，要把 IP 数据报转发到另一个网络上的一个主机。这时用 ARP 找到本网络上另一个路由器的硬件地址。剩下的工作由这个路由器来完成。</li>
</ol>
<h4 id="IP-数据报的格式"><a href="#IP-数据报的格式" class="headerlink" title="IP 数据报的格式"></a>IP 数据报的格式</h4><p>数据报由首部和数据两部分组成。</p>
<p>首部的前一部分是固定长度，共 20 字节，是所有 IP 数据报必须具有的。 </p>
<p>可选字段，其长度是可变的 。</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB7c324b86e266d1154ca669195ace5857?method=download&shareKey=f34673127b464d39cecfb8f49445e153" alt="1675695859251"></p>
<hr>
<ul>
<li><p>版本——占 4 位，指 IP 协议的版本。目前的 IP 协议版本号为 4 (即 IPv4)。</p>
</li>
<li><p>首部长度——占 4 位，可表示的最大数值是 15 个单位(一个单位为 4 字节)，因此 IP 的首部长度的最大值是 60 字节。</p>
</li>
<li><p>区分服务——占 8 位，用来获得更好的服务。只有在使用区分服务（DiffServ）时，这个字段才起作用。在一般的情况下都不使用这个字段 </p>
</li>
<li><p>总长度——占 16 位，指首部和数据之和的长度，单位为字节，因此数据报的最大长度为 65535 字节。总长度必须不超过最大传送单元 MTU。 </p>
<p>最常见的以太网就规定其MTU值为1500字节。</p>
</li>
<li><p>标识 (identification) ——占 16 位，它是一个计数器，用来产生 IP 数据报的标识。 </p>
</li>
<li><p>标志(flag) ——占 3 位，目前只有前两位有意义。</p>
<p>标志字段的最低位是 MF (More Fragment)。MF&#x3D;1 表示后面还有分片，MF&#x3D;0 表示最后一个分片。</p>
<p>标志字段中间的一位是 DF (Don’t Fragment) 。只有当 DF&#x3D;0 时才允许分片。 </p>
</li>
<li><p>片偏移——占 13 位，指出：较长的分组在分片后某片在原分组中的相对位置。片偏移以 8 个字节为偏移单位。</p>
</li>
<li><p>生存时间——占 8 位，记为 TTL (Time To Live)，指示数据报在网络中可通过的路由器数的最大值。</p>
</li>
<li><p>协议——占 8 位，指出此数据报携带的数据使用何种协议，以便目的主机的 IP 层将数据部分上交给那个处理过程</p>
<p>常用的一些协议和相应的协议字段值 ：</p>
<table>
<thead>
<tr>
<th>协议名</th>
<th>ICMP</th>
<th>IGMP</th>
<th>IP</th>
<th>TCP</th>
<th>EGP</th>
<th>IGP</th>
<th>UDP</th>
<th>IPv6</th>
<th>ESP</th>
<th>AH</th>
<th>ICMP-IPv6</th>
<th>OSPF</th>
</tr>
</thead>
<tbody><tr>
<td><strong>协议字段值</strong></td>
<td>1</td>
<td>2</td>
<td>4</td>
<td>6</td>
<td>8</td>
<td>9</td>
<td>17</td>
<td>41</td>
<td>50</td>
<td>51</td>
<td>58</td>
<td>89</td>
</tr>
</tbody></table>
</li>
<li><p>首部检验和——占 16 位，只检验数据报的首部，不检验数据部分。这里不采用 CRC 检验码而采用简单的计算方法。</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEBb2349d1f158e2be515ef8bb864e3c6ed?method=download&shareKey=2ce1ee767214ccd0ccb8e19f483adbb1" alt="1675696340888"></p>
</li>
</ul>
<h2 id="IP转发分组过程"><a href="#IP转发分组过程" class="headerlink" title="IP转发分组过程"></a>IP转发分组过程</h2><h3 id="基于终点的转发"><a href="#基于终点的转发" class="headerlink" title="基于终点的转发"></a>基于终点的转发</h3><p>分组在互联网中是逐跳转发的。</p>
<p>基于终点的转发：基于分组首部中的目的地址传送和转发。</p>
<p>为了压缩转发表的大小，转发表中最主要的路由是<strong>（目的网络地址，下一跳地址）</strong> ，而不是（目的地址，下一跳地址）。查找转发表的过程就是逐行寻找前缀匹配。</p>
<h3 id="最长前缀匹配"><a href="#最长前缀匹配" class="headerlink" title="最长前缀匹配"></a>最长前缀匹配</h3><ul>
<li>使用 CIDR 时，在查找转发表时可能会得到<strong>不止一个</strong>匹配结果。 </li>
<li><strong>最长前缀匹配</strong> (longest-prefix matching) 原则：选择前缀最长的一个作为匹配的前缀。</li>
<li>网络前缀越长，其地址块就越小，因而路由就越具体。</li>
<li>把前缀最长的排在转发表的第 1 行。</li>
</ul>
<h4 id="转发表中的-2-种特殊的路由"><a href="#转发表中的-2-种特殊的路由" class="headerlink" title="转发表中的 2 种特殊的路由"></a>转发表中的 2 种特殊的路由</h4><ul>
<li>主机路由 (host route) <ul>
<li>又叫做特定主机路由。</li>
<li>是对特定目的主机的 IP 地址专门指明的一个路由。</li>
<li>网络前缀就是 a.b.c.d&#x2F;32</li>
<li>放在转发表的最前面。</li>
</ul>
</li>
<li>默认路由 (default route)<ul>
<li>不管分组的最终目的网络在哪里，都由指定的路由器 R 来处理</li>
<li>用特殊前缀 0.0.0.0&#x2F;0 表示。</li>
</ul>
</li>
</ul>
<h4 id="路由器分组转发算法"><a href="#路由器分组转发算法" class="headerlink" title="路由器分组转发算法"></a>路由器分组转发算法</h4><p><img src="https://note.youdao.com/yws/api/personal/file/WEB52c98e62fd90fde4245537c87466a332?method=download&shareKey=aaad15f9a0cabba46e1694f609c44fc2" alt="1675739861719"></p>
<h3 id="使用二叉线索查找转发表"><a href="#使用二叉线索查找转发表" class="headerlink" title="使用二叉线索查找转发表"></a>使用二叉线索查找转发表</h3><ul>
<li><p>二叉线索 (binary trie)：一种特殊结构的树，可以快速在转发表中找到匹配的叶节点。</p>
</li>
<li><p>从二叉线索的根节点自顶向下的深度最多有 32 层，每一层对应于 IP 地址中的一位。</p>
</li>
<li><p>为简化二叉线索的结构，可以用唯一前缀 (unique prefix) 来构造二叉线索。</p>
</li>
<li><p>为了提高二叉线索的查找速度，广泛使用了各种压缩技术。</p>
</li>
</ul>
<h2 id="网际控制报文协议ICMP"><a href="#网际控制报文协议ICMP" class="headerlink" title="网际控制报文协议ICMP"></a>网际控制报文协议ICMP</h2><ul>
<li><p>ICMP (Internet Control Message Protocol) 允许主机或路由器报告差错情况和提供有关异常情况的报告。</p>
</li>
<li><p>ICMP 是互联网的标准协议。</p>
</li>
<li><p>但 ICMP 不是高层协议，而是 IP 层的协议。</p>
</li>
</ul>
<p>ICMP 报文的格式 ：</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB228e199730d1f2a50aff8392ca73a953?method=download&shareKey=4fc1b2722d0b613232f4d3cf21deb5f6" alt="1675740285898"></p>
<h3 id="ICMP-报文的种类"><a href="#ICMP-报文的种类" class="headerlink" title="ICMP 报文的种类"></a>ICMP 报文的种类</h3><p>2 种：<strong>差错报告报文</strong>，<strong>询问报文</strong>。  </p>
<table>
<thead>
<tr>
<th>ICMP报文种类</th>
<th>类型的值</th>
<th>ICMP报文的类型</th>
</tr>
</thead>
<tbody><tr>
<td>差错报告报文</td>
<td>3</td>
<td>终点不可达</td>
</tr>
<tr>
<td>差错报告报文</td>
<td>11</td>
<td>时间超过</td>
</tr>
<tr>
<td>差错报告报文</td>
<td>12</td>
<td>参数问题</td>
</tr>
<tr>
<td>差错报告报文</td>
<td>5</td>
<td>改变路由 (Redirect)</td>
</tr>
<tr>
<td>询问报文</td>
<td>8或0</td>
<td>回送 (Echo) 请求或回答</td>
</tr>
<tr>
<td>询问报文</td>
<td>13或14</td>
<td>时间戳 (Timestamp) 请求或回答</td>
</tr>
</tbody></table>
<h4 id="不应发送-ICMP-差错报告报文的几种情况"><a href="#不应发送-ICMP-差错报告报文的几种情况" class="headerlink" title="不应发送 ICMP 差错报告报文的几种情况"></a>不应发送 ICMP 差错报告报文的几种情况</h4><ul>
<li><p>对 ICMP 差错报告报文不再发送 ICMP 差错报告报文。</p>
</li>
<li><p>对第一个分片的数据报片的所有后续数据报片都不发送 ICMP 差错报告报文。</p>
</li>
<li><p>对具有多播地址的数据报都不发送 ICMP 差错报告报文。</p>
</li>
<li><p>对具有特殊地址（如127.0.0.0 或 0.0.0.0）的数据报不发送 ICMP 差错报告报文。</p>
</li>
</ul>
<h4 id="ICMP-询问报文"><a href="#ICMP-询问报文" class="headerlink" title="ICMP 询问报文"></a>ICMP 询问报文</h4><p>(1) 回送请求和回答</p>
<ul>
<li>由主机或路由器向一个特定的目的主机发出的询问。</li>
<li>收到此报文的主机必须给源主机或路由器发送 ICMP 回送回答报文。</li>
<li>这种询问报文用来测试目的站是否可达，以及了解其有关状态。</li>
</ul>
<p>(2) 时间戳请求和回答：</p>
<ul>
<li>请某台主机或路由器回答当前的日期和时间。</li>
<li>时间戳回答报文中有一个 32 位的字段，其中写入的整数代表从1900 年 1 月 1 日起到当前时刻一共有多少秒。</li>
<li>时间戳请求与回答可用于时钟同步和时间测量。</li>
</ul>
<h3 id="ICMP-的应用举例"><a href="#ICMP-的应用举例" class="headerlink" title="ICMP 的应用举例"></a>ICMP 的应用举例</h3><p><strong>PING</strong> (Packet InterNet Groper) </p>
<ul>
<li>用来测试两个主机之间的连通性。</li>
<li>使用了 ICMP 回送请求与回送回答报文。</li>
<li>是应用层直接使用网络层 ICMP 的例子，没有通过运输层的 TCP 或 UDP。</li>
</ul>
<p><strong>Traceroute</strong></p>
<ul>
<li>这是UNIX操作系统中名字。在 Windows 操作系统中这个命令是 <strong>tracert</strong>。</li>
<li>用来跟踪一个分组从源点到终点的路径。</li>
<li>它利用 IP 数据报中的 TTL 字段、ICMP 时间超过差错报告报文和ICMP 终点不可达差错报告报文实现对从源点到终点的路径的跟踪。</li>
</ul>
<h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><h3 id="IPv6-的基本首部"><a href="#IPv6-的基本首部" class="headerlink" title="IPv6 的基本首部"></a>IPv6 的基本首部</h3><ul>
<li>IPv6 仍支持<strong>无连接的传送</strong>。</li>
<li>将协议数据单元 PDU 称为<strong>分组</strong> (packet) 。</li>
<li><strong>主要变化</strong>：<ol>
<li><strong>更大的地址空间</strong>。 将地址从 IPv4 的 32 位 增大到了 128 位。 </li>
<li><strong>扩展的地址层次结构</strong>。可以划分为更多的层次。 </li>
<li><strong>灵活的首部格式</strong>。定义了许多可选的扩展首部。</li>
<li><strong>改进的选项</strong>。允许数据报包含有选项的控制信息，其选项放在有效载荷中。</li>
<li><strong>允许协议继续扩充</strong>。更好地适应新的应用。</li>
<li><strong>支持即插即用</strong>（即自动配置）。不需要使用 DHCP。</li>
<li><strong>支持资源的预分配</strong>。支持实时视像等要求保证一定的带宽和时延的应用。</li>
<li><strong>IPv6 首部改为 8 字节对齐</strong>。首部长度必须是 8 字节的整数倍。</li>
</ol>
</li>
</ul>
<h4 id="IPv6-数据报的一般形式"><a href="#IPv6-数据报的一般形式" class="headerlink" title="IPv6 数据报的一般形式"></a>IPv6 数据报的一般形式</h4><ul>
<li>由两大部分组成：<ol>
<li>基本首部 (base header)</li>
<li>有效载荷 (payload)。有效载荷也称为净负荷。有效载荷允许有零个或多个扩展首部 (extension header)，再后面是数据部分。</li>
</ol>
</li>
</ul>
<h4 id="IPv6-数据报的基本首部"><a href="#IPv6-数据报的基本首部" class="headerlink" title="IPv6 数据报的基本首部"></a>IPv6 数据报的基本首部</h4><p>首部长度：固定的 40 字节，称为基本首部。</p>
<p>首部字段数：只有 8 个。</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEBe76e3c00b84147d61570c8b7834c5356?method=download&shareKey=cb41a9f4e7f979c5cd99c9d2848d5a9a" alt="1675741510876"></p>
<ul>
<li><strong>版本</strong>(version)—— 4 位。它指明了协议的版本，对 IPv6 该字段总是 6。</li>
<li><strong>通信量类</strong>(traffic class)—— 8 位。这是为了区分不同的 IPv6 数据报的类别或优先级。目前正在进行不同的通信量类性能的实验。 </li>
<li><strong>流标号</strong>(flow label)—— 20 位。 “流”是互联网络上从特定源点到特定终点的一系列数据报， “流”所经过的路径上的路由器都保证指明的服务质量。所有属于同一个流的数据报都具有同样的流标号。</li>
<li><strong>有效载荷长度</strong>(payload length)—— 16 位。它指明 IPv6 数据报除基本首部以外的字节数（所有扩展首部都算在有效载荷之内），其最大值是 64 KB。  </li>
<li><strong>下一个首部</strong>(next header)—— 8 位。相当于 IPv4 的协议字段或可选字段。</li>
<li><strong>跳数限制</strong>(hop limit)—— 8 位。源站在数据报发出时即设定跳数限制。路由器在转发数据报时将跳数限制字段中的值减 1。当跳数限制的值为零时，就要将此数据报丢弃。</li>
<li><strong>源地址</strong>—— 128 位。是数据报的发送站的 IP 地址。  </li>
<li><strong>目的地址</strong>—— 128 位。是数据报的接收站的 IP 地址。</li>
</ul>
<h4 id="IPv6-的六种扩展首部"><a href="#IPv6-的六种扩展首部" class="headerlink" title="IPv6 的六种扩展首部"></a>IPv6 的六种扩展首部</h4><ul>
<li>逐跳选项</li>
<li>路由选择</li>
<li>分片</li>
<li>鉴别</li>
<li>封装安全有效载荷</li>
<li>目的站选项</li>
</ul>
<h3 id="IPv6-的地址"><a href="#IPv6-的地址" class="headerlink" title="IPv6 的地址"></a>IPv6 的地址</h3><ul>
<li>三种基本类型：<ol>
<li>单播 (unicast)：传统的点对点通信。</li>
<li>多播 (multicast)：一点对多点的通信。</li>
<li>任播 (anycast)：IPv6 增加的一种类型。任播的终点是一组计算机，但数据报在交付时只交付其中的一个。通常是按照路由算法得出的距离最近的一个。</li>
</ol>
</li>
</ul>
<h4 id="节点与接口"><a href="#节点与接口" class="headerlink" title="节点与接口"></a>节点与接口</h4><ul>
<li>IPv6 将实现 IPv6 的主机和路由器均称为节点。</li>
<li>一个节点可能有多个与链路相连的接口。</li>
<li>IPv6 地址是分配给节点上接口的。<ol>
<li>一个具有多个接口的节点可以有多个单播地址。</li>
<li>其中的任何一个地址都可以当作到达该节点的目的地址。</li>
</ol>
</li>
</ul>
<h4 id="冒号十六进制记法"><a href="#冒号十六进制记法" class="headerlink" title="冒号十六进制记法"></a>冒号十六进制记法</h4><p>在 IPv6 中，每个地址占 128 位，地址空间大于 3.4*10^38 。</p>
<p>使用冒号十六进制记法(colon hexadecimal notation, 简写为 colon hex)：16 位的值用十六进制值表示，各值之间用冒号分隔。</p>
<p>点分十进制数记法： 104.230.140.100.255.255.255.255.0.0.17.128.150.10.255.255 </p>
<p>冒号十六进制记法： 68E6:8C64:FFFF:FFFF:0000:1180:960A:FFFF </p>
<p><strong>冒号十六进制记法</strong>： 68E6:8C64:FFFF:FFFF:0:1180:960A:FFFF </p>
<h4 id="零压缩"><a href="#零压缩" class="headerlink" title="零压缩"></a>零压缩</h4><p><strong>零压缩</strong> (zero compression)：一串连续的零可以用一对冒号取代。 </p>
<p>FF05:0:0:0:0:0:0:B3 可压缩为</p>
<p>FF05::B3</p>
<p>注意：在任一地址中，只能使用一次零压缩。 </p>
<h3 id="从-IPv4-向-IPv6-过渡"><a href="#从-IPv4-向-IPv6-过渡" class="headerlink" title="从 IPv4 向 IPv6 过渡"></a>从 IPv4 向 IPv6 过渡</h3><h3 id="ICMPv6"><a href="#ICMPv6" class="headerlink" title="ICMPv6"></a>ICMPv6</h3><h2 id="互联网的路由选择协议"><a href="#互联网的路由选择协议" class="headerlink" title="互联网的路由选择协议"></a>互联网的路由选择协议</h2><h3 id="有关路由选择协议的几个基本概念"><a href="#有关路由选择协议的几个基本概念" class="headerlink" title="有关路由选择协议的几个基本概念"></a>有关路由选择协议的几个基本概念</h3><h3 id="内部网关协议-RIP"><a href="#内部网关协议-RIP" class="headerlink" title="内部网关协议 RIP"></a>内部网关协议 RIP</h3><h4 id="协议-RIP-的工作原理"><a href="#协议-RIP-的工作原理" class="headerlink" title="协议 RIP 的工作原理"></a>协议 RIP 的工作原理</h4><ul>
<li>路由信息协议 RIP (Routing Information Protocol) 是一种<strong>分布式的、基于距离向量</strong>的路由选择协议。</li>
<li>互联网的标准协议。</li>
<li>最大优点：<strong>简单</strong>。</li>
<li>要求网络中的每个路由器都要<strong>维护</strong>从它自己到其他每一个目的网络的<strong>距离记录</strong>。</li>
</ul>
<h5 id="RIP“距离”的定义"><a href="#RIP“距离”的定义" class="headerlink" title="RIP“距离”的定义"></a>RIP“距离”的定义</h5><p><img src="https://note.youdao.com/yws/api/personal/file/WEB77954aa3fcbabeb5a525315421b9ecdc?method=download&shareKey=50f3cf1b3ed6a1cbb0c1f9f8e68aaa55" alt="1675743105285"></p>
<p>“距离”的最大值为 16 时即相当于不可达。</p>
<p>RIP 不能在两个网络之间同时使用多条路由，只选择距离最短”的路由。</p>
<h5 id="RIP-协议的三个特点"><a href="#RIP-协议的三个特点" class="headerlink" title="RIP 协议的三个特点"></a>RIP 协议的三个特点</h5><ol>
<li>仅和<strong>相邻</strong>路由器交换信息。 </li>
<li>交换的信息是当前本路由器所知道的<strong>全部</strong>信息，即自己的路由表。 </li>
<li>按<strong>固定时间间隔</strong>交换路由信息，例如，每隔 30 秒。当网络拓扑发生变化时，路由器也及时向相邻路由器通告拓扑变化后的路由信息。</li>
</ol>
<h5 id="路由表的建立"><a href="#路由表的建立" class="headerlink" title="路由表的建立"></a>路由表的建立</h5><ul>
<li><p>路由器在<strong>刚刚开始工作</strong>时，<strong>路由表是空的</strong>。</p>
</li>
<li><p>然后，得到<strong>直接连接</strong>的网络的距离（此距离定义为 1）。</p>
</li>
<li><p>之后，每一个路由器也只和数目非常有限的相邻路由器<strong>交换并更新</strong>路由信息。</p>
</li>
<li><p>经过若干次更新后，所有的路由器<strong>最终</strong>都会知道到达本自治系统中任何一个网络的<strong>最短距离</strong>和下一跳路由器的地址。</p>
</li>
<li><p>RIP 协议的<strong>收敛</strong> (convergence) 过程较快。“收敛”就是在自治系统中所有的结点都得到正确的路由选择信息的过程。</p>
</li>
</ul>
<h5 id="路由表的主要信息："><a href="#路由表的主要信息：" class="headerlink" title="路由表的主要信息："></a>路由表的主要信息：</h5><table>
<thead>
<tr>
<th>目的网络</th>
<th>距离（最短）</th>
<th>下一跳地址</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h5 id="路由表更新规则："><a href="#路由表更新规则：" class="headerlink" title="路由表更新规则："></a>路由表更新规则：</h5><p>​    使用<strong>距离向量算法</strong>找出到达每个目的网络的最短距离。</p>
<h4 id="距离向量算法"><a href="#距离向量算法" class="headerlink" title="距离向量算法"></a>距离向量算法</h4><p>对每个相邻路由器（假设其地址为 X）发送过来的 RIP 报文，路由器：</p>
<p>(1) 修改 RIP 报文中的所有项目（即路由）：把“下一跳”字段中的地址都改为 X，并把所有的“距离”字段的值加 1。</p>
<p>(2) 对修改后的 RIP 报文中的每一个项目，重复以下步骤：</p>
<p>​    若路由表中没有目的网络N，则把该项目添加到路由表中。否则</p>
<p>​        若路由表中网络 N 的下一跳路由器为 X，则用收到的项目替换原路由表中的项目。否则</p>
<p>​           若收到项目中的距离小于路由表中的距离，则用收到项目更新原路由表中的项目。否则</p>
<p>​               什么也不做。</p>
<p>(3) 若 3 分钟还未收到相邻路由器的更新路由表，则把此相邻路由器记为不可达路由器，即将距离置为 16（表示不可达）。</p>
<p>(4) 返回。</p>
<h5 id="RIP2-报文"><a href="#RIP2-报文" class="headerlink" title="RIP2 报文"></a>RIP2 报文</h5><h4 id="坏消息传播得慢"><a href="#坏消息传播得慢" class="headerlink" title="坏消息传播得慢"></a>坏消息传播得慢</h4><ul>
<li>RIP 协议特点：好消息传播得快，坏消息传播得慢。</li>
<li>问题：坏消息传播得慢（慢收敛）。</li>
</ul>
<p>当网络出现故障时，要经过比较长的时间才能将此信息（坏消息）传送到所有的路由器。 </p>
<h5 id="RIP-协议的优缺点"><a href="#RIP-协议的优缺点" class="headerlink" title="RIP 协议的优缺点"></a>RIP 协议的优缺点</h5><p><strong>优点</strong>：</p>
<ol>
<li>实现简单，开销较小。</li>
</ol>
<p><strong>缺点</strong>：</p>
<ol>
<li>网络规模有限。最大距离为 15（16 表示不可达）。</li>
<li>交换的路由信息为完整路由表，开销较大。 </li>
<li>坏消息传播得慢，收敛时间过长。</li>
</ol>
<h3 id="内部网关协议-OSPF"><a href="#内部网关协议-OSPF" class="headerlink" title="内部网关协议 OSPF"></a>内部网关协议 OSPF</h3><ul>
<li><p>开放最短路径优先 OSPF (Open Shortest Path First)是为克服 RIP 的缺点在 1989 年开发出来的。</p>
</li>
<li><p><strong>原理很简单，但实现很复杂。</strong></p>
</li>
<li><p>使用了 Dijkstra 提出的最短路径算法 SPF。</p>
</li>
<li><p>采用<strong>分布式的链路状态协议</strong> (link state protocol)。 </p>
</li>
<li><p>现在使用 OSPFv2。</p>
</li>
</ul>
<h5 id="三个主要特点"><a href="#三个主要特点" class="headerlink" title="三个主要特点"></a>三个主要特点</h5><ul>
<li>采用<strong>洪泛法</strong> (flooding)，向本自治系统中<strong>所有路由器</strong>发送信息。</li>
<li>发送的信息是与本路由器相邻的所有路由器的<strong>链路状态</strong>，但这只是路由器所知道的部分信息。<ul>
<li><strong>链路状态</strong>：说明本路由器都和哪些路由器<strong>相邻</strong>，以及该链路的<strong>度量</strong> (metric)。</li>
</ul>
</li>
<li>当链路状态发生变化或每隔一段时间（如30分钟），路由器才用洪泛法向所有路由器发送此信息。</li>
</ul>
<h5 id="链路状态数据库-link-state-database-"><a href="#链路状态数据库-link-state-database-" class="headerlink" title="链路状态数据库 (link-state database)  "></a>链路状态数据库 (link-state database)  </h5><h5 id="OSPF-将自治系统划分为两种不同的区域-area"><a href="#OSPF-将自治系统划分为两种不同的区域-area" class="headerlink" title="OSPF 将自治系统划分为两种不同的区域 (area)"></a>OSPF 将自治系统划分为两种不同的区域 (area)</h5><h5 id="OSPF-中的路由器"><a href="#OSPF-中的路由器" class="headerlink" title="OSPF 中的路由器"></a>OSPF 中的路由器</h5><h5 id="划分区域优点和缺点"><a href="#划分区域优点和缺点" class="headerlink" title="划分区域优点和缺点"></a>划分区域优点和缺点</h5><ul>
<li>优点：<ul>
<li>减少了整个网络上的通信量。</li>
<li>减少了需要维护的状态数量。</li>
</ul>
</li>
<li>缺点：<ul>
<li>交换信息的种类增多了。</li>
<li>使 OSPF 协议更加复杂了。</li>
</ul>
</li>
</ul>
<p>分层次划分区域的好处：</p>
<p>使每一个区域内部交换路由信息的通信量大大减小，因而使 OSPF 协议能够用于规模很大的自治系统中。</p>
<h5 id="其他特点"><a href="#其他特点" class="headerlink" title="其他特点"></a>其他特点</h5><ul>
<li>对于不同类型的业务可计算出不同的路由。</li>
<li>可实现多路径间的负载均衡（load balancing）。</li>
<li>所有在 OSPF 路由器之间交换的分组都具有鉴别的功能。</li>
<li>支持可变长度的子网划分和无分类编址 CIDR。</li>
<li>32 位的序号，序号越大状态就越新。全部序号空间在 600 年内不会产生重复号。</li>
</ul>
<h4 id="OSPF-的五种分组类型-"><a href="#OSPF-的五种分组类型-" class="headerlink" title="OSPF 的五种分组类型 "></a>OSPF 的五种分组类型 </h4><ol>
<li>问候 (Hello) 分组。</li>
<li>数据库描述 (Database Description) 分组。</li>
<li>链路状态请求 (Link State Request) 分组。</li>
<li>链路状态更新 (Link State Update) 分组。</li>
<li>链路状态确认 (Link State Acknowledgment)分组。</li>
</ol>
<h5 id="OSPF-分组用-IP-数据报传送"><a href="#OSPF-分组用-IP-数据报传送" class="headerlink" title="OSPF 分组用 IP 数据报传送"></a>OSPF 分组用 IP 数据报传送</h5><h5 id="OSPF-工作过程"><a href="#OSPF-工作过程" class="headerlink" title="OSPF 工作过程"></a>OSPF 工作过程</h5><ol>
<li><p><strong>确定邻站可达</strong>。</p>
<ul>
<li>相邻路由器每隔 10 秒钟要交换一次问候分组。</li>
<li>若有 40 秒钟没有收到某个相邻路由器发来的问候分组，则可认为该相邻路由器是不可达的。</li>
</ul>
</li>
<li><p><strong>同步链路状态数据库</strong>。</p>
<ul>
<li><p><strong>同步</strong>：指不同路由器的<strong>链路状态数据库的内容</strong>是一样的。</p>
</li>
<li><p>两个同步的路由器叫做<strong>完全邻接</strong>的 (fully adjacent) 路由器。</p>
<p>（不是完全邻接的路由器：它们虽然在物理上是相邻的，但其链路状态数据库并没有达到一致。 ）</p>
</li>
</ul>
</li>
<li><p><strong>更新链路状态</strong>。</p>
<ul>
<li>只要链路状态发生变化，路由器就使用链路状态更新分组，采用<strong>可靠的洪泛法</strong>向全网更新链路状态。</li>
<li>为确保链路状态数据库与全网的状态保持一致，OSPF 还规定：每隔一段时间，如 30 分钟，要刷新一次数据库中的链路状态。</li>
</ul>
</li>
</ol>
<blockquote>
<p>OSPF 链路状态只涉及相邻路由器，与整个互联网的规模并无直接关系，因此当互联网规模很大时，OSPF 协议要比距离向量协议 RIP 好得多。</p>
<p>OSPF 没有“坏消息传播得慢”的问题，收敛数度快。</p>
</blockquote>
<h5 id="指定的路由器-DR"><a href="#指定的路由器-DR" class="headerlink" title="指定的路由器 DR"></a>指定的路由器 DR</h5><h3 id="外部网关协议-BGP"><a href="#外部网关协议-BGP" class="headerlink" title="外部网关协议 BGP"></a>外部网关协议 BGP</h3><p>BGP 是不同自治系统的路由器之间交换路由信息的协议。 </p>
<p>BGP 较新版本是 2006 年 1 月发表的 BGP-4（BGP 第 4 个版本），即 RFC 4271 ~ 4278。 </p>
<p>可以将 BGP-4 简写为 BGP。 </p>
<h4 id="协议-BGP-的主要特点"><a href="#协议-BGP-的主要特点" class="headerlink" title="协议 BGP 的主要特点"></a>协议 BGP 的主要特点</h4><ul>
<li>用于自治系统 AS 之间的路由选择。</li>
<li>只能是力求选择出一条能够到达目的网络且<strong>比较好的路由</strong>（不能兜圈子），而<strong>并非要计算出一条最佳路由。</strong><ol>
<li>互联网的规模太大，使得自治系统AS之间路由选择非常困难。</li>
<li>自治系统AS之间的路由选择必须考虑有关策略。</li>
</ol>
</li>
<li>采用了<strong>路径向量</strong> (path vector) 路由选择协议。</li>
</ul>
<h5 id="BGP-发言者-BGP-speaker"><a href="#BGP-发言者-BGP-speaker" class="headerlink" title="BGP 发言者 (BGP speaker)"></a>BGP 发言者 (BGP speaker)</h5><p><img src="https://note.youdao.com/yws/api/personal/file/WEB89110da317e5a40875e64426860dc6ac?method=download&shareKey=5798d1b6062b5f49c51afb4cc669f1ba" alt="1675757926074"></p>
<p>对等 BGP 发言者（边界路由器）在 AS 之间交换信息 </p>
<h5 id="eBGP-连接和-iBGP-连接"><a href="#eBGP-连接和-iBGP-连接" class="headerlink" title="eBGP 连接和 iBGP 连接"></a>eBGP 连接和 iBGP 连接</h5><p>在 AS 之间， BGP 发言者在半永久性 TCP 连接（端口号为179）上建立 BGP 会话(session)。这种连接又称为 eBGP 连接。</p>
<p>在 AS 内部，任何相互通信的两个路由器之间必须有一个逻辑连接（也使用 TCP 连接）。AS 内部所有的路由器之间的通信是全连通的。这种连接常称为 iBGP 连接。</p>
<p><strong>eBGP (external BGP) 连接</strong>：运行 eBGP 协议，在不同 AS 之间交换路由信息。</p>
<p><strong>iBGP (internal BGP) 连接</strong>：运行 iBGP 协议， 在 AS 内部的路由器之间交换 BGP 路由信息。</p>
<h5 id="eBGP-和-iBGP"><a href="#eBGP-和-iBGP" class="headerlink" title="eBGP 和 iBGP"></a>eBGP 和 iBGP</h5><ul>
<li><p>同一个协议 BGP（使用的报文类型、使用的属性、使用的状态机等都完全一样）。</p>
</li>
<li><p>但它们在通报前缀时采用的规则不同：</p>
<ul>
<li>在 eBGP 连接的对等端得知的前缀信息，可以通报给一个 iBGP 连接的对等端。反过来也是可以的。</li>
<li>但从 iBGP 连接的对等端得知的前缀信息，则不能够通报给另一个 iBGP 连接的对等端。</li>
</ul>
</li>
</ul>
<h4 id="BGP-路由信息"><a href="#BGP-路由信息" class="headerlink" title="BGP 路由信息"></a>BGP 路由信息</h4><p>BGP 路由 &#x3D; [ 前缀, BGP属性 ] &#x3D; [ 前缀, AS-PATH, NEXT-HOP ]</p>
<ul>
<li><p>前缀：指明到哪一个子网（用 CIDR 记法表示）。 </p>
</li>
<li><p>BGP 属性：最重要的两个属性是</p>
<ul>
<li>自治系统路径 AS-PATH </li>
<li>下一跳 NEXT-HOP。</li>
</ul>
</li>
</ul>
<h4 id="三种不同的自治系统-AS"><a href="#三种不同的自治系统-AS" class="headerlink" title="三种不同的自治系统 AS"></a>三种不同的自治系统 AS</h4><h4 id="BGP-的路由选择"><a href="#BGP-的路由选择" class="headerlink" title="BGP 的路由选择"></a>BGP 的路由选择</h4><h4 id="BGP-4-的四种报文"><a href="#BGP-4-的四种报文" class="headerlink" title="BGP-4 的四种报文"></a>BGP-4 的四种报文</h4><h3 id="路由器的构成"><a href="#路由器的构成" class="headerlink" title="路由器的构成"></a>路由器的构成</h3><ul>
<li><p>路由器工作在网络层，用于互连网络。</p>
</li>
<li><p>是互联网中的关键设备。</p>
</li>
<li><p><strong>路由器的主要工作：转发分组</strong>。</p>
<p>把从某个输入端口收到的分组，按照分组要去的目的地（即目的网络），把该分组从路由器的某个合适的输出端口转发给下一跳路由器。</p>
</li>
</ul>
<h4 id="路由器的结构"><a href="#路由器的结构" class="headerlink" title="路由器的结构"></a>路由器的结构</h4><h4 id="交换结构"><a href="#交换结构" class="headerlink" title="交换结构"></a>交换结构</h4>]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络-题目</title>
    <url>/2023/02/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%A2%98%E7%9B%AE/</url>
    <content><![CDATA[<p>计算机网络的一些题目</p>
<h4 id="在-TCP-x2F-IP-体系结构中，直接为-ICMP-提供服务的协议是-。"><a href="#在-TCP-x2F-IP-体系结构中，直接为-ICMP-提供服务的协议是-。" class="headerlink" title="在 TCP&#x2F;IP 体系结构中，直接为 ICMP 提供服务的协议是 。"></a>在 TCP&#x2F;IP 体系结构中，直接为 ICMP 提供服务的协议是 。</h4><p>A、PPP</p>
<p><strong>B、IP</strong></p>
<p>C、UDP</p>
<p>D、TCP</p>
<blockquote>
<p>正确答案：B</p>
<p>官方解析：</p>
<p>ICMP 报文作为数据字段封装在 IP 分组中，因此， IP 协议直接为 ICMP 提供服务。 UDP 和 TCP 都是传输层协议，为应用层提供服务。 PPP 协议是链路层协议，为网络层提供服务。</p>
</blockquote>
<hr>
<h4 id="常用的信道复用技术有（-）"><a href="#常用的信道复用技术有（-）" class="headerlink" title="常用的信道复用技术有（    ）"></a>常用的信道复用技术有（    ）</h4><p><strong>A、TDM</strong></p>
<p><strong>B、CDM</strong></p>
<p><strong>C、FDM</strong></p>
<p><strong>D、WDM</strong></p>
<blockquote>
<p>正确答案：ABCD</p>
<p>解析：</p>
<p>频分复用FDM ( Frequency Division Multiplexing ) </p>
<p>时分复用TDM ( Time Division Multiplexing) </p>
<p>码分复用CDM ( Code Division Multiplexing) </p>
<p>波分复用WDM ( Wavelength Division Multiplexing)</p>
<p>传统的三种为：频分、时分、统计时分（STDM)</p>
</blockquote>
<hr>
<h4 id="在常用的网络协议中，-是面向连接的、有重传功能的协议。"><a href="#在常用的网络协议中，-是面向连接的、有重传功能的协议。" class="headerlink" title="在常用的网络协议中，___是面向连接的、有重传功能的协议。"></a>在常用的网络协议中，___是面向连接的、有重传功能的协议。</h4><p>A、IP</p>
<p><strong>B、TCP</strong></p>
<p>C、UDP</p>
<p>D、DXP</p>
<blockquote>
<p> 正确答案：B</p>
<p>官方解析：</p>
<p>TCP协议为传输控制协议面向连接，IP为网际协议，UDP为用户数据报协议。</p>
</blockquote>
<hr>
<h4 id="交换机、HDLC、PPP属于OSI模型的哪一层？"><a href="#交换机、HDLC、PPP属于OSI模型的哪一层？" class="headerlink" title="交换机、HDLC、PPP属于OSI模型的哪一层？"></a>交换机、HDLC、PPP属于OSI模型的哪一层？</h4><p>A、物理层</p>
<p><strong>B、数据链路层</strong></p>
<p>C、网络层</p>
<p>D、传输层</p>
<blockquote>
<p>正确答案：B</p>
</blockquote>
<hr>
<h4 id="以太网交换机中的-端口-x2F-MAC-地址映射表（）"><a href="#以太网交换机中的-端口-x2F-MAC-地址映射表（）" class="headerlink" title="以太网交换机中的 端口&#x2F;MAC 地址映射表（）"></a>以太网交换机中的 端口&#x2F;MAC 地址映射表（）</h4><p>A、是由交换机的生产厂商建立的</p>
<p><strong>B、是交换机在数据转发过程中通过学习动态建立的</strong></p>
<p>C、是由网络管理员建立的</p>
<p>D、是由网络用户利用特殊的命令建立的</p>
<blockquote>
<p>正确答案：B</p>
<p>解析：</p>
<ol>
<li>首先，以太网交换机(或第二层交换机)实际上就是一个多接口的网桥。</li>
<li>是一种即插即用设备，其内部的帧转发表是通过自学习算法自动地逐渐建立起来的。</li>
</ol>
<p><a href="https://www.nowcoder.com/questionTerminal/e63dfc03119b44e0a43dad5649642c65">以太网交换机中的 端口&#x2F;MAC 地址映射表</a> </p>
</blockquote>
<hr>
<h4 id="数据分段在OSI哪一层"><a href="#数据分段在OSI哪一层" class="headerlink" title="数据分段在OSI哪一层( )"></a>数据分段在OSI哪一层( )</h4><p>A、应用层</p>
<p>B、表示层</p>
<p><strong>C、传输层</strong></p>
<p>D、网络层</p>
<p>E、数据链路层</p>
<p>F、会话层</p>
<blockquote>
<p>正确答案：C</p>
<p>官方解析：</p>
<p>数据分段是在传输层中完成的，传输层定义了一些传输数据的协议和端口号（WWW端口80等），如：TCP（传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据），UDP（用户数据报协议，与TCP特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如QQ聊天数据就是通过这种方式传输的）。主要是将从下层接收的数据进行分段和传输，到达目的地址后再进行重组。常常把这一层数据叫做段。</p>
</blockquote>
<hr>
<h4 id="在-Internet-中不需运行-IP-协议的设备是-（）"><a href="#在-Internet-中不需运行-IP-协议的设备是-（）" class="headerlink" title="在 Internet 中不需运行 IP 协议的设备是 （）"></a>在 Internet 中不需运行 IP 协议的设备是 （）</h4><p>A、路由器</p>
<p><strong>B、集线器</strong></p>
<p>C、服务器</p>
<p>D、工作站</p>
<blockquote>
<p>正确答案：B</p>
<p>路由器是网络层设备，需要运行IP协议；</p>
<p>服务器和工作站的网络层也运行IP协议；</p>
<p>集线器是物理层设备，不需要运行IP协议。</p>
<p>需要使用IP协议的是数据链路层以上的,数据链路层级物理层不需要使用IP协议 </p>
<p><a href="https://www.nowcoder.com/questionTerminal/c1ec9885e28f45fa9c3b6a19a7172ba7">在 Internet 中不需运行 IP 协议的设备是 </a> </p>
</blockquote>
<hr>
<h4 id="在数据通信中，表示数据传输“数量”与“质量”的指标是（）"><a href="#在数据通信中，表示数据传输“数量”与“质量”的指标是（）" class="headerlink" title="在数据通信中，表示数据传输“数量”与“质量”的指标是（）"></a>在数据通信中，表示数据传输“数量”与“质量”的指标是（）</h4><p><strong>A、数据传输率和误码率</strong></p>
<p>B、系统吞吐率和延迟</p>
<p>C、误码率和数据传输率</p>
<p>D、信道容量和带宽</p>
<blockquote>
<p>正确答案：A</p>
<p>你的答案：B</p>
<p>解析：</p>
<p>数据传输率  每秒钟传输数据的byte数。 </p>
<p>误码率  传输中的误码，占传输的总码数 </p>
<p>吞吐率指的是 在单位时间内通过某信道或者某个节点成功交付的平均速率。 </p>
<p>网络延迟指的是在进行网络传输的时候超额的网络流量导致设备反应缓慢，从而产生网络延迟。 </p>
<p>信道容量  信道能无错误传输的最大信息率，单位byte&#x2F;s。 </p>
<p>带宽  发送数据的速度一般单位是byte&#x2F;s。</p>
<p><a href="https://www.nowcoder.com/questionTerminal/7a3e52d3547a48b4bc6c542aeaa4c638">在数据通信中，表示数据传输“数量”与“质量”的指标是</a> </p>
</blockquote>
<hr>
<h4 id="OSI参考模型中的物理层负责下列哪一项功能？"><a href="#OSI参考模型中的物理层负责下列哪一项功能？" class="headerlink" title="OSI参考模型中的物理层负责下列哪一项功能？"></a>OSI参考模型中的物理层负责下列哪一项功能？</h4><p>A、格式化报文</p>
<p>B、为数据选择通过网路的路由</p>
<p><strong>C、定义连接到媒体的特征</strong></p>
<p>D、提供远程访问文件的能力。</p>
<blockquote>
<p>正确答案：C</p>
<p>解析：</p>
<p>物理层是OSI参考模型的最低层，它利用传输介质为通信的主机之间建立，管理和释放物理连接，实现比特流的透明传输（传输单位是比特），保证比特流通过传输介质的正确传输。</p>
</blockquote>
<hr>
<h4 id="internet骨干网中的路由器通过BGP协议传输数据-BGP协议使用传输层的协议与端口有（-）"><a href="#internet骨干网中的路由器通过BGP协议传输数据-BGP协议使用传输层的协议与端口有（-）" class="headerlink" title="internet骨干网中的路由器通过BGP协议传输数据,BGP协议使用传输层的协议与端口有（      ）"></a>internet骨干网中的路由器通过BGP协议传输数据,BGP协议使用传输层的协议与端口有（      ）</h4><p>A、udp协议</p>
<p><strong>B、tcp协议</strong></p>
<p><strong>C、端口179</strong></p>
<p>D、端口169</p>
<blockquote>
<p>正确答案：BC</p>
<p>解析：</p>
<p>在BGP中，路由器对使用179端口的半永久TCP连接来交换选路信息。 </p>
</blockquote>
<hr>
<h4 id="一个标准的-IP-地址-128-202-99-65，所属的网络为（-）"><a href="#一个标准的-IP-地址-128-202-99-65，所属的网络为（-）" class="headerlink" title="一个标准的 IP 地址 128.202.99.65，所属的网络为（ ）"></a>一个标准的 IP 地址 128.202.99.65，所属的网络为（ ）</h4><p>A、128.0.0.0</p>
<p>B、128.202.0.0</p>
<p>C、128.202.99.0</p>
<p>D、128.202.99.65</p>
<blockquote>
<p>正确答案：B</p>
<p>解析：</p>
<p>首先，需要知道IP地址的划分，A类地址网络ID占了8位，最高位为0；B类地址网络ID占了16位，最高两位为1、0；C类地址网络ID占了24位，最高三位为1、1、0. </p>
<p>根据题目可以得出该地址是一个B类地址（128转二进制为10000000），结合B类地址的定义，网络ID占16位，故前两个字节表示网络段，格式为X.X.0.0，因此选B</p>
</blockquote>
<hr>
<h4 id="IP-数据报穿越-Internet-过程中有可能被分片。在-IP-数据报分片以后，下列哪个设备负责数据报的重组（-）？"><a href="#IP-数据报穿越-Internet-过程中有可能被分片。在-IP-数据报分片以后，下列哪个设备负责数据报的重组（-）？" class="headerlink" title="IP 数据报穿越 Internet 过程中有可能被分片。在 IP 数据报分片以后，下列哪个设备负责数据报的重组（ ）？"></a>IP 数据报穿越 Internet 过程中有可能被分片。在 IP 数据报分片以后，下列哪个设备负责数据报的重组（ ）？</h4><p>A、源主机</p>
<p><strong>B、目的主机</strong></p>
<p>C、分片途径的路由器</p>
<p>D、分片途径路由器或目的主机</p>
<blockquote>
<p>正确答案：B</p>
<p>解析：</p>
<p>源主机和路由器都能分片，只有目的主机能重组。 </p>
<p><a href="https://www.nowcoder.com/questionTerminal/3439b2194a754723bcc77fca542c61e0">IP 数据报穿越 Internet 过程中有可能被分片</a> </p>
</blockquote>
<hr>
<h4 id="物理层的主要功能是？（-）"><a href="#物理层的主要功能是？（-）" class="headerlink" title="物理层的主要功能是？（    ）"></a>物理层的主要功能是？（    ）</h4><p>A、定义物理地址</p>
<p>B、建立端到端连接</p>
<p><strong>C、在终端设备间传送比特流</strong></p>
<p>D、将数据从一个主机传送给另一个主机</p>
<blockquote>
<p>正确答案：C</p>
<p>解析：</p>
<p>A.数据链路层分为：逻辑链路控制子层（LLC）、媒体访问控制子层（MAC）。所以是数据链路层定义了物理地址（MAC地址）。 </p>
<p>B.建立端到端的连接这是传输层的事 </p>
</blockquote>
<hr>
<h4 id="若主机A需要知道主机B的MAC地址，则属于ARP的工作流程为（-）。"><a href="#若主机A需要知道主机B的MAC地址，则属于ARP的工作流程为（-）。" class="headerlink" title="若主机A需要知道主机B的MAC地址，则属于ARP的工作流程为（ ）。"></a>若主机A需要知道主机B的MAC地址，则属于ARP的工作流程为（ ）。</h4><p><strong>A、主机A在网络中广播ARP请求报文</strong></p>
<p>B、主机A接收到请求报文后将自己的IP地址到MAC地址的映射发送给主机B</p>
<p><strong>C、主机B收到请求报文后将主机A的IP地址和MAC地址映射存储到自己的CACHE中</strong></p>
<p><strong>D、主机A缓存主机B的IP地址到MAC地址的映射</strong></p>
<blockquote>
<p>正确答案：ACD</p>
<p>参考答案：ARP协议工作过程 当一个基于TCP&#x2F;IP的应用程序需要从一台主机发送数据给另一台主机时，它把信息分割并封装成包，附上目的主机的IP地址。然后，寻找IP地址到实际MAC地址的映射，这需要发送ARP广播消息。当ARP找到了目的主机MAC地址后，就可以形成待发送帧的完整以太网帧头。最后，协议栈将IP包封装到以太网帧中进行传送。 如图1所示，描述了ARP广播过程。 在图1中，当主机A要和主机B通信（如主机A Ping主机B）时。主机A会先检查其ARP缓存内是否有主机B的MAC地址。如果没有，主机A会发送一个ARP请求广播包，此包内包含着其欲与之通信的主机的IP地址，也就是主机B的IP地址。 当主机B收到此广播后，会将自己的MAC地址利用ARP协议响应包传给主机A，并更新自己的ARP缓存，也就是同时将主机A的IP地址&#x2F;MAC地址对保存起来，以供后面使用。主机A在得到主机B的MAC地址后，就可以与主机B通信了。同时，主机A也将主机B的IP地址&#x2F;MAC地址对保存在自己的ARP协议缓存内。</p>
</blockquote>
<hr>
<h4 id="下面哪些是网络层的协议"><a href="#下面哪些是网络层的协议" class="headerlink" title="下面哪些是网络层的协议? __________"></a>下面哪些是网络层的协议? __________</h4><p>A、IP、TCP 和 UDP</p>
<p>B、ARP、IP 和 UDP</p>
<p>C、FTP、TELNET 和 SMTP</p>
<p><strong>D、IP、ARP 和 ICMP</strong></p>
<blockquote>
<p>正确答案：D</p>
<p>解析：</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB206c5e9f18e751de972ed3335fd751ce?method=download&shareKey=6cf2f9ca94044f305a08bf969c4a3502" alt="img"></p>
<p><a href="https://www.nowcoder.com/questionTerminal/6dcf897012094889af83f45a7768f761">下面哪些是网络层的协议? </a>  </p>
</blockquote>
<hr>
<h4 id="在封装过程中，加入的地址信息是指（-）。"><a href="#在封装过程中，加入的地址信息是指（-）。" class="headerlink" title="在封装过程中，加入的地址信息是指（  ）。"></a>在封装过程中，加入的地址信息是指（  ）。</h4><p>A、物理地址</p>
<p>B、IP地址</p>
<p>C、网络服务访问点</p>
<p><strong>D、根据具体协议而定</strong></p>
<blockquote>
<p>正确答案：D</p>
<p>解析：</p>
<p>封装过程中，地址信息可能是MAC，也可能是IP地址 </p>
<p><a href="https://www.nowcoder.com/questionTerminal/2842c053ff574f78bfed2713f5f2e033">在封装过程中，加入的地址信息是指</a> </p>
</blockquote>
<hr>
<h4 id="局域网体系结构中-（）-被划分成MAC和LLC两个子层。"><a href="#局域网体系结构中-（）-被划分成MAC和LLC两个子层。" class="headerlink" title="局域网体系结构中 （） 被划分成MAC和LLC两个子层。"></a>局域网体系结构中 （） 被划分成MAC和LLC两个子层。</h4><p>A、物理层</p>
<p><strong>B、数据链路层</strong></p>
<p>C、网络层</p>
<p>D、运输层</p>
<blockquote>
<p>正确答案：B</p>
<p>解析：</p>
<p>逻辑链路控制  LLC<br>媒体接入控制  MAC</p>
</blockquote>
<hr>
<h4 id="动态路由协议相比静态路由协议（多选）（-）"><a href="#动态路由协议相比静态路由协议（多选）（-）" class="headerlink" title="动态路由协议相比静态路由协议（多选）（ ）"></a>动态路由协议相比静态路由协议（多选）（ ）</h4><p>A、带宽占用少</p>
<p>B、简单</p>
<p><strong>C、路由器能自动发现网络变化</strong></p>
<p><strong>D、路由器能自动计算新的路由</strong></p>
<blockquote>
<p>正确答案：CD</p>
<p>参考答案：</p>
<p>C D 静态路由需要人手工配置，是在路由器中设置的固定的路由表，不适应网络的变化更新； 动态路由它不需要手工配，是网络中的路由器之间相互通信，传递路由信息，利用收到的路由信息更新路由器表的过程，可以动态更新，能适应各种环境。当然，各种动态路由协议会不同程度地占用网络带宽和CPU资源。</p>
</blockquote>
<hr>
<h4 id="计算机网络中，共享的资源主要是指（）"><a href="#计算机网络中，共享的资源主要是指（）" class="headerlink" title="计算机网络中，共享的资源主要是指（）"></a>计算机网络中，共享的资源主要是指（）</h4><p>A、主机、程序、通信信道和数据</p>
<p>B、主机、外设、通信信道和数据</p>
<p>C、软件、外设和数据</p>
<p>D、软件、硬件、数据和通信信道</p>
<blockquote>
<p>正确答案：D</p>
</blockquote>
<hr>
<h4 id="ICMP-的功能包括-。"><a href="#ICMP-的功能包括-。" class="headerlink" title="ICMP 的功能包括()。"></a>ICMP 的功能包括()。</h4><p>A、差错报告</p>
<p>B、测试目的站是否可达</p>
<p>C、消息询问</p>
<p><strong>D、所有以上的</strong></p>
<blockquote>
<p>正确答案：D</p>
<p>官方解析：</p>
<p>ICMP其功能主要有：</p>
<ul>
<li>侦测远端主机是否存在</li>
<li>建立及维护路由资料</li>
<li>重导数据传送路径</li>
<li>数据流量控制</li>
</ul>
</blockquote>
<hr>
<h4 id="一般来说，用户上网要通过因特网服务提供商，其英文缩写为"><a href="#一般来说，用户上网要通过因特网服务提供商，其英文缩写为" class="headerlink" title="一般来说，用户上网要通过因特网服务提供商，其英文缩写为(      )"></a>一般来说，用户上网要通过因特网服务提供商，其英文缩写为(      )</h4><p>A、IDC</p>
<p>B、ICP</p>
<p>C、ASP</p>
<p><strong>D、ISP</strong></p>
<blockquote>
<p>正确答案：D</p>
<p>官方解析：</p>
<p>ISP(Internet Service Provider)，互联网服务提供商ICP（Internet Content Provider），互联网内容提供商IDC (Internet Data Center)，互联网数据中心ASP（Active Server Pages），动态服务器页面</p>
</blockquote>
<hr>
<h4 id="为实现以-ADSL-方式接入-Internet-，至少需要在计算机中内置或外置的一个关键硬设备是（）。"><a href="#为实现以-ADSL-方式接入-Internet-，至少需要在计算机中内置或外置的一个关键硬设备是（）。" class="headerlink" title="为实现以 ADSL 方式接入 Internet ，至少需要在计算机中内置或外置的一个关键硬设备是（）。"></a>为实现以 ADSL 方式接入 Internet ，至少需要在计算机中内置或外置的一个关键硬设备是（）。</h4><p>A、网卡</p>
<p>B、集线器</p>
<p>C、服务器</p>
<p><strong>D、调制解调器（Modem）</strong></p>
<blockquote>
<p>正确答案：D</p>
<p>官方解析：</p>
<p>ADSL （非对称数字用户线路）是目前用电话接入因特网的主流技术，采用这种方式接入因特网，需要使用调制解调器。这是 PC 通过电话接入网络的必备设备，具有调制和解调两种功能，并分为外置和内置两种。因此答案选择 D 。</p>
</blockquote>
<hr>
<h4 id="数据链路层采用后退N帧（GBN）协议，发送方已经发送了编号为0-7的帧。当计时器超时时，若发送方只收到0-2-3号帧的确认，则发送方需要重发的帧数是？"><a href="#数据链路层采用后退N帧（GBN）协议，发送方已经发送了编号为0-7的帧。当计时器超时时，若发送方只收到0-2-3号帧的确认，则发送方需要重发的帧数是？" class="headerlink" title="数据链路层采用后退N帧（GBN）协议，发送方已经发送了编号为0~7的帧。当计时器超时时，若发送方只收到0.2.3号帧的确认，则发送方需要重发的帧数是？"></a>数据链路层采用后退N帧（GBN）协议，发送方已经发送了编号为0~7的帧。当计时器超时时，若发送方只收到0.2.3号帧的确认，则发送方需要重发的帧数是？</h4><p>A、4</p>
<p>B、2</p>
<p>C、3</p>
<p>D、5</p>
<blockquote>
<p>正确答案：A</p>
<p>参考答案：</p>
<p>收到了3号帧的确认，说明接收方发送了3号帧的确认，从而说明接收方收到了3号及3号之前的帧。因此，发送方需要重发的4号之后的帧 </p>
</blockquote>
<hr>
<h4 id="访问-https-www-mi-com-会经过哪些协议？（）"><a href="#访问-https-www-mi-com-会经过哪些协议？（）" class="headerlink" title="访问 https://www.mi.com/ 会经过哪些协议？（）"></a>访问 <a href="https://www.mi.com/">https://www.mi.com/</a> 会经过哪些协议？（）</h4><p><strong>A、IP</strong></p>
<p><strong>B、TCP</strong></p>
<p><strong>C、SSL</strong></p>
<p>D、FTP</p>
<blockquote>
<p>正确答案：ABC</p>
<p>官方解析：暂无官方题目解析，去讨论区看看吧！</p>
</blockquote>
<hr>
<h4 id="在下列传输介质中，哪种介质的典型传输率最高？"><a href="#在下列传输介质中，哪种介质的典型传输率最高？" class="headerlink" title="在下列传输介质中，哪种介质的典型传输率最高？"></a>在下列传输介质中，哪种介质的典型传输率最高？</h4><p>A、双绞线</p>
<p>B、同轴电缆</p>
<p><strong>C、光纤</strong></p>
<p>D、无线介质</p>
<blockquote>
<p>正确答案：C</p>
<p>官方解析：暂无官方题目解析，去讨论区看看吧！</p>
</blockquote>
<hr>
<h4 id="（-）因素在整个网络的设计、功能、可靠性和费用等方面有着重要影响。"><a href="#（-）因素在整个网络的设计、功能、可靠性和费用等方面有着重要影响。" class="headerlink" title="（        ）因素在整个网络的设计、功能、可靠性和费用等方面有着重要影响。"></a>（        ）因素在整个网络的设计、功能、可靠性和费用等方面有着重要影响。</h4><p>A、网络距离</p>
<p><strong>B、拓扑结构</strong></p>
<p>C、网络传输速率</p>
<p>D、误码率</p>
<blockquote>
<p>正确答案：B</p>
<p>官方解析：暂无官方题目解析，去讨论区看看吧！</p>
<p>网络的<strong>拓扑结构</strong>可反映出网中各实体间的结构关系，是建设计算机网络的第一步，是实现各种网络协议的基础，它对网络的性能，系统的可靠性与通信费用都有重大影响。</p>
</blockquote>
<hr>
<p>题目来源于王道论坛</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB533e5a698adda4ec8530e2c90cc37803?method=download&shareKey=66eaa8b07fe4fee2fd6b00f478bd7090" alt="img"></p>
<h4 id="假设H1与H2的默认网关和子网掩码均分别配置为192-168-3-1和255-255-255-128，H3和H4的默认网关和子网掩码均分别配置为192-168-3-254和255-255-255-128，则下列现象中可能发生的是-。"><a href="#假设H1与H2的默认网关和子网掩码均分别配置为192-168-3-1和255-255-255-128，H3和H4的默认网关和子网掩码均分别配置为192-168-3-254和255-255-255-128，则下列现象中可能发生的是-。" class="headerlink" title="假设H1与H2的默认网关和子网掩码均分别配置为192.168.3.1和255.255.255.128，H3和H4的默认网关和子网掩码均分别配置为192.168.3.254和255.255.255.128，则下列现象中可能发生的是 。"></a>假设H1与H2的默认网关和子网掩码均分别配置为192.168.3.1和255.255.255.128，H3和H4的默认网关和子网掩码均分别配置为192.168.3.254和255.255.255.128，则下列现象中可能发生的是 。</h4><p>A、H1不能与H2进行正常IP通信</p>
<p>B、H2与H4均不能访问Internet</p>
<p><strong>C、H1不能与H3进行正常IP通信</strong></p>
<p>D、H3不能与H4进行正常IP通信</p>
<blockquote>
<p>正确答案：C</p>
<p>官方解析：</p>
<p>从子网掩码可知H1和H2处于同一网段，H3和H4处于同一网段，分别可以进行正常的IP通信，A和D错误。因为R2的E1接口的IP地址为192.168.3.254，而H2的默认网关为192.168.3.1，所以H2不能访问Internet，而H4的默认网关为192.168.3.254，所以H4可以正常访问Internet，B错误。由H1、H2、H3和H4的子网掩码可知H1、H2和H3、H4处于不同的网段，需通过路由器才能进行正常的IP通信，而这时H1和H2的默认网关为192.168.3.1，但R2的E1接口的IP地址为192.168.3.254，无法进行通信，从而H1不能与H3进行正常的IP通信。C正确。</p>
</blockquote>
<hr>
<h4 id="下面哪个是-D-类地址的缺省网关"><a href="#下面哪个是-D-类地址的缺省网关" class="headerlink" title="下面哪个是 D 类地址的缺省网关 ? ______"></a>下面哪个是 D 类地址的缺省网关 ? ______</h4><p>A、255.0.0.0</p>
<p>B、255.255.0.0</p>
<p>C、255.255.255.0</p>
<p><strong>D、None</strong></p>
<p>正确答案：D</p>
<blockquote>
<p>官方解析：暂无官方题目解析，去讨论区看看吧！</p>
<p>D类地址不分网络地址和主机地址，它的第1个字节的前四位固定为1110。这一类地址被用在多点广播（Multicast）中。</p>
</blockquote>
<hr>
<h4 id="区分局域网（LAN）和广域网（WAN）的依据是-。"><a href="#区分局域网（LAN）和广域网（WAN）的依据是-。" class="headerlink" title="区分局域网（LAN）和广域网（WAN）的依据是______。"></a>区分局域网（LAN）和广域网（WAN）的依据是______。</h4><p>A、网络用户</p>
<p>B、传输协议</p>
<p>C、联网设备</p>
<p>D、联网范围</p>
<blockquote>
<p>正确答案：B</p>
<p>你的答案：D</p>
<p>官方解析：暂无官方题目解析，去讨论区看看吧！</p>
<p>不知道</p>
</blockquote>
<hr>
<h4 id="计算机网络是-和计算机技术相结合的产物。"><a href="#计算机网络是-和计算机技术相结合的产物。" class="headerlink" title="计算机网络是___________和计算机技术相结合的产物。"></a>计算机网络是___________和计算机技术相结合的产物。</h4><p>A、网络技术</p>
<p><strong>B、通信技术</strong></p>
<p>C、人工智能技术</p>
<p>D、管理技术</p>
<blockquote>
<p>正确答案：B</p>
<p>官方解析：暂无官方题目解析，去讨论区看看吧！</p>
<p>计算机技术是通信技术和计算机技术结合的产物 </p>
</blockquote>
<hr>
<h4 id="一个简单的计算机网络-3-个主要组成部分是"><a href="#一个简单的计算机网络-3-个主要组成部分是" class="headerlink" title="一个简单的计算机网络 3 个主要组成部分是"></a>一个简单的计算机网络 3 个主要组成部分是</h4><p><strong>A、一个通信子网</strong></p>
<p>B、大量终端</p>
<p><strong>C、一系列通信协议</strong></p>
<p>D、若干数据库</p>
<p><strong>E、若干主机</strong></p>
<blockquote>
<p>正确答案：ACE</p>
<p>官方解析：暂无官方题目解析，去讨论区看看吧</p>
<p>计算机网络通常由三个部分组成，它们是资源子网、通信子网和通信协议.所谓通信子网就是计算机网络中负责数据通信的部分；资源子网是计算机网络中面向用户的部分，负责全网络面向应用的数据处理工作；而通信双方必须共同遵守的规则和约定就称为通信协议，它的存在与否是计算机网络与一般计算机互连系统的根本区别。 </p>
</blockquote>
<hr>
<h4 id="使用客户-服务器方式的是-层-的协议。"><a href="#使用客户-服务器方式的是-层-的协议。" class="headerlink" title="使用客户-服务器方式的是_层 的协议。"></a>使用客户-服务器方式的是_层 的协议。</h4><p><strong>A、应用</strong></p>
<p>B、网络</p>
<p>C、数据链接</p>
<p>D、物理</p>
<blockquote>
<p>正确答案：A</p>
<p>官方解析：暂无官方题目解析，去讨论区看看吧！</p>
</blockquote>
<hr>
<h4 id="IP-协议是一种无连接、可靠的数据报服务的协议。"><a href="#IP-协议是一种无连接、可靠的数据报服务的协议。" class="headerlink" title="IP 协议是一种无连接、可靠的数据报服务的协议。"></a>IP 协议是一种无连接、可靠的数据报服务的协议。</h4><p>A、正确</p>
<p>B、错误</p>
<blockquote>
<p>正确答案：B</p>
<p>官方解析：暂无官方题目解析，去讨论区看看吧！</p>
<p>IP协议是无连接的、不可靠的数据报服务。 </p>
</blockquote>
<hr>
<h4 id="下列关于IP路由器功能的描述中，正确的是（）。"><a href="#下列关于IP路由器功能的描述中，正确的是（）。" class="headerlink" title="下列关于IP路由器功能的描述中，正确的是（）。"></a>下列关于IP路由器功能的描述中，正确的是（）。</h4><p><strong>Ⅰ．运行路由协议，设置路由表</strong></p>
<p><strong>Ⅱ．监测到拥塞时，合理丢弃IP分组</strong></p>
<p>Ⅲ．对收到的IP分组头进行差错校验，确保传输的IP分组不丢失</p>
<p><strong>Ⅳ．根据收到的IP分组的目的IP地址，将其转发到合适的输出线路上</strong></p>
<p>A、仅Ⅲ、Ⅳ</p>
<p>B、仅Ⅰ、Ⅱ、Ⅲ</p>
<p><strong>C、仅Ⅰ、Ⅱ、Ⅳ</strong></p>
<p>D、Ⅰ、Ⅱ、Ⅲ、Ⅳ</p>
<blockquote>
<p>正确答案：C</p>
<p>官方解析：</p>
<p>Ⅰ和Ⅳ显然是IP路由器的功能。对于Ⅱ，当路由器监测到拥塞时，可合理丢弃IP分组，并向发出该IP分组的源主机发送一个源点抑制的ICMP报文。对于Ⅲ，路由器对收到的IP分组首部进行差错检验，丢弃有差错首部的报文，但不保证IP分组不丢失。</p>
</blockquote>
<hr>
<h4 id="企业-Intranet-要与-Internet-互联，必需的互联设备是（-）。"><a href="#企业-Intranet-要与-Internet-互联，必需的互联设备是（-）。" class="headerlink" title="企业 Intranet 要与 Internet 互联，必需的互联设备是（  ）。"></a>企业 Intranet 要与 Internet 互联，必需的互联设备是（  ）。</h4><p>A、中继器</p>
<p>B、调制解调器</p>
<p>C、交换器</p>
<p><strong>D、路由器</strong></p>
<blockquote>
<p>正确答案：D</p>
<p>官方解析：暂无官方题目解析，去讨论区看看吧！</p>
<p>企业 Intranet 要与 Internet 互联，至少需要具有网络层的设备，上述只有路由器具有网络层。 </p>
<p>中继器工作在物理层，通过对数据信号的重新发送或者转发，来扩大网络传输的距离。其他工作在物理层的还有集线器（多口中继器）。 </p>
<p>  数据链路层工作的网络设备有：网卡、网桥、交换机，。 </p>
<p>  网络层工作的网络设备有：路由器、三层交换机、防火墙。 </p>
<p>  调制解调器分为调制器和解调器，也就是所说的猫。用于网络间不同介质网络信号转接，比如把ADSL、光纤、有线通等的网络信号转成标准的电脑网络信号。</p>
</blockquote>
<hr>
<h4 id="在-OSI-分层模型中，把传输的比特流划分为帧，是哪一层的功能（-）"><a href="#在-OSI-分层模型中，把传输的比特流划分为帧，是哪一层的功能（-）" class="headerlink" title="在 OSI 分层模型中，把传输的比特流划分为帧，是哪一层的功能（ ）"></a>在 OSI 分层模型中，把传输的比特流划分为帧，是哪一层的功能（ ）</h4><p>A、物理层</p>
<p>B、网络层</p>
<p><strong>C、数据链路层</strong></p>
<p>D、传输层</p>
<blockquote>
<p>正确答案：C</p>
<p>官方解析：暂无官方题目解析，去讨论区看看吧！</p>
</blockquote>
<hr>
<h4 id="广域网中的数据传输速率比其在局域网中的要快。（-）"><a href="#广域网中的数据传输速率比其在局域网中的要快。（-）" class="headerlink" title="广域网中的数据传输速率比其在局域网中的要快。（  ）"></a>广域网中的数据传输速率比其在局域网中的要快。（  ）</h4><p>A、正确</p>
<p><strong>B、错误</strong></p>
<blockquote>
<p>正确答案：B</p>
<p>官方解析：暂无官方题目解析，去讨论区看看吧！</p>
<p>传输速率主要取决于传输介质。如果将传输速率换成<strong>吞吐量</strong>的话应该是<strong>广域网更大</strong>。 </p>
</blockquote>
<hr>
<h4 id="以下关于信道传输速率的表述，正确的是（-）"><a href="#以下关于信道传输速率的表述，正确的是（-）" class="headerlink" title="以下关于信道传输速率的表述，正确的是（ ）"></a>以下关于信道传输速率的表述，正确的是（ ）</h4><p><strong>A、信道的码元传输速率是有上限的</strong></p>
<p><strong>B、频带宽度越宽的信道，其信息传输速率越大</strong></p>
<p><strong>C、信噪比越大的信道，其信息传输速率越大</strong></p>
<p>D、在信道频带宽度和信噪比不变的情况下，可以通过调制方式提高码元极限传输速率</p>
<blockquote>
<p>正确答案：ABC</p>
<p>参考答案：</p>
<p>选A、B、C。信道传输速率：单位时间内信道上所能传输的数据量。 奈奎斯特的奈氏准则：在任何信道中，码元的传输速率是有上限的，否则就会出现码间串扰的问题，使接收端对码元的判决（即识别）称为不可能。所以A正确。 奈奎斯特定理：Cmax&#x3D;2×B×log2L（B是信道的带宽，L还是信号电平的个数），香农定理：Cmax&#x3D;B×log2（1+（S&#x2F;N））S&#x2F;N指的是信道的信噪比。可得出带宽B、信噪比S&#x2F;N与传输速率成正比，所以B、C正确。 码元传输速率简称传码率，又称符号速率等，在数字通信中，一个数字脉冲称为一个码元。它表示单位时间内传输码元的数目，单位是波特 （ Baud ），记为B。奈奎斯特推导出有限带宽无噪声信道的极限波特率，称为奈氏定理。若信道带宽为W，则奈氏定理的最大码元速率为：B&#x3D;2W（Baud）。奈氏定理指定的信道容量也称为奈氏极限，它由信道的物理特性决定。超过奈氏极限传送脉冲信号是不可能的。因此，要进一步提高波特率，就必须改善信道的带宽。所以D错误。</p>
</blockquote>
<hr>
<h4 id="在-TCP-x2F-IP-体系结构中，直接为-ICMP-提供服务的协议是-。-1"><a href="#在-TCP-x2F-IP-体系结构中，直接为-ICMP-提供服务的协议是-。-1" class="headerlink" title="在 TCP&#x2F;IP 体系结构中，直接为 ICMP 提供服务的协议是 。"></a>在 TCP&#x2F;IP 体系结构中，直接为 ICMP 提供服务的协议是 。</h4><p>A、PPP</p>
<p><strong>B、IP</strong></p>
<p>C、UDP</p>
<p>D、TCP</p>
<blockquote>
<p>正确答案：B</p>
<p>官方解析：</p>
<p>ICMP 报文作为数据字段封装在 IP 分组中，因此， IP 协议直接为 ICMP 提供服务。 UDP 和 TCP 都是传输层协议，为应用层提供服务。 PPP 协议是链路层协议，为网络层提供服务。</p>
</blockquote>
<hr>
<h4 id="在虚拟局域网中的逻辑工作组各结点可以分布在同一物理网段上，但不能分布在不同的物理网络上。请问这句话的说法是正确的吗？"><a href="#在虚拟局域网中的逻辑工作组各结点可以分布在同一物理网段上，但不能分布在不同的物理网络上。请问这句话的说法是正确的吗？" class="headerlink" title="在虚拟局域网中的逻辑工作组各结点可以分布在同一物理网段上，但不能分布在不同的物理网络上。请问这句话的说法是正确的吗？"></a>在虚拟局域网中的逻辑工作组各结点可以分布在同一物理网段上，但不能分布在不同的物理网络上。请问这句话的说法是正确的吗？</h4><p>A、正确</p>
<p><strong>B、错误</strong></p>
<blockquote>
<p>正确答案：B</p>
<p>官方解析：暂无官方题目解析，去讨论区看看吧！</p>
<p>虚拟网络中同一逻辑工作组的成员可以处于不同的物理网段，当一个结点从一个逻辑工作组转移到另一个逻辑工作组时，只需要通过软件设定，而不需要改变它在网络中的物理位置。同一个逻辑工作组的结点可以分布在不同的物理网段上，但它们之间的通信就像在同一个物理网段上一样。 </p>
</blockquote>
<hr>
<h4 id="TCP协议使用三次握手建立连接，设双方发送初始序号分别为X-Y，甲方发送帧为SYN-x3D-1-Seq-x3D-X的报文给乙方，则乙方接受报文后，发送-给甲方，甲方发送一个确认报文给乙方后便建立连接。"><a href="#TCP协议使用三次握手建立连接，设双方发送初始序号分别为X-Y，甲方发送帧为SYN-x3D-1-Seq-x3D-X的报文给乙方，则乙方接受报文后，发送-给甲方，甲方发送一个确认报文给乙方后便建立连接。" class="headerlink" title="TCP协议使用三次握手建立连接，设双方发送初始序号分别为X,Y，甲方发送帧为SYN&#x3D;1, Seq&#x3D;X的报文给乙方，则乙方接受报文后，发送()给甲方，甲方发送一个确认报文给乙方后便建立连接。"></a>TCP协议使用三次握手建立连接，设双方发送初始序号分别为X,Y，甲方发送帧为SYN&#x3D;1, Seq&#x3D;X的报文给乙方，则乙方接受报文后，发送()给甲方，甲方发送一个确认报文给乙方后便建立连接。</h4><p>A、SYN&#x3D;0, Seq&#x3D;Y, AN&#x3D;X+1</p>
<p>B、SYN&#x3D;0, Seq&#x3D;X+1, AN&#x3D;X+1</p>
<p><strong>C、SYN&#x3D;1, Seq&#x3D;Y, AN&#x3D;X+1</strong></p>
<p>D、SYN&#x3D;1, Seq&#x3D;X+1, AN&#x3D;Y</p>
<blockquote>
<p>正确答案：C</p>
<p>官方解析：</p>
<p>三次握手时，同步位 syn 为 1。seq为自身初始序号。AN为期望下次接收到的数据序号，应该为X+1。</p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Practices</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程练习题(复习)</title>
    <url>/2023/01/06/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%83%E4%B9%A0%E9%A2%98-%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>教材为《软件工程：从理论到实践》<br>毛新军 董威 编著</p>
<h2 id="第一章-软件工程课程概述"><a href="#第一章-软件工程课程概述" class="headerlink" title="第一章 软件工程课程概述"></a>第一章 软件工程课程概述</h2><h3 id="计算机软件发生的变化"><a href="#计算机软件发生的变化" class="headerlink" title="计算机软件发生的变化"></a>计算机软件发生的变化</h3><ul>
<li><p>1、随着互联网、计算机基础设施、用户需求等多方面因素的影响，计算机软件系统在很多方面都发生了深刻的变化。下面哪些方面计算机软件系统发生了变化？</p>
<p><strong>A、软件系统的部署平台</strong></p>
<p><strong>B、软件系统的部署运行形态</strong></p>
<p><strong>C、软件系统的要素交互模式</strong></p>
<p><strong>D、软件系统的代码规模</strong></p>
</li>
<li><p>2、关于计算机软件形态的变化，下面哪种说法是错误的？</p>
<p><strong>A、软件系统是一个纯粹的技术系统，与社会、物理等要素是相对独立的。</strong></p>
<p><strong>B、集中同构系统是当前软件系统的主要部署和运行方式。</strong></p>
<p>C、软件系统的规模和复杂度正在快速增加。</p>
<p><strong>D、人类对于软件系统的需求和演化的认知已经比较全面</strong></p>
</li>
</ul>
<h3 id="软件工程的发展"><a href="#软件工程的发展" class="headerlink" title="软件工程的发展"></a>软件工程的发展</h3><ul>
<li><p>1、近年来，软件开发方法和技术发生了很大的变化。下列关于软件开发过程和方法的说法哪些是错误的？</p>
<p>A、敏捷开发方法是拥抱软件系统变化的一种开发模型</p>
<p><strong>B、螺旋模型解决了软件需求快速变化的问题</strong></p>
<p><strong>C、DevOps模型严格区分软件开发、部署、运行和维护等阶段</strong></p>
<p>D、瀑布模型要求规范的需求文档</p>
</li>
<li><p>2、软件开发技术不断推陈出新，对于提高软件开发效率和质量产生了重要作用。下面哪些说法是错误的？</p>
<p>A、开源软件的开发采用了基于群智的软件开发模式</p>
<p><strong>B、依靠松散组合的互联网大众是无法开发出高质量软件产品的</strong></p>
<p>C、软件重用是提供软件开发效率和质量的重要手段</p>
<p>D、设计模式是一种软件重用形式</p>
</li>
</ul>
<h2 id="第二章-从程序到软件"><a href="#第二章-从程序到软件" class="headerlink" title="第二章 从程序到软件"></a>第二章 从程序到软件</h2><h3 id="程序及其质量"><a href="#程序及其质量" class="headerlink" title="程序及其质量"></a>程序及其质量</h3><ul>
<li><p>1、代码的结构清晰、可理解性好，这类代码的内部质量高。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、程序具有良好的可扩展性且易于维护，则该程序的外部质量高。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、在编写代码的过程中，对程序做适当的注释可有助于提高代码的哪些属性（多选）。</p>
<p><strong>A、代码的内部质量</strong></p>
<p>B、代码的外部质量</p>
<p><strong>C、代码的可理解性</strong></p>
<p>D、代码的可扩展性</p>
</li>
</ul>
<h3 id="程序质量保证方法"><a href="#程序质量保证方法" class="headerlink" title="程序质量保证方法"></a>程序质量保证方法</h3><ul>
<li><p>2、以下哪些方法可以有效地保证和提高代码质量（多选）</p>
<p><strong>A、互相检查代码</strong></p>
<p><strong>B、代码重用</strong></p>
<p><strong>C、采用面向对象的程序设计方法</strong></p>
<p>D、多编写程序</p>
</li>
<li><p>3、代码重用有何实际的意义和价值</p>
<p><strong>A、提高开发效率</strong></p>
<p><strong>B、提高代码质量</strong></p>
<p>C、学习他人的编码风格</p>
<p><strong>D、减少开发工作量</strong></p>
</li>
<li><p>1、编程风格影响程序的可读性，但不会影响最终软件产品的质量。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、关于程序标识符命名，以下说法不正确的是。</p>
<p>A、命名应使用标准英文单词或缩写，不要使用拼音</p>
<p>B、命名应遵循望文知义原则，即名称应含义清晰、明确</p>
<p>C、命名都不要过长，应控制在规定的最大长度以内</p>
<p><strong>D、所有命名都应尽量使用缩写</strong></p>
</li>
</ul>
<h3 id="程序质量分析方法"><a href="#程序质量分析方法" class="headerlink" title="程序质量分析方法"></a>程序质量分析方法</h3><ul>
<li><p>1、以下哪些软件工具可以完成程序代码的静态分析工作。（多选题）</p>
<p>A、JUnit </p>
<p><strong>B、Sonarqube</strong></p>
<p><strong>C、CheckStyle</strong></p>
<p>D、Eclipse</p>
</li>
<li><p>2、结对编程可有效地支持代码的人工审查工作。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、以下哪一项是通过运行程序来发现代码问题的。</p>
<p>A、代码检查</p>
<p>B、代码扫描</p>
<p>C、人工检查</p>
<p><strong>D、程序测试</strong></p>
</li>
<li><p>4、人工审查代码包含以下哪几个步骤。</p>
<p><strong>A、发现缺陷和问题</strong></p>
<p><strong>B、阅读和理解代码</strong></p>
<p>C、运行程序代码</p>
<p><strong>D、提出改进的建议</strong></p>
</li>
</ul>
<h3 id="软件及其质量"><a href="#软件及其质量" class="headerlink" title="软件及其质量"></a>软件及其质量</h3><ul>
<li><p>1、软件质量等同于程序质量。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、软件之所以需要文档，是处于以下的原因。</p>
<p><strong>A、记录开发成果</strong></p>
<p><strong>B、分享和交流开发成果</strong></p>
<p><strong>C、分析和发现开发成果中的问题</strong></p>
<p>D、减少开发工作量</p>
</li>
</ul>
<h3 id="开源软件"><a href="#开源软件" class="headerlink" title="开源软件"></a>开源软件</h3><ul>
<li><p>1、开源软件可以任意的下载、传播和修改，无需遵循任何的要求。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、免费使用的软件属于开源软件。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、关于开源软件的开发，以下哪些阐述是错误的。</p>
<p>A、互联网大众参与贡献的结果</p>
<p>B、需要依托开源托管平台</p>
<p><strong>C、采用团队的组织方式</strong> </p>
<p>D、任何人都可参与修改代码</p>
</li>
</ul>
<h2 id="第三章-软件工程概述"><a href="#第三章-软件工程概述" class="headerlink" title="第三章 软件工程概述"></a>第三章 软件工程概述</h2><h3 id="软件工程产生背景"><a href="#软件工程产生背景" class="headerlink" title="软件工程产生背景"></a>软件工程产生背景</h3><ul>
<li><p>1、编写程序仅仅是软件开发的一项工作，软件开发还牵涉其他方面的工作。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、以下哪些是导致软件危机的主要原因。</p>
<p>A、软件工程师人数太少</p>
<p><strong>B、软件过于复杂</strong></p>
<p><strong>C、对软件及其开发认识不够</strong></p>
<p><strong>D、缺乏理论指导和技术的支持</strong></p>
</li>
<li><p>3、在现阶段软件危机依然存在。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>4、软件危机有哪些主要的表现形式。</p>
<p><strong>A、软件开发成本太高</strong></p>
<p><strong>B、软件质量无法保证</strong></p>
<p>C、待开发软件项目的数量太多</p>
<p><strong>D、软件项目无法按时交付</strong></p>
</li>
</ul>
<h3 id="软件工程的概念和思想"><a href="#软件工程的概念和思想" class="headerlink" title="软件工程的概念和思想"></a>软件工程的概念和思想</h3><ul>
<li><p>1、软件工程中“工程”的内涵包括哪些方面。</p>
<p><strong>A、遵循过程来开发</strong></p>
<p><strong>B、保证产品质量</strong></p>
<p>C、采用最新的技术</p>
<p><strong>D、借助工具支持</strong></p>
</li>
<li><p>2、软件工程要求采用各种技术和文档规范，以进行规范化的开发，产生规范化的软件产品。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、软件工程的原则对于软件开发而言可产生什么样的成效。</p>
<p>A、保证软件开发不会出错</p>
<p><strong>B、确保软件开发的质量</strong></p>
<p><strong>C、有效应对软件系统的复杂性</strong></p>
<p>D、减少软件开发的工作量</p>
</li>
<li><p>4、以下哪些属于软件工程的基本构成要素。</p>
<p><strong>A、过程</strong></p>
<p>B、建模语言</p>
<p>C、程序设计语言</p>
<p><strong>D、辅助工具</strong></p>
</li>
</ul>
<h3 id="计算机辅助软件工程"><a href="#计算机辅助软件工程" class="headerlink" title="计算机辅助软件工程"></a>计算机辅助软件工程</h3><ul>
<li><p>1、计算机辅助软件工程对于软件开发而言有何作用。</p>
<p><strong>A、提高开发效率</strong> </p>
<p><strong>B、提高开发质量</strong></p>
<p><strong>C、减少开发工作量</strong></p>
<p><strong>D、减低开发成本</strong></p>
</li>
<li><p>2、Microsoft Office也是一个CASE工具。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、SonarQube是一个CASE工具，以下哪一项不是该工具提供的功能。</p>
<p>A、分析代码的内部质量</p>
<p>B、发现代码中的缺陷</p>
<p><strong>C、修复代码中的缺陷</strong></p>
<p>D、产生代码质量的报告</p>
</li>
<li><p>4、Eclipse和Visual Studio都是CASE环境。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h3 id="软件工程视角下的软件开发"><a href="#软件工程视角下的软件开发" class="headerlink" title="软件工程视角下的软件开发"></a>软件工程视角下的软件开发</h3><ul>
<li><p>1、开源软件的开发是一项基于互联网大众群体创作的过程。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、针对特定的软件（如微信），构思软件需求是一项软件创作的活动。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、基于软件设计的模型和文档来编写程序是一项什么样的活动。</p>
<p><strong>A、生产活动</strong></p>
<p>B、创作活动</p>
<p>C、既是生产活动也是创作活动</p>
</li>
<li><p>4、根据确定的软件需求来进行软件设计，这是一项什么样的活动。</p>
<p>A、生产活动</p>
<p>B、创作活动</p>
<p><strong>C、既是生产活动也是创作活动</strong></p>
</li>
</ul>
<h2 id="第四章-软件过程模型和开发方法"><a href="#第四章-软件过程模型和开发方法" class="headerlink" title="第四章 软件过程模型和开发方法"></a>第四章 软件过程模型和开发方法</h2><h3 id="软件过程模型"><a href="#软件过程模型" class="headerlink" title="软件过程模型"></a>软件过程模型</h3><ul>
<li><p>1、以下哪些过程模型支持迭代开发。</p>
<p>A、瀑布模型</p>
<p>B、增量模型</p>
<p><strong>C、原型模型</strong></p>
<p><strong>D、螺旋模型</strong></p>
</li>
<li><p>2、以下哪些模型可以有效应对软件需求的变化。</p>
<p>A、瀑布模型</p>
<p><strong>B、迭代模型</strong></p>
<p><strong>C、原型模型</strong></p>
<p>D、增量模型</p>
</li>
<li><p>3、瀑布模型、迭代模型、螺旋模型都是以文档为中心的，而非以代码为中心的，属于重型的软件开发方法。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>1、UP模型是以代码为中心的一类开发方法。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、软件过程不等同于软件生命周期，前者是对于开发而言的，后者是针对软件而言的。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、关于增量模型和迭代模型，以下哪些描述是正确的。</p>
<p>A、都支持需求变化</p>
<p><strong>B、都支持快速交付产品</strong></p>
<p>C、都支持迭代软件开发</p>
<p><strong>D、都属于重型软件开发方法</strong></p>
</li>
</ul>
<h3 id="敏捷软件开发方法"><a href="#敏捷软件开发方法" class="headerlink" title="敏捷软件开发方法"></a>敏捷软件开发方法</h3><ul>
<li><p>1、敏捷开发方法以代码为中心。</p>
<p><strong>A、正确</strong> </p>
<p>B、错误</p>
</li>
<li><p>2、敏捷开发方法具有哪些优点。</p>
<p><strong>A、应对需求变化</strong></p>
<p><strong>B、快速交付软件产品</strong></p>
<p>C、软件质量要优于其他方法</p>
<p>D、软件更加易于维护</p>
</li>
<li><p>3、Scrum、极限编程均属于特殊的敏捷开发方法，因而具有敏捷开发方法的基本特征。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>1、Scrum开发方法具有以下的特点。</p>
<p><strong>A、迭代开发</strong></p>
<p><strong>B、每个“Sprint”周期只实现某个功能</strong></p>
<p><strong>C、持续交互产品</strong></p>
<p>D、以质量为优先</p>
</li>
<li><p>2、关于测试驱动开发，哪些描述是不正确的。</p>
<p><strong>A、只需要编写测试代码，无需编写功能代码</strong></p>
<p><strong>B、需要同时编写测试代码和功能代码</strong></p>
<p>C、先编写测试代码，再编写功能代码</p>
<p><strong>D、先编写功能代码，再编写测试代码</strong></p>
</li>
</ul>
<h3 id="群体化开发方法"><a href="#群体化开发方法" class="headerlink" title="群体化开发方法"></a>群体化开发方法</h3><ul>
<li><p>1、群体化开发方法所依赖的软件开发者是开放的，而不是封闭的。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、群体化开发方法需要依赖于互联网平台来吸引大量的软件开发者群体。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、关于群体化开发方法，以下哪些阐述是正确的。</p>
<p><strong>A、开发者包括核心开发者和外围开发者</strong></p>
<p><strong>B、开发成果来自于群体的智慧</strong></p>
<p><strong>C、群体化开发方法的成功实践之一是开源软件</strong></p>
<p>D、由于开发群体数量大，质量难以保证</p>
</li>
<li><p>1、关于群体化开发的Issue机制，以下哪些描述是错误的。</p>
<p>A、Issue用于支持开发任务管理</p>
<p><strong>B、Issue就是指某个错误</strong></p>
<p>C、任何人都可以提出Issue</p>
<p>D、Issue机制体现了群体创作的理念</p>
</li>
<li><p>2、基于Git的分布式版本管理支持创建同一个软件的多个代码仓库，每个仓库由不同的开发人员进行管理，但是通常只有一个中心代码仓库。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、关于Pull&#x2F;Request机制，以下哪些描述是正确的。</p>
<p><strong>A、支持群体的分布式协同开发</strong></p>
<p><strong>B、允许开发者将其贡献的代码汇聚到中心仓库中</strong></p>
<p>C、开发者只要提交了Pull&#x2F;Request，其代码就会被接纳到中心仓库中 </p>
<p><strong>D、开发者所提交了Pull&#x2F;Request必须进行质量分析</strong></p>
</li>
<li><p>1、开源软件是通过群体化方法开发出来的。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、参与群体化开发人员的水平参差不齐，所编写代码的质量也不一样，因而群体化开发方法无法保证代码的质量。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、软件开发知识分享具有哪些方面的特点。</p>
<p><strong>A、任何人都可以参与知识分享</strong></p>
<p><strong>B、所分享知识的质量参差不齐，可能会有低质量甚至错误的知识</strong></p>
<p>C、只有核心人员才有资格提问</p>
<p><strong>D、需要依赖于互联网平台</strong></p>
</li>
</ul>
<h2 id="第五章-软件需求工程基础"><a href="#第五章-软件需求工程基础" class="headerlink" title="第五章 软件需求工程基础"></a>第五章 软件需求工程基础</h2><h3 id="软件需求"><a href="#软件需求" class="headerlink" title="软件需求"></a>软件需求</h3><ul>
<li><p>1、软件需求可能来自于哪些软件利益相关方。</p>
<p><strong>A、用户</strong></p>
<p><strong>B、客户</strong></p>
<p>C、软件项目经理</p>
<p><strong>D、软件开发者</strong></p>
</li>
<li><p>2、以下哪一项不属于合法的软件需求。</p>
<p>A、用户需要某项功能</p>
<p>B、用户需要某项性能</p>
<p>C、用户要求在某个时间点交付产品</p>
<p><strong>D、用户要求采用某种设计模式和技术来开发软件</strong></p>
</li>
<li><p>3、以下关于软件需求的描述，哪些项是不正确的。</p>
<p>A、软件需求易于变化</p>
<p>B、开源软件的需求通常来自于软件开发工程师 </p>
<p>C、同一个需求可能来自于多个利益相关者，可能会存在冲突</p>
<p><strong>D、软件需求一旦确定就不允许变化</strong></p>
</li>
<li><p>1、需求工程师必须获得完整、准确和一致的软件需求，才能进行后续的软件开发。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、遗留的软硬件系统也可以作为软件的利益相关者，对待开发软件系统的需求提出要求。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h3 id="需求工程"><a href="#需求工程" class="headerlink" title="需求工程"></a>需求工程</h3><ul>
<li><p>1、开展软件需求获取和分析，不仅需要需求工程的相关知识，也需要软件所对应领域工程的知识。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、需求获取工作可以一次性完成。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、下列哪些属于需求工程的活动。</p>
<p><strong>A、需求获取和构思、需求建模和分析</strong></p>
<p><strong>B、需求获取和构思、基于需求构建软件原型</strong></p>
<p><strong>C、需求建模与分析、软件需求的管理</strong></p>
<p>D、基于需求的软件设计、软件需求评审</p>
</li>
<li><p>1、软件需求工程需要具备哪些方面的知识和能力。</p>
<p><strong>A、需求工程知识</strong></p>
<p><strong>B、领域知识</strong></p>
<p>C、软件设计能力</p>
<p><strong>D、与用户沟通和协商的能力</strong></p>
</li>
<li><p>2、需求工程需要提供哪些技术手段来支持软件需求的获取和分析。</p>
<p><strong>A、抽象和建模技术</strong></p>
<p><strong>B、系统的需求工程步骤</strong></p>
<p><strong>C、CASE工具和规范</strong></p>
<p><strong>D、需求分析的策略</strong></p>
</li>
<li><p>3、需求工程的CASE工具可以提供哪些方面的辅助和支持。</p>
<p><strong>A、编写需求文档</strong></p>
<p><strong>B、绘制需求模型</strong></p>
<p><strong>C、跟踪需求变化</strong></p>
<p>D、开展需求的设计</p>
</li>
</ul>
<h3 id="需求分析方法学"><a href="#需求分析方法学" class="headerlink" title="需求分析方法学"></a>需求分析方法学</h3><ul>
<li><p>1、结构化需求分析方法学有多种，面向数据流的需求分析方法学仅仅是其中的一种。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、关于面向数据流的需求分析方法学，以下哪些描述是正确的。</p>
<p><strong>A、该方法学只能用于描述和分析功能需求，无法刻画和分析非功能性需求</strong></p>
<p><strong>B、软件系统的功能对应于有何数据以及对数据进行什么样的处理</strong></p>
<p>C、该方法学可以用于描述和分析功能性和非功能性需求</p>
<p>D、软件系统的性能对应于有何数据以及对数据进行什么样的处理</p>
</li>
<li><p>3、</p>
<p>以下是一张数据流图，图中哪些图形化符号画错了。</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEBadc5587740613be2b5b495856963aceb?method=download&shareKey=1e79cc655b9119192ad2433c2efbe916" alt=","></p>
<p><strong>A、外部实体</strong></p>
<p>B、转换</p>
<p><strong>C、数据流</strong></p>
<p>D、数据存储</p>
</li>
<li><p>1、面向数据流的需求分析方法学体现了哪些方面的需求分析思想和原则。</p>
<p><strong>A、抽象建模</strong></p>
<p><strong>B、自顶向下、逐步求精</strong></p>
<p>C、软件重用</p>
<p>D、模块化</p>
</li>
<li><p>2、数据流图在精化过程中，需要保持哪些方面的平衡？</p>
<p>A、数据流的平衡</p>
<p>B、转换的平衡</p>
<p>C、外部实体的平衡</p>
<p><strong>D、父图和子图的平衡</strong></p>
</li>
<li><p>3、类是对象的实例，对象是类的模板。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>1、以下关于UML的陈述，哪些是正确的。</p>
<p><strong>A、UML是一种建模语言，而不是程序设计语言</strong></p>
<p><strong>B、UML支持对软件系统的多个视点进行建模，有助于获得软件系统的完整视图</strong></p>
<p>C、UML模型可在计算机上执行</p>
<p><strong>D、UML可建立图形化的软件模型，有助于加强对软件的直观理解和认识</strong></p>
</li>
<li><p>2、面向对象的方法既可对软件需求进行建模和分析，也可以对软件设计及实现进行建模和分析。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、UML提供了哪些图以对软件需求进行建模和分析。</p>
<p><strong>A、用例图</strong></p>
<p><strong>B、类图</strong></p>
<p><strong>C、状态图</strong></p>
<p>D、构件图</p>
</li>
<li><p>4、UML主要支持对软件的功能需求进行建模，无法对非功能性需求（如性能等）进行建模。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
</ul>
<h3 id="需求工程的输出和评审"><a href="#需求工程的输出和评审" class="headerlink" title="需求工程的输出和评审"></a>需求工程的输出和评审</h3><ul>
<li><p>1、需求工程完成后将输出哪些方面的软件制品。</p>
<p><strong>A、软件需求模型</strong></p>
<p><strong>B、软件需求文档</strong></p>
<p><strong>C、软件需求原型</strong></p>
<p>D、软件设计模型</p>
</li>
<li><p>2、软件需求文档采用图文并茂的方式，详细描述了软件系统的功能性和非功能性需求。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、软件需求缺陷存在哪些方面的表现形式。</p>
<p><strong>A、没有如实地记录用户所提出的任何需求</strong></p>
<p><strong>B、对软件需求的描述与用户的理解不一致</strong></p>
<p><strong>C、多个软件需求项之间存在冲突</strong></p>
<p><strong>D、对软件需求的描述不详尽，导致不清楚需求细节</strong></p>
</li>
<li><p>1、如果软件需求存在缺陷，会对软件开发带来什么样的后果。</p>
<p><strong>A、导致设计存在缺陷</strong></p>
<p><strong>B、导致代码存在缺陷</strong></p>
<p><strong>C、影响软件开发进度</strong></p>
<p><strong>D、无法满足用户要求</strong></p>
</li>
<li><p>2、软件需求确认（Requirement Validation）和软件需求验证（Requirement Verification）二个概念的内涵是一样的。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、软件需求的追溯管理涉及哪些工作。</p>
<p><strong>A、追溯谁提出了需求变更</strong></p>
<p><strong>B、追溯对需求进行了哪些变革</strong></p>
<p><strong>C、追溯需求变更会对开发产生什么样的影响</strong></p>
<p><strong>D、追溯需求变更的可行性</strong></p>
</li>
</ul>
<h2 id="第六章-获取软件需求"><a href="#第六章-获取软件需求" class="headerlink" title="第六章 获取软件需求"></a>第六章 获取软件需求</h2><h3 id="获取软件需求的方法和过程"><a href="#获取软件需求的方法和过程" class="headerlink" title="获取软件需求的方法和过程"></a>获取软件需求的方法和过程</h3><ul>
<li><p>1、其他的物理或软件系统也可以作为软件系统的利益相关者。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、软件开发者不能作为软件系统的利益相关者，提出软件系统的需求。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、有哪些方式可以获得软件需求。</p>
<p><strong>A、听取客户或用户的意见</strong></p>
<p><strong>B、听取软件开发者的建议</strong></p>
<p><strong>C、听取互联网大众的意见</strong></p>
<p>D、听取软件测试人员的意见</p>
</li>
<li><p>1、获取软件需求难在哪些方面。</p>
<p><strong>A、软件利益相关者说不清楚软件需求是什么</strong></p>
<p><strong>B、软件利益相关者区分不清哪些是软件需求、哪些不是软件需求</strong></p>
<p><strong>C、软件利益相关者不掌握领域知识，导致提不出软件需求</strong></p>
<p><strong>D、软件利益相关者没有投入时间来想定和构思软件需求</strong></p>
</li>
<li><p>2、有哪些常见的软件需求获取方法。</p>
<p><strong>A、与软件利益相关者的面谈和会议</strong></p>
<p><strong>B、针对软件利益相关者的业务调查问卷</strong></p>
<p><strong>C、开发者实际体验业务</strong></p>
<p><strong>D、开发者构思软件需求</strong></p>
</li>
<li><p>3、获取软件需求包含哪些方面的工作。</p>
<p><strong>A、开展业务调查，明确软件开发的目的和动机，即明确软件要解决的问题</strong></p>
<p><strong>B、采取多种方式和手段，从软件利益相关者哪里导出和构思软件需求</strong></p>
<p>C、对获取的软件需求进行分析，以发现不一致和矛盾的软件需求 </p>
<p><strong>D、尽可能描述清楚所获得的每一个软件需求</strong></p>
</li>
</ul>
<h3 id="明确问题及基于软件的解决方案"><a href="#明确问题及基于软件的解决方案" class="headerlink" title="明确问题及基于软件的解决方案"></a>明确问题及基于软件的解决方案</h3><ul>
<li><p>1、需求工程师需要与用户或客户一道，通过调研分析，明确待开发软件系统欲解决的问题，并确保问题有意义、有价值。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、只要是用户提出的问题，都值得交由软件来加以解决。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、任何问题都可以找到基于软件的解决方法。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
</ul>
<h3 id="导出和构思软件需求"><a href="#导出和构思软件需求" class="headerlink" title="导出和构思软件需求"></a>导出和构思软件需求</h3><ul>
<li><p>1、用户提出的任何要求都可以作为软件需求。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、相比较而言，软件的功能性需求比非功能性需求更为重要。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、非功能性需求包括哪些方面的需求。</p>
<p>A、软件行为需求</p>
<p><strong>B、软件开发约束需求</strong></p>
<p><strong>C、软件质量需求</strong></p>
<p>D、软件结构需求</p>
</li>
<li><p>4、任何软件需求都有其出处，也即都有提出该需求的相应利益相关者。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h3 id="描述和验证初步的软件需求"><a href="#描述和验证初步的软件需求" class="headerlink" title="描述和验证初步的软件需求"></a>描述和验证初步的软件需求</h3><ul>
<li><p>1、可以采用哪些手段来描述获得的初步软件需求。</p>
<p>A、UML类图</p>
<p><strong>B、UML的用例图</strong></p>
<p><strong>C、自然语言</strong></p>
<p><strong>D、软件原型</strong></p>
</li>
<li><p>2、获取软件需求该项工作结束后，软件需求工程将可能产生哪些软件制品。</p>
<p><strong>A、UML的用例图</strong></p>
<p>B、UML的类图</p>
<p><strong>C、用自然语言描述的初步软件需求文档</strong></p>
<p><strong>D、软件原型</strong></p>
</li>
<li><p>3、用自然语言描述初步的软件需求存在哪些不足。</p>
<p>A、有些初步软件需求无法用自然语言表述</p>
<p><strong>B、自然语言描述存在二义性和歧义性问题</strong></p>
<p>C、自然语言描述无法给出初步软件需求的详实信息</p>
<p><strong>D、自然语言描述存在不直观的问题</strong></p>
</li>
<li><p>4、与自然语言描述相比较，软件原型的初步需求描述有何优点。</p>
<p><strong>A、直观，易于理解初步软件需求</strong></p>
<p><strong>B、易于发现初步软件需求描述中存在的问题</strong></p>
<p>C、该方法比较简单</p>
<p><strong>D、易于帮助用户导出更多的软件需求</strong></p>
</li>
<li><p>1、以下是一张UML用例图，请指出该图存在哪些问题。<img src="https://note.youdao.com/yws/api/personal/file/WEBbb12bd1a9247d20890c901611dc38310?method=download&shareKey=9894ce454b328efffb5cc0277dd7ee44" alt=" 用例图 "></p>
<p><strong>A、执行者与用例之间的边不正确</strong></p>
<p><strong>B、系统边界画的不正确</strong></p>
<p>C、用例之间的关系不正确</p>
<p>D、用例画的不正确</p>
</li>
<li><p>2、在用例图中，外部执行者与用例之间的边表示什么样的内涵。</p>
<p>A、依赖关系</p>
<p>B、继承关系</p>
<p><strong>C、触发关系</strong></p>
<p><strong>D、交互关系</strong></p>
</li>
<li><p>3、如果某项初步软件需求存在可行性问题，需求工程师和用户就需要斟酌是否将该项需求作为最终的软件需求。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h2 id="第七章-分析软件需求"><a href="#第七章-分析软件需求" class="headerlink" title="第七章 分析软件需求"></a>第七章 分析软件需求</h2><h3 id="分析软件需求的任务和过程"><a href="#分析软件需求的任务和过程" class="headerlink" title="分析软件需求的任务和过程"></a>分析软件需求的任务和过程</h3><ul>
<li><p>1、在获取软件需求阶段，所获得的初步软件需求还存在哪些方面的问题和不足。</p>
<p><strong>A、有遗漏的需求</strong></p>
<p><strong>B、需求描述不准确</strong></p>
<p><strong>C、需求之间的关系不清晰</strong></p>
<p>D、尚未形成需求文档</p>
</li>
<li><p>2、分析软件需求是要在获取软件需求的基础上，对需求进行进一步的建模、精化和细化。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、分析软件需求的任务是。</p>
<p><strong>A、建立需求模型</strong></p>
<p><strong>B、细化软件需求</strong></p>
<p><strong>C、发现需求问题</strong></p>
<p><strong>D、形成需求文档</strong></p>
</li>
</ul>
<h3 id="软件需求模型及UML表示方法"><a href="#软件需求模型及UML表示方法" class="headerlink" title="软件需求模型及UML表示方法"></a>软件需求模型及UML表示方法</h3><ul>
<li><p>1、需求分析人员需要从哪些视点来详细地刻画软件需求。</p>
<p><strong>A、用例视点</strong></p>
<p>B、构件视点</p>
<p><strong>C、行为视点</strong></p>
<p>D、部署视点</p>
</li>
<li><p>2、对软件需求进行多视点建模的目的是为了加强对软件需求的理解、描述和分析。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、用例视点的需求模型用UML的哪个图来描述。</p>
<p>A、类图</p>
<p>B、通信图</p>
<p><strong>C、用例图</strong></p>
<p>D、状态图</p>
</li>
<li><p>1、哪些UML的图可以用来描述软件需求的行为模型。</p>
<p><strong>A、状态图</strong></p>
<p>B、类图</p>
<p><strong>C、顺序图</strong></p>
<p><strong>D、通信图</strong></p>
</li>
<li><p>2、在需求分析阶段，可用类图来描述软件需求中的行为特征。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、状态图有助于加强对软件需求行为特征的理解、描述和分析。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h3 id="分析和确定软件需求的优先级"><a href="#分析和确定软件需求的优先级" class="headerlink" title="分析和确定软件需求的优先级"></a>分析和确定软件需求的优先级</h3><ul>
<li><p>1、对于用户而言，所有的软件需求都不可或缺，重要性是一样的。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、需求分析工程师可以考虑哪些方面的因素来确定软件需求的优先级。</p>
<p>A、功能点的数量</p>
<p><strong>B、需求的重要性</strong></p>
<p><strong>C、用户需要的紧迫程度</strong></p>
<p>D、需求的规模</p>
</li>
<li><p>3、在软件开发过程中，具有高优先级的软件需求需要进行优先的分析、设计和实现。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h3 id="建立和分析软件需求模型"><a href="#建立和分析软件需求模型" class="headerlink" title="建立和分析软件需求模型"></a>建立和分析软件需求模型</h3><ul>
<li><p>1、需要为每个用例建立一个或者多个的交互模型，以获得关于这些用例的详实需求信息。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、软件需求模型所涉及的分析类主要包括以下几种。</p>
<p><strong>A、实体类</strong></p>
<p>B、虚拟类</p>
<p><strong>C、边界类</strong></p>
<p><strong>D、控制类</strong></p>
</li>
<li><p>3、如果类A的对象向类B的对象发消息M,那么意味着类B具有相应的职责和行为来处理消息M。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>4、如果类A的对象向类B的对象发送一个带有参数P的消息M,那么意味着类A和&#x2F;或类B具有与P相对应的属性。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>1、以下的顺序图存在哪些方面的绘图错误。 <img src="https://note.youdao.com/yws/api/personal/file/WEB01262adfc1b69860e840f954aba5ae1f?method=download&shareKey=2b4960e8f35eaa8ccb38b314ec112c1f" alt=" 顺序图 "></p>
<p>A、LoginResult(FAILED)返回消息绘制错误</p>
<p><strong>B、LoginUI对象没有活跃期</strong></p>
<p><strong>C、LoginUI没有下划线</strong></p>
<p><strong>D、Login（account, password）消息绘制错误</strong> </p>
</li>
<li><p>2、以下是一张分析类图，请说明哪些方面存在绘制错误。 <img src="https://note.youdao.com/yws/api/personal/file/WEB7da1e95b10d3501d72da9f079f9daa3c?method=download&shareKey=8c7d3ca14b06cac0f466cde2b750c009" alt=" 分析类图 "></p>
<p><strong>A、类名不应该带有下划线</strong></p>
<p><strong>B、带箭头的关系图符错误</strong></p>
<p>C、不带箭头的关系图符错误</p>
<p>D、每个类不应该带有《boundary》《control》《entity》等版类符号</p>
</li>
<li><p>3、在需求分析阶段，需要为每一个类建立起状态图。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
</ul>
<h3 id="文档化、确认和验证软件需求"><a href="#文档化、确认和验证软件需求" class="headerlink" title="文档化、确认和验证软件需求"></a>文档化、确认和验证软件需求</h3><ul>
<li><p>1、哪些人员需要参与软件需求文档的撰写工作。</p>
<p><strong>A、用户</strong></p>
<p><strong>B、客户</strong></p>
<p><strong>C、需求工程师</strong></p>
<p>D、设计工程师</p>
</li>
<li><p>2、哪些人员需要参与软件需求文档的评审</p>
<p><strong>A、用户</strong></p>
<p><strong>B、软件测试工程师</strong></p>
<p>C、程序员</p>
<p><strong>D、软件需求工程师</strong></p>
</li>
<li><p>3、基于UML的软件需求模型可能包括哪些UML图</p>
<p>A、用例图、顺序图、类图、部署图</p>
<p><strong>B、用例图、顺序图、类图、状态图</strong></p>
<p>C、用例图、顺序图、类图、构件图</p>
<p><strong>D、用例图、通信图、类图、状态图</strong></p>
</li>
</ul>
<h2 id="第八章-软件设计基础"><a href="#第八章-软件设计基础" class="headerlink" title="第八章 软件设计基础"></a>第八章 软件设计基础</h2><h3 id="软件设计"><a href="#软件设计" class="headerlink" title="软件设计"></a>软件设计</h3><ul>
<li><p>1、软件设计根据实际可有可无，软件开发主要是根据需求把代码编写出来。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、软构件作为设计元素的主要目的是为了促进对软构件的重用。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、高质量的软件设计应该具有哪些特性？</p>
<p><strong>A、满足要求</strong></p>
<p><strong>B、充分优化</strong></p>
<p>C、尽量使用新技术</p>
<p><strong>D、简单易懂</strong></p>
</li>
</ul>
<h3 id="软件设计的过程和原则"><a href="#软件设计的过程和原则" class="headerlink" title="软件设计的过程和原则"></a>软件设计的过程和原则</h3><ul>
<li><p>1、软件设计过程主要是形成软件设计规格说明，不需要进行管理。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、软件设计过程是迭代的，需要对不完善的设计制品进行不断迭代</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、设计约束包括哪些方面</p>
<p><strong>A、资源约束</strong></p>
<p>B、领导意图</p>
<p><strong>C、技术制约</strong></p>
<p>D、功能需求</p>
</li>
<li><p>4、软件设计工程师需要较高的技术水平和丰富经验，其余都不重要。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
</ul>
<h3 id="结构化软件设计方法学"><a href="#结构化软件设计方法学" class="headerlink" title="结构化软件设计方法学"></a>结构化软件设计方法学</h3><ul>
<li><p>1、面向数据流的结构化软件设计方法在当前已经完全过时了。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、变换型数据流图中包括</p>
<p><strong>A、输入流</strong></p>
<p><strong>B、输出流</strong></p>
<p>C、事务中心</p>
<p><strong>D、交换流</strong></p>
</li>
<li><p>3、变换型和事务型数据流图的设计过程完全相同。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>1、数据流图经过转换后，得到什么样的设计模型。</p>
<p>A、设计类图</p>
<p>B、流图</p>
<p><strong>C、层次化的软件模块图</strong></p>
<p>D、构件图</p>
</li>
<li><p>2、变换型数据流图中的变换流可能有多个转换，事务型数据流图中的事务中心只对应于一个转换。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、结构化软件设计方法学包含有多种方法，面向数据流的软件设计方法学只是其中的一种。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h3 id="面向对象软件设计方法学"><a href="#面向对象软件设计方法学" class="headerlink" title="面向对象软件设计方法学"></a>面向对象软件设计方法学</h3><ul>
<li><p>1、面向对象软件从需求模型到设计模型是精化过程，而不是转换过程。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、面向对象软件设计原则包括</p>
<p>A、尽量开放原则</p>
<p><strong>B、接口隔离原则</strong></p>
<p><strong>C、依赖倒置原则</strong></p>
<p><strong>D、最少知识原则</strong></p>
</li>
<li><p>3、与结构化设计方法学相比较，面向对象的软件设计有何优势？</p>
<p>A、技术更为简单</p>
<p><strong>B、采用精化而非转换的方法</strong></p>
<p><strong>C、支持粗粒度的软件重用</strong></p>
<p><strong>D、与分析采用相同的概念模型</strong></p>
</li>
</ul>
<h3 id="软件设计的CASE工具"><a href="#软件设计的CASE工具" class="headerlink" title="软件设计的CASE工具"></a>软件设计的CASE工具</h3><ul>
<li><p>1、下面哪些既是需求分析工具也是设计工具。</p>
<p>A、Juint</p>
<p><strong>B、StarUML</strong></p>
<p><strong>C、IBM Rational Rose</strong></p>
<p>D、Visual Studio</p>
</li>
<li><p>2、Microsoft Office和WPS可以作为软件设计CASE工具，支持软件设计文档的编写。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、软件设计工具通常可以提供哪些方面的支持。</p>
<p><strong>A、生成设计模型</strong></p>
<p><strong>B、生成需求模型</strong></p>
<p>C、绘制设计模型</p>
<p><strong>D、检查设计模型的质量</strong></p>
</li>
</ul>
<h3 id="软件设计的输出、评审和管理"><a href="#软件设计的输出、评审和管理" class="headerlink" title="软件设计的输出、评审和管理"></a>软件设计的输出、评审和管理</h3><ul>
<li><p>1、软件设计模型包括哪些内容。</p>
<p><strong>A、类图</strong></p>
<p><strong>B、活动图</strong></p>
<p>C、用例图</p>
<p><strong>D、用例交换图</strong></p>
</li>
<li><p>2、软件设计评审一般只需要软件设计人员参加，程序员不需要参加。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、 软件设计通常会存在哪些方面的质量问题。</p>
<p><strong>A、没有遵循和满足需求</strong></p>
<p><strong>B、设计不够详尽，无法指导编程</strong></p>
<p><strong>C、设计存在矛盾和不一致</strong></p>
<p><strong>D、软件设计的模块化、重用程度不高</strong></p>
</li>
</ul>
<h3 id="软件设计管理"><a href="#软件设计管理" class="headerlink" title="软件设计管理"></a>软件设计管理</h3><ul>
<li><p>1、软件设计制品通过评审后就不需要再进行更多管理了。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
</ul>
<h2 id="第九章-软件体系结构设计"><a href="#第九章-软件体系结构设计" class="headerlink" title="第九章 软件体系结构设计"></a>第九章 软件体系结构设计</h2><h3 id="软件体系结构设计概述"><a href="#软件体系结构设计概述" class="headerlink" title="软件体系结构设计概述"></a>软件体系结构设计概述</h3><ul>
<li><p>1、对于复杂的软件系统需要设计体系结构，简单的软件就不需要了。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、软件体系结构就只是一个模型，不需要从多个视点或不同层次来刻画。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、下面属于软件体系结构风格的有哪些？</p>
<p><strong>A、管道&#x2F;过滤器</strong></p>
<p><strong>B、层次</strong></p>
<p><strong>C、MVC</strong></p>
<p>D、适配器</p>
</li>
<li><p>1、每个软件开发都应该从已有的体系结构风格中选择一个来直接使用，无需对体系结构风格进行必要的修改。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、软件体系结构在软件开发中起到承上启下、影响全局的作用，非常重要。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、可以用哪些图来描述软件体系结构。</p>
<p><strong>A、包图</strong></p>
<p>B、用例图</p>
<p><strong>C、部署图</strong></p>
<p>D、顺序图</p>
</li>
<li><p>1、软件体系结构由哪些要素组成。</p>
<p><strong>A、构件或模块</strong></p>
<p>B、数据流</p>
<p><strong>C、连接子</strong></p>
<p><strong>D、约束和限制</strong></p>
</li>
<li><p>2、可以从哪些视点来描述软件体系结构。 </p>
<p><strong>A、逻辑构成视点</strong></p>
<p><strong>B、物理部署视点</strong></p>
<p><strong>C、程序开发视点</strong></p>
<p><strong>D、代码运行视点</strong></p>
</li>
<li><p>3、软件非功能性需求在软件体系结构设计中发挥着关键性的作用。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h3 id="软件体系结构模型的表示方法"><a href="#软件体系结构模型的表示方法" class="headerlink" title="软件体系结构模型的表示方法"></a>软件体系结构模型的表示方法</h3><ul>
<li><p>1、类图不能用来描述软件体系结构</p>
<p>A、正确 </p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、部署图中的边包括</p>
<p><strong>A、计算节点之间的通信关联</strong></p>
<p><strong>B、软件制品之间的依赖关系</strong></p>
<p>C、节点之间的继承关系</p>
<p><strong>D、软件制品与构件之间的依赖关系</strong></p>
</li>
<li><p>3、构件图中的构件接口包括</p>
<p><strong>A、供给接口</strong></p>
<p>B、实现接口</p>
<p><strong>C、需求接口</strong></p>
<p>D、转换接口</p>
</li>
</ul>
<h3 id="软件体系结构设计过程"><a href="#软件体系结构设计过程" class="headerlink" title="软件体系结构设计过程"></a>软件体系结构设计过程</h3><ul>
<li><p>1、软件体系结构的设计是一个迭代的过程。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、软件体系结构设计过程要形成哪些制品</p>
<p><strong>A、体系结构设计文档</strong></p>
<p><strong>B、体系结构模型</strong></p>
<p>C、详细设计文档</p>
<p><strong>D、软件部署模型</strong></p>
</li>
</ul>
<h3 id="设计初步的软件体系结构"><a href="#设计初步的软件体系结构" class="headerlink" title="设计初步的软件体系结构"></a>设计初步的软件体系结构</h3><ul>
<li><p>1、影响软件体系结构初步设计的关键软件需求有何特点。</p>
<p><strong>A、核心、基础的需求</strong></p>
<p><strong>B、对软件系统影响大的质量需求</strong></p>
<p><strong>C、重要开发约束需求</strong></p>
<p><strong>D、实现难度大、风险高的需求</strong></p>
</li>
<li><p>2、软件体系结构设计师应结合自己的开发经验来选择合适的软件体系结构风格，从而来开展软件体系结构设计</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、软件架构师需根据选定的软件体系结构风格，依据关键软件需求，进一步确定软件体系结构中的软件模块、每个模块的职责、模块间的逻辑关系，形成软件系统体系结构的逻辑视图。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h3 id="重用已有软件资源"><a href="#重用已有软件资源" class="headerlink" title="重用已有软件资源"></a>重用已有软件资源</h3><ul>
<li><p>1、重用已有软件资源就是要找到完全符合自己需求的相关制品</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、在软件体系结构设计阶段，可重用的软件资源包括。</p>
<p><strong>A、云服务</strong></p>
<p><strong>B、开源软件</strong></p>
<p>C、代码片段</p>
<p><strong>D、软构件</strong></p>
</li>
<li><p>3、可以从哪些地方寻找可重用的软件资源</p>
<p><strong>A、历史项目库</strong></p>
<p><strong>B、开源社区</strong></p>
<p><strong>C、网络中的云服务</strong></p>
<p>D、对其他公司制品进行破解</p>
</li>
</ul>
<h3 id="精化软件体系结构"><a href="#精化软件体系结构" class="headerlink" title="精化软件体系结构"></a>精化软件体系结构</h3><ul>
<li><p>1、软件系统的基础服务包括</p>
<p><strong>A、数据持久服务</strong></p>
<p><strong>B、隐私保护服务</strong></p>
<p><strong>C、安全控制服务</strong></p>
<p><strong>D、消息通讯服务</strong></p>
</li>
<li><p>2、软件系统中的子系统、构件、设计类等设计元素是在详细设计阶段才确定的</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、以下哪些元素属于设计元素。</p>
<p>A、用例</p>
<p>B、交互图</p>
<p><strong>C、构件</strong></p>
<p><strong>D、模块</strong></p>
</li>
</ul>
<h3 id="设计软件部署模型"><a href="#设计软件部署模型" class="headerlink" title="设计软件部署模型"></a>设计软件部署模型</h3><ul>
<li><p>1、软件部署模型只需要描述系统物理节点的结构。（答案B）</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、软件的部署模型描述了哪些方面的信息。</p>
<p><strong>A、计算节点</strong></p>
<p><strong>B、软构件</strong></p>
<p><strong>C、软件制品</strong></p>
<p><strong>D、节点之间的交互</strong></p>
</li>
<li><p>3、部署图中的计算节点既可以是计算机，也可以是诸如手机、可穿戴设备等嵌入式设备。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h3 id="文档化和评审软件系统结构设计"><a href="#文档化和评审软件系统结构设计" class="headerlink" title="文档化和评审软件系统结构设计"></a>文档化和评审软件系统结构设计</h3><ul>
<li><p>1、软件体系结构设计文档可作为单独的文档，加以撰写和管理。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、软件体系结构设计评审的任务是要看体系结构的设计是否满足软件需求要求。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、软件体系结构评审要关注的主要问题包括</p>
<p><strong>A、满足性</strong></p>
<p><strong>B、可追踪性</strong></p>
<p><strong>C、优化性</strong></p>
<p>D、创新性</p>
</li>
</ul>
<h2 id="第十章-软件用户界面设计"><a href="#第十章-软件用户界面设计" class="headerlink" title="第十章 软件用户界面设计"></a>第十章 软件用户界面设计</h2><h3 id="用户界面设计概述"><a href="#用户界面设计概述" class="headerlink" title="用户界面设计概述"></a>用户界面设计概述</h3><ul>
<li><p>1、一个软件采用哪种人机交互方式，需要结合软件的特征和用户的需求考虑。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、用户只和软件界面进行交互，看不到内部，所以界面设计比其他设计更重要。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、用户也可通过语音、手势等方式也可以与软件进行交互，因此人机交互的方式多种多样。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h3 id="用户界面组成及表示方法"><a href="#用户界面组成及表示方法" class="headerlink" title="用户界面组成及表示方法"></a>用户界面组成及表示方法</h3><ul>
<li><p>1、用户界面设计模型一般用可以展示原型的工具进行设计，采用类图、顺序图等进行界面设计没有必要</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、下面属于动态界面元素的是</p>
<p>A、确认按钮</p>
<p>B、窗口中不变的图标</p>
<p><strong>C、随用户选择变化的文本</strong></p>
<p>D、多选框</p>
</li>
<li><p>3、以下是word界面的一个截图，包含3个界面元素，第一个是“自动保存”的文字描述，用户点击后面二个图元可以设置自动保存模式，保存当前的文件。这三个界面元素分别属于什么形式的界面元素。 <img src="https://note.youdao.com/yws/api/personal/file/WEB4b43c511bc3630e99d2b3c99cd41a42b?method=download&shareKey=53af0183a1e6374904b554aca7977e10" alt=","></p>
<p><strong>A、静态元素、输入元素、命令元素</strong></p>
<p>B、动态元素、输入元素、输入元素</p>
<p>C、静态元素、动态元素、输入元素</p>
<p>D、动态元素、静态元素、输入元素</p>
</li>
</ul>
<blockquote>
<ul>
<li>静态元素，负责向用户显示某些信息，但是这些信息在软件运行过程中不会发生变化，如静态文本，图标、图形、图像等。</li>
<li>动态元素，负责向用户显示某些信息，但是这些信息会随软件系统的运行状况而展示不同的内容，且显示的内容不允许用户来直接修改，如不可编辑的文本，图标、图形、图像等。</li>
<li>用户输入元素，采用可编辑的文本、单选钮（radio button）、多选框（checkbox）、选择列表（select list）等形式，接受用户的信息输入。</li>
<li>用户命令元素，负责接受用户的命令输入，以触发后端的业务逻辑处理或刷新界面，如点击按钮、菜单、超链等。</li>
</ul>
</blockquote>
<ul>
<li><p>1、图形化的用户界面可以用UML的什么模型来表示。</p>
<p>A、包图</p>
<p>B、顺序图</p>
<p><strong>C、类图</strong></p>
<p>D、状态图</p>
</li>
<li><p>2、图形化用户界面的跳转关系可以用UML的什么图来表示。</p>
<p>A、包图</p>
<p><strong>B、顺序图</strong></p>
<p><strong>C、类图</strong></p>
<p>D、用例图</p>
</li>
<li><p>3、以下是word界面的一个截图，该图中包含哪些界面元素。 <img src="https://note.youdao.com/yws/api/personal/file/WEBf5753c47942f91ed6faffe402b894143?method=download&shareKey=8b32099bfb005c109c6059ff33aecbfe" alt=","></p>
<p>A、动态元素</p>
<p><strong>B、静态元素</strong></p>
<p><strong>C、输入元素</strong></p>
<p>D、命令元素</p>
</li>
</ul>
<h3 id="用户界面设计的过程和原则"><a href="#用户界面设计的过程和原则" class="headerlink" title="用户界面设计的过程和原则"></a>用户界面设计的过程和原则</h3><ul>
<li><p>1、用户界面设计的原则包括</p>
<p><strong>A、直观性</strong></p>
<p><strong>B、易操作性</strong></p>
<p>C、个性化</p>
<p><strong>D、人性化</strong></p>
</li>
</ul>
<blockquote>
<p>用户界面设计要自始至终遵循以用户为中心的基本原则，即要从用户的角度、站在他们的立场来开展用户界面的设计，以支持用户方便操作和灵活使用软件为目标，以用户的意见、建议、反馈等为准绳来不断地优化和改进用户界面设计，以用户是否满意为基准来判断用户界面设计的好坏。</p>
<ul>
<li>直观性</li>
<li>易操作性</li>
<li>一致性</li>
<li>反应性</li>
<li>容错性</li>
<li>人性化</li>
</ul>
</blockquote>
<h3 id="用户界面的初步设计"><a href="#用户界面的初步设计" class="headerlink" title="用户界面的初步设计"></a>用户界面的初步设计</h3><ul>
<li><p>1、用户界面的初步设计需要设计出较为完善的用户界面原型</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
</ul>
<blockquote>
<p>该项设计活动旨在依据需求用例模型和用例交互模型，明确目标软件系统存在哪些输入和输出、需要哪些用户界面、这些用户界面有哪些界面设计元素。用户界面设计工程师需要开展以下工作，以完成初步的用户界面设计。</p>
<p> 1.构思用户界面的设计元素。</p>
<p> 2.确定用户界面的操作。 </p>
</blockquote>
<h3 id="建立用户界面间的跳转关系"><a href="#建立用户界面间的跳转关系" class="headerlink" title="建立用户界面间的跳转关系"></a>建立用户界面间的跳转关系</h3><ul>
<li><p>1、用户操作软件系统的主界面指用户开始使用某项用例时系统呈现出来的界面</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、应尽量把界面元素放在一起，减少界面之间的跳转</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
</ul>
<blockquote>
<p>用户界面之间存在一定的逻辑关系，有主次之分，存在跳转关系。在本步骤，用户界面设计工程师需要标识和分析用户界面之间的上述关系。</p>
<ul>
<li>首先要标识出用户操作软件系统的主界面。</li>
<li>其次要标识和表示不同用户界面之间的跳转关系。</li>
</ul>
<p>UML的交互图和类图可用来表示用户界面间的跳转关系。前者表示特定应用场景下的用户界面跳转及跳转发生时的消息传递，后者借助有向关联关系表示在目标软件系统中不同界面间可能发生的跳转及跳转的原因。</p>
</blockquote>
<h3 id="精化用户界面设计"><a href="#精化用户界面设计" class="headerlink" title="精化用户界面设计"></a>精化用户界面设计</h3><ul>
<li><p>1、精化用户界面设计的工作包括</p>
<p><strong>A、查漏补缺</strong></p>
<p><strong>B、优化设计</strong></p>
<p><strong>C、保持一致</strong></p>
<p>D、实现最终界面</p>
</li>
</ul>
<blockquote>
<p>用户界面设计工程师需要对每个用户界面进行精心的设计，以得到更为具体、完整、优化和友好的用户界面。它主要包括以下几个方面的工作。</p>
<ul>
<li>查漏补缺，补充用户界面中遗漏的界面设计元素，形成完整的用户界面模型。</li>
<li>建立跳转，将用户界面的跳转动作与相关的界面元素及其操作事件关联起来，建立起关于界面跳转的详细工作流程。</li>
<li>优化设计，结合用例中用户与软件系统的交互，探讨将用户界面进行合并和拆分的可能性。</li>
<li>调整布局，对用户界面中的多个界面元素进行组织和布局，需要考虑将哪些界面元素组织在一个区域以加强用户对用户界面的理解，简便用户的操作；需要将哪些界面元素按照什么样的方式进行对齐，以提高界面的美观性。</li>
<li>美化界面，对界面元素进行美化，以提升界面元素的美观性。</li>
<li>保持一致，确保软件系统中不同用户界面的风格的一致性。</li>
<li>调整模型，同步修改用户界面的UML模型，以确保用户界面与其描述模型二者之间的一致性。</li>
</ul>
</blockquote>
<h3 id="用户界面设计的输出"><a href="#用户界面设计的输出" class="headerlink" title="用户界面设计的输出"></a>用户界面设计的输出</h3><ul>
<li><p>1、用户界面设计的输出就是最终实现的软件界面。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、用户界面设计的评审需要用户参与。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<blockquote>
<h4 id="用户界面设计的输出制品"><a href="#用户界面设计的输出制品" class="headerlink" title="用户界面设计的输出制品"></a>用户界面设计的输出制品</h4><p>软件用户界面的设计活动结束之后，将产生目标软件系统的以下软件制品：</p>
<ul>
<li>可运行的用户界面原型</li>
<li>用户界面的设计模型</li>
</ul>
<h4 id="用户界面设计评审"><a href="#用户界面设计评审" class="headerlink" title="用户界面设计评审"></a>用户界面设计评审</h4><p>用户界面设计完成之后，用户界面设计工程师需要邀请用户、程序员、软件详细设计工程师等多方，对用户界面设计模型及原型进行验证和评审。</p>
<ul>
<li>用户界面是否反映了软件需求。</li>
<li>用户界面是否符合用户的操作习惯和要求。</li>
<li>用户界面的风格是否一致。</li>
<li>用户界面及其设计元素是否美观和直观，易于理解。</li>
<li>用户界面的布局是否合理，跳转是否流畅，界面跳转与用例中的交互动作序列在逻辑上是否协调一致。</li>
<li>用户界面的原型展示与其UML模型描述二者之间是否一致，用户界面的类图和顺序图二个模型之间是否一致。</li>
<li>用户界面的不同设计元素之间是否一致。</li>
</ul>
</blockquote>
<h3 id="评审用户界面设计"><a href="#评审用户界面设计" class="headerlink" title="评审用户界面设计"></a>评审用户界面设计</h3><ul>
<li><p>1、用户界面设计的评审需要用户的深度参与。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<blockquote>
<h4 id="软件体系结构设计评审"><a href="#软件体系结构设计评审" class="headerlink" title="软件体系结构设计评审"></a>软件体系结构设计评审</h4><p>    用户界面设计完成之后，用户界面设计工程师需要邀请用户、程序员、软件详细设计工程师等多方，对用户界面设计模型及原型进行验证和评审。</p>
<ul>
<li>用户界面是否反映了软件需求。</li>
<li>用户界面是否符合用户的操作习惯和要求。</li>
<li>用户界面的风格是否一致。</li>
<li>用户界面及其设计元素是否美观和直观，易于理解。</li>
<li>用户界面的布局是否合理，跳转是否流畅，界面跳转与用例中的交互动作序列在逻辑上是否协调一致。</li>
<li>用户界面的原型展示与其UML模型描述二者之间是否一致，用户界面的类图和顺序图二个模型之间是否一致。</li>
<li>用户界面的不同设计元素之间是否一致。</li>
</ul>
</blockquote>
<h2 id="第十一章-软件详细设计"><a href="#第十一章-软件详细设计" class="headerlink" title="第十一章 软件详细设计"></a>第十一章 软件详细设计</h2><h3 id="软件详细设计概述和UML建模"><a href="#软件详细设计概述和UML建模" class="headerlink" title="软件详细设计概述和UML建模"></a>软件详细设计概述和UML建模</h3><ul>
<li><p>1、软件详细设计是体系结构设计与软件实现间的“桥梁”，相对于软件体系结构设计，它更加关注软件的“实现”，是体系结构设计得到落实的“关键”。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、软件详细设计阶段需要针对哪些设计元素进行精化和细化。</p>
<p><strong>A、子系统</strong></p>
<p><strong>B、构件</strong></p>
<p><strong>C、关键设计类</strong></p>
<p><strong>D、用户界面类</strong></p>
</li>
<li><p>3、在体系结构设计阶段，每个设计元素都是一个“黑盒子”，软件架构师仅给出了这些设计元素的职责划分以及对外接口，软件详细设计则是要给出这些设计元素的内部细节信息，让每个设计元素从“黑盒子”变为“白盒子”，进而指导后续的编码实现。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>4、对一个关键类的详细设计，只要给出该类包含的所有成员变量和成员方法就可以了。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
</ul>
<blockquote>
<h4 id="软件详细设计"><a href="#软件详细设计" class="headerlink" title="软件详细设计"></a>软件详细设计</h4><p>    软件详细设计是软件体系结构设计与软件实现之间的桥梁，不同于软件体系结构设计，软件详细设计是从微观和局部的视角，对软件体系结构设计和用户界面设计的设计元素（包括子系统、构件、用户界面类、关键设计类等）做进一步的精化和细化，给出软件系统的细节性、细粒度和底层的设计信息，用以指导后续的软件实现工作。     软件体系结构设计和用户界面设计会产生一组软件设计元素，包括子系统、构件、用户界面类、关键设计类等。在软件体系结构设计阶段，软件架构师仅仅给出了这些设计元素的职责划分，明确了设计元素的对外接口，这些设计元素还都是一个个“黑盒子”，不清楚其内部有哪些具体的设计细节，如软构件内部有哪些具体的设计类，每个设计类内部有哪些属性和方法，每个方法采用什么样的算法来实现其功能的。详细设计就是要给出这些设计元素的内部细节信息，让每个设计元素从“黑盒子”变为“白盒子”，进而来指导后续这些设计元素的编码实现。</p>
<h4 id="软件详细设计的任务和过程"><a href="#软件详细设计的任务和过程" class="headerlink" title="软件详细设计的任务和过程"></a>软件详细设计的任务和过程</h4><p>    软件详细设计的任务是对体系结构设计和用户界面设计成果进行细化和精化，获得高质量、面向实现的详细设计模型。如图10.1所示，软件详细设计的输入包括软件需求、软件体系结构设计、软件用户界面设计、以及软件实现的约束和限制，最终产生软件详细设计模型和文档。 <img src="https://note.youdao.com/yws/api/personal/file/WEBb240c9a541aefc26f12cccebd8aefa1c?method=download&shareKey=eea5c35550959008bcb5b766ecf43310" alt=","></p>
<p>    软件详细设计包括用例设计、类设计、数据设计、子系统&#x2F;构件设计、文档化和评审软件详细设计五个步骤。</p>
<ul>
<li>用例设计：给出用例的具体实现解决方案，即详细描述用例是如何通过各个设计元素（包括子系统、软构件、设计类、用户界面类等）的交互和协作来完成的。</li>
<li>类设计：给出每一个设计类的具体细节，包括类的属性定义、方法的实现算法等，使得程序员能够基于类设计给出这些类的实现代码。</li>
<li>数据设计：数据设计是要对软件所涉及的持久数据及其操作进行设计，明确持久数据的存储方式和格式，细化对数据进行操作（如写入、读出、修改、删除、查询等）的实现细节。</li>
<li>子系统&#x2F;软构件设计：针对粗粒度的子系统和构件，给出其细粒度的设计元素，明确这些设计元素之间的协作关系，使得它们能够实现子系统&#x2F;构件接口所规定的功能和服务。</li>
<li>文档化和评审软件详细设计：通过文档描述软件详细设计的具体信息及成果，并组织软件详细设计的软件制品（包括设计模型和文档）进行评审，以发现和纠正存在的问题和不足。</li>
</ul>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEBf1cbd6ede441ad33f01991e267089eae?method=download&shareKey=6c180a4383c724f29b64ebfc664f1e88" alt=" , "></p>
<h4 id="软件详细设计的原则"><a href="#软件详细设计的原则" class="headerlink" title="软件详细设计的原则"></a>软件详细设计的原则</h4><p>    软件详细设计除了要遵循模块化、高内聚度、低耦合度、信息隐藏等设计原则之外，还需要结合软件详细设计的具体要求，遵循以下原则。</p>
<ul>
<li>针对软件需求：设计模型能够支持所有软件需求项；</li>
<li>深入优化设计：从可靠性、可重用性等软件质量视角对详细设计进行优化；</li>
<li>设计足够详细：设计模型详实到足以支持程序员编码；</li>
<li>充分软件重用：从不同维度和层次进行软件重用，提高软件开发效率和质量，减低开发成本。</li>
</ul>
<h4 id="详细设计的表示方法及UML活动图"><a href="#详细设计的表示方法及UML活动图" class="headerlink" title="详细设计的表示方法及UML活动图"></a>详细设计的表示方法及UML活动图</h4><p>    软件详细设计会产生一系列的软件设计模型，它们可用UML的相关图加以表示。例如，用交互图，尤其是顺序图，来表示用例设计的结果；用类图来刻画类设计和子系统设计的结果；用构件图来表示软构件的设计；用状态图来表示特定类对象的状态变迁等；用活动图来表示多个类对象的交互和协作等。     活动图用于描述实体为完成某项功能而执行的操作序列，它刻画了实体的动态行为特征。</p>
</blockquote>
<ul>
<li><p>1、软件详细设计包括____。</p>
<p><strong>A、用例设计</strong></p>
<p>B、界面设计</p>
<p><strong>C、关键类设计</strong></p>
<p><strong>D、数据设计</strong></p>
</li>
<li><p>2、软件详细设计原则包括____。</p>
<p><strong>A、模块化和信息隐藏</strong></p>
<p><strong>B、高内聚、低耦合</strong></p>
<p><strong>C、针对软件需求</strong></p>
<p><strong>D、深入优化设计</strong></p>
</li>
<li><p>3、下面对软件详细设计模型的表示描述正确的是____。</p>
<p><strong>A、用顺序图来表示用例设计</strong></p>
<p><strong>B、用类图、状态图和活动图来表示类设计</strong></p>
<p><strong>C、用E-R图和类图来表示数据设计</strong></p>
<p><strong>D、用构件图来表示构件设计</strong></p>
</li>
<li><p>4、详细设计中“详细”是指设计要提供足够多的细节，可有效支持编码实现。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>1、详细设计是在软件体系结构设计的基础上开展，无需参考软件需求。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、以下关于UML活动图的描述，哪些是正确的。</p>
<p>A、用于描述结构特征</p>
<p><strong>B、用于描述行为特征</strong></p>
<p><strong>C、可刻画对象的并发和同步动作</strong></p>
<p><strong>D、可用于刻画操作流程</strong></p>
</li>
<li><p>3、以下是一个活动图，该图存在哪些错误。 <img src="https://note.youdao.com/yws/api/personal/file/WEB74917fa9f08b5749ab445eb3012345ac?method=download&shareKey=a6fca25f751653318a76260db3bc57d5" alt=" ， "></p>
<p><strong>A、LoginUI、LoginManager应该有下划线以表示对象</strong></p>
<p><strong>B、终止节点不应有外出的连线</strong></p>
<p>C、箭头符号出错</p>
<p>D、泳道绘制出错</p>
</li>
</ul>
<h3 id="面向对象详细设计模式"><a href="#面向对象详细设计模式" class="headerlink" title="面向对象详细设计模式"></a>面向对象详细设计模式</h3><ul>
<li><p>1、使用软件设计模式可以起到什么作用</p>
<p><strong>A、使软件设计更加规范化，代码编写更为工程化</strong></p>
<p><strong>B、提高软件开发效率，缩短软件开发周期</strong></p>
<p><strong>C、提高软件设计的质量</strong></p>
<p><strong>D、提高软件设计工程师以及程序员的逻辑思维能和抽象分析能力</strong></p>
</li>
<li><p>2、下面关于单例模式的描述中正确的是</p>
<p><strong>A、单例模式适用于那些一个类只允许实例化一个对象的场景</strong></p>
<p><strong>B、单例模式通过将构造函数设为私有函数来避免对类进行实例化操作</strong></p>
<p>C、单例模式提供一个全局的实例对象变量</p>
<p><strong>D、单例模式中在不同地方调用getInstance()函数返回的都是同一个实例化对象</strong></p>
</li>
<li><p>3、下面关于观察者模式的描述中正确的是</p>
<p><strong>A、观察者模式适用于当某对象状态发生改变时，需要通知其所有依赖该对象的应用场景</strong></p>
<p>B、在观察者模式中，所有的观察者应该都是同一类型的</p>
<p>C、在观察者模式中，需要在每个具体目标里面保存其所有的观察者</p>
<p><strong>D、使用观察者模式可有效降低目标主题与观察者之间的耦合关系</strong></p>
</li>
</ul>
<h3 id="用例设计"><a href="#用例设计" class="headerlink" title="用例设计"></a>用例设计</h3><ul>
<li><p>1、下面关于用例设计的描述中正确的是____。</p>
<p><strong>A、用例设计阶段需要对需求分析阶段的每一个用例都进行设计</strong></p>
<p><strong>B、用例设计的主要目标是设计每个用例的具体实现方案</strong></p>
<p>C、用例设计阶段的用例实现图和设计类图与需求分析阶段的用例交互图和分析类图是一样的</p>
<p><strong>D、用例设计不仅要考虑需求分析阶段的软件需求模型，还要考虑体系结构和界面设计阶段的设计成果</strong></p>
</li>
<li><p>2、下面关于用例交互图和用例实现图的关系描述正确的是____</p>
<p>A、用例交互图和用例实现图都是描述用例的交互行为，因此其实是一样的</p>
<p><strong>B、用例交互图面向的是用户，用例实现图面向的是编程人员，二者针对的对象不同，因此两者的参与对象和交互行为描述方式也不一样</strong></p>
<p><strong>C、用例实现图的设计必须以用例交互图为基础，不能脱离用例交互图</strong></p>
<p><strong>D、用例交互图中的分析类通常都与用例实现图中的设计类存在一定的对应关系</strong></p>
</li>
<li><p>3、下面关于设计类图的描述正确的是____</p>
<p>A、设计类图中的类与分析类图中的类应该是完全一样、一一对应的</p>
<p>B、必须针对每个用例的实现都建立一个设计类图</p>
<p><strong>C、设计类图中的节点可以是子系统&#x2F;构件</strong></p>
<p><strong>D、根据用例实现图中相关对象之间的交互来确定设计类图中相应类之间的关系</strong></p>
</li>
</ul>
<h3 id="类设计"><a href="#类设计" class="headerlink" title="类设计"></a>类设计</h3><ul>
<li><p>1、类设计的任务是，对详细软件设计所产生的设计类作进一步的精化和细化，使得程序员通过类设计模型就可进行相应的编码工作</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、类设计过程中需要考虑的输入包括____。</p>
<p><strong>A、软件需求模型，包括用例图、用例的交互图、分析类图等</strong></p>
<p><strong>B、软件体系结构设计模型、用户界面设计模型</strong></p>
<p><strong>C、用例设计阶段产生的用例实现图</strong></p>
<p><strong>D、用例设计阶段产生的设计类图</strong></p>
</li>
<li><p>3、类设计应遵循的原则包括____。</p>
<p><strong>A、模块化和信息隐藏</strong></p>
<p><strong>B、高内聚度、低耦合度</strong></p>
<p><strong>C、对类的内部结构、行为等给予准确的表达，对类的接口、属性、方法等方面给予足够详细的设计</strong></p>
<p><strong>D、类的内部属性、方法等设计与类的职责、关系等是相互一致的</strong></p>
</li>
<li><p>4、按照信息隐藏的原则，除非确有必要，否则应将类“隐藏”于包的内部，只对包中的其它类可见</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>1、下面关于类之间关系描述正确的是____</p>
<p><strong>A、在不违背简单性、自然性原则的前提下，应尽量采用语义连接强度较小的关系</strong></p>
<p><strong>B、依赖是最弱的类关系，表现为类A在某个方法中临时性使用类B</strong></p>
<p><strong>C、关联表现的是两个类间存在稳定的关系</strong></p>
<p>D、聚合表示的是两个对象间存在一个对象撤销另一个类也消亡的部分整体关系，组合表示的是多个整体对象共享同一部件对象的部分整体关系</p>
</li>
<li><p>2、在设计类时，一个类的方法和属性主要来源于用例实现图中对象间传递的消息及其参数</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、类设计的成果包括____</p>
<p>A、用例实现图</p>
<p><strong>B、精化后的设计类图</strong></p>
<p><strong>C、描述类方法实现算法的活动图</strong></p>
<p><strong>D、描述类对象状态变化的状态图</strong></p>
</li>
</ul>
<h3 id="数据设计"><a href="#数据设计" class="headerlink" title="数据设计"></a>数据设计</h3><ul>
<li><p>1、 数据设计就是设计数据库的表格</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、数据库表通常可用类图来描述，类名表示表格名称，类的属性表示表格字段，类的方法表示数据操作</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、在确定需要永久保存的数据时，通常需要根据软件需求模型和设计模型明确系统涉及到哪些实体，以及实体之间有什么关系，从而建立系统的实体-关系模型</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>1、确定数据存储和组织的方式时，不仅要关心系统需要考虑哪些数据，还需要考虑这些数据之间的关系</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、确定数据存储和组织的方式时，对二个类之间存在1:1或者1：n的关联关系，可以使用外键的方式降低数据的冗余性</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h3 id="子系统和软结构设计"><a href="#子系统和软结构设计" class="headerlink" title="子系统和软结构设计"></a>子系统和软结构设计</h3><ul>
<li><p>1、如果一个软件在设计时没有划分子系统，也没有构件，则不需要开展子系统&#x2F;构件设计。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、子系统&#x2F;构件的设计与整个软件系统的设计是类似的，也包括用例设计、类设计、和数据设计。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h3 id="文档化和评审软件详细设计"><a href="#文档化和评审软件详细设计" class="headerlink" title="文档化和评审软件详细设计"></a>文档化和评审软件详细设计</h3><ul>
<li><p>1、撰写软件详细设计文档会增加项目开发工作量，影响开发进度，因此该文档应该越简单越好。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、下列哪些人员需要参与软件详细设计评审。</p>
<p><strong>A、用户</strong></p>
<p><strong>B、软件架构师</strong></p>
<p><strong>C、程序员</strong></p>
<p><strong>D、测试人员</strong></p>
</li>
<li><p>3、设计评审时不仅需要关注功能性需求的实现方案，还需要关注非功能性需求的实现方案。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>4、 以下属于详细设计评审时需要关注的内容的是____</p>
<p><strong>A、规范性，即文档是否遵循相应的文档规范</strong></p>
<p><strong>B、正确性，即设计模型是否能支持所有的软件需求项</strong></p>
<p><strong>C、充分性，即设计模型是否足够详细到能支持编码实现</strong></p>
<p><strong>D、优化性，即设计模型是否已充分优化方式支持所有软件需求的实现</strong></p>
</li>
</ul>
<h2 id="第十二章-软件实现基础"><a href="#第十二章-软件实现基础" class="headerlink" title="第十二章 软件实现基础"></a>第十二章 软件实现基础</h2><h3 id="软件实现概述"><a href="#软件实现概述" class="headerlink" title="软件实现概述"></a>软件实现概述</h3><ul>
<li><p>1、软件实现就是程序编码。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、下面关于软件实现的描述正确的是____。</p>
<p><strong>A、软件实现需要考虑软件体系结构设计模型和用户界面设计模型</strong></p>
<p><strong>B、软件实现需要考虑软件详细设计模型</strong></p>
<p><strong>C、软件实现阶段需要开展必要的单元测试</strong></p>
<p><strong>D、软件实现的主要目标是产生目标软件系统的高质量程序代码</strong></p>
</li>
<li><p>3、软件设计模型往往存在不够详细、考虑不周全的情况，因此程序员在软件实现时既要依据软件设计模型，同时也需要发挥他们的智慧和主观能动性，发现设计中存在的问题。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>4、下面哪些活动属于软件实现。</p>
<p><strong>A、编写代码</strong></p>
<p><strong>B、单元测试</strong></p>
<p><strong>C、代码调试</strong></p>
<p><strong>D、软件测试</strong></p>
</li>
</ul>
<h3 id="程序设计语言"><a href="#程序设计语言" class="headerlink" title="程序设计语言"></a>程序设计语言</h3><ul>
<li><p>1、下面关于程序设计语言的描述正确的是____</p>
<p><strong>A、虽然机器语言代码的执行效率比较高，但由于用机器语言编程效率低且容易出错，因此现在几乎很少有人用机器语言进行编程</strong></p>
<p><strong>B、汇编语言代码可以直接操作计算机硬件，且占用存储空间少、执行效率高</strong></p>
<p><strong>C、结构化程序设计语言以过程和函数作为基本模块，整个程序由一个个函数组成</strong></p>
<p><strong>D、面向对象程序设计以类作为基本的模块单元，以对象作为程序运行的基本要素，以消息传递作为对象之间的交互手段</strong></p>
</li>
<li><p>2、下面属于面向对象程序设计语言的是____</p>
<p>A、C</p>
<p><strong>B、Java</strong></p>
<p><strong>C、Python</strong></p>
<p><strong>D、C++</strong></p>
</li>
<li><p>3、软件开发时，程序设计语言的选择需要考虑以下哪些因素____</p>
<p><strong>A、软件的应用领域</strong></p>
<p><strong>B、与遗留软件系统的交互</strong></p>
<p><strong>C、软件的特殊功能及需求</strong></p>
<p><strong>D、软件的目标平台</strong></p>
</li>
</ul>
<h3 id="高质量编码"><a href="#高质量编码" class="headerlink" title="高质量编码"></a>高质量编码</h3><ul>
<li><p>1、代码质量分为外部质量和内部质量，确保代码内部质量的有效手段是软件测试。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、为提高代码的可理解性和可维护性，下面描述正确的是____</p>
<p><strong>A、在编写代码时，程序员要遵循编码规范来编写代码</strong></p>
<p><strong>B、在编写代码时，程序员要依据模块化的原则尽量把相对独立的功能封装成函数</strong></p>
<p><strong>C、在编写代码时，程序员要尽可能地降低代码的复杂度</strong></p>
<p>D、在编写代码时，程序员要编写必要的异常定义和处理代码</p>
</li>
<li><p>3、编码过程中程序员可能发现软件设计模型和文档中存在不合理、有问题的地方，这种情况下，程序员在编写代码的同时还要同步修改和完善相应的软件设计模型和文档。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>4、关于良好的代码编程风格，下面描述正确的是____</p>
<p><strong>A、格式化代码的布局，尽可能使其清晰、明了</strong></p>
<p><strong>B、尽可能提供简洁的代码，不要人为地增加代码的复杂度</strong></p>
<p><strong>C、对代码辅之以适当的文档，以加强程序的理解</strong></p>
<p><strong>D、加强程序代码的结构化组织，提高代码的可读性</strong></p>
</li>
</ul>
<h3 id="支持软件实现的CASE工具"><a href="#支持软件实现的CASE工具" class="headerlink" title="支持软件实现的CASE工具"></a>支持软件实现的CASE工具</h3><ul>
<li><p>1、下面属于C&#x2F;C++编译器的是</p>
<p><strong>A、gcc&#x2F;g++</strong></p>
<p><strong>B、cl</strong></p>
<p><strong>C、 clang</strong></p>
<p>D、javac</p>
</li>
<li><p>2、集成开发环境（IDE）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、下面属于集成开发环境的是____</p>
<p><strong>A、Visual Studio</strong></p>
<p><strong>B、Eclipse</strong></p>
<p><strong>C、Android Studio</strong></p>
<p><strong>D、PyCharm</strong></p>
</li>
</ul>
<h3 id="软件实现的输出"><a href="#软件实现的输出" class="headerlink" title="软件实现的输出"></a>软件实现的输出</h3><ul>
<li><p>1、软件实现的输出包括____</p>
<p><strong>A、源程序代码</strong></p>
<p><strong>B、可执行程序</strong></p>
<p><strong>C、软件测试报告</strong></p>
<p>D、用户使用手册</p>
</li>
</ul>
<h2 id="第十三章-编写代码"><a href="#第十三章-编写代码" class="headerlink" title="第十三章 编写代码"></a>第十三章 编写代码</h2><h3 id="编写代码的任务"><a href="#编写代码的任务" class="headerlink" title="编写代码的任务"></a>编写代码的任务</h3><ul>
<li><p>1、下面关于编写代码的描述正确的是____。</p>
<p><strong>A、编写代码旨在借助于程序设计语言，编写出目标软件系统的源程序代码</strong></p>
<p><strong>B、程序员在编写代码过程中还需要开展程序单元测试、代码审查等质量保证工作</strong></p>
<p><strong>C、编写代码过程中程序员要充分发挥其创新性和主观能动性，创作出算法精巧、运行高效的代码</strong></p>
<p><strong>D、编写代码过程中程序员需要基于软件设计模型和文档，遵循特定的编程风格，确保其程序代码满足工程化开发要求</strong></p>
</li>
</ul>
<h3 id="基于设计编写代码"><a href="#基于设计编写代码" class="headerlink" title="基于设计编写代码"></a>基于设计编写代码</h3><ul>
<li><p>1、下面关于基于设计编写代码的描述正确的是____</p>
<p><strong>A、基于设计编写代码指将软件设计模型映射为用程序设计语言所描述的程序代码</strong></p>
<p><strong>B、基于设计编写代码包括编写类代码、编写用户界面代码、编写数据设计代码</strong></p>
<p>C、基于设计编写代码只是简单的映射，对程序员要求不高</p>
<p><strong>D、基于设计编写代码须保证代码与设计的一致性，若设计存在问题则需修改设计</strong></p>
</li>
<li><p>2、下面属于编写类代码主要工作的是____</p>
<p><strong>A、编写类的定义代码</strong>    </p>
<p><strong>B、编写类中方法的实现代码</strong>  </p>
<p><strong>C、编写描述类之间关系的代码</strong>  </p>
<p><strong>D、编写类与类间的组织关系代码</strong></p>
</li>
<li><p>3、下面属于编写用户界面代码主要工作的是____</p>
<p><strong>A、定义界面设计元素</strong></p>
<p><strong>B、编写界面类代码</strong>   </p>
<p><strong>C、编写界面事件的响应处理代码</strong></p>
<p><strong>D、编写界面之间的跳转关系代码</strong></p>
</li>
<li><p>4、下面属于编写数据设计代码主要工作的是____</p>
<p><strong>A、在数据库管理系统中创建相应的数据库关系表格</strong></p>
<p><strong>B、编写与数据库建立连接的程序代码</strong></p>
<p><strong>C、编写操作数据库的程序代码</strong></p>
<p>D、管理数据管理系统中的数据</p>
</li>
</ul>
<h3 id="代码片段重用"><a href="#代码片段重用" class="headerlink" title="代码片段重用"></a>代码片段重用</h3><ul>
<li><p>1、关于代码片段重用，下面描述正确的是____</p>
<p><strong>A、一个代码片段通常实现了类中的一个具体、细粒度的功能</strong></p>
<p><strong>B、开源技术问答社区中有大量经过实践检验、具有较高质量的代码片段</strong></p>
<p><strong>C、程序员可以自己编写精巧、优雅、高效的程序代码片段</strong></p>
<p><strong>D、程序员可以通过重用开源社区中的高质量的代码片段来完成相应的编程任务</strong></p>
</li>
</ul>
<h3 id="软件缺陷"><a href="#软件缺陷" class="headerlink" title="软件缺陷"></a>软件缺陷</h3><ul>
<li><p>1、关于软件缺陷，下面描述正确的是____</p>
<p><strong>A、软件缺陷既包括程序代码中的不正确实现，也包括需求和设计中的不正确描述</strong></p>
<p><strong>B、软件缺陷产生于软件开发全过程，只要有人介入的地方就有可能产生软件缺陷</strong></p>
<p><strong>C、任何人都有可能在软件开发过程中犯错误，进而引入软件缺陷</strong></p>
<p><strong>D、对于大型复杂的软件系统而言，要开发出零缺陷的软件系统几乎是不可能的</strong></p>
</li>
<li><p>2、关于软件缺陷的描述，下面说法正确的是____。</p>
<p>A、只有在软件公司才需要对软件缺陷进行详细的描述</p>
<p><strong>B、对发现的缺陷进行详细描述有助于缺陷的管理，进而提高软件产品的质量</strong></p>
<p><strong>C、对发现的缺陷进行详细描述可以帮助开发人员分析、纠正和修复软件缺陷</strong></p>
<p><strong>D、对软件缺陷的描述一般包括标识符、类型、严重程度、症状、原因等方面</strong></p>
</li>
<li><p>3、</p>
<p>关于软件缺陷的应对方法，下面说法正确的是____。</p>
<p><strong>A、为达到预防缺陷的目的，要求开发人员对开发的每一步都要积极思考该步骤是否会产生软件缺陷，从而达到尽量少犯错误的目标</strong></p>
<p><strong>B、由于软件缺陷不可避免，对一些核心模块，往往提供容错模块和代码来提高软件的可靠性</strong></p>
<p><strong>C、发现缺陷不仅包括软件测试，还包括文档和模型评审、代码走查等</strong></p>
<p><strong>D、修复软件缺陷有可能引入新的缺陷，因此缺陷修复需谨慎，且修复后需开展回归测试</strong></p>
</li>
<li><p>4、关于软件缺陷的状态，下面说法正确的是____。</p>
<p><strong>A、测试人员发现软件缺陷后，软件缺陷一开始都是处于尚未确认状态</strong></p>
<p><strong>B、对尚未确认的缺陷进行确认后，缺陷可能变成有效、无效、或重复状态</strong></p>
<p><strong>C、在分析软件缺陷时可能因缺陷的描述信息不完整，导致无法准确理解缺陷内容</strong></p>
<p><strong>D、所有报告的软件缺陷最终都应处于关闭状态</strong></p>
</li>
</ul>
<h3 id="程序调试"><a href="#程序调试" class="headerlink" title="程序调试"></a>程序调试</h3><ul>
<li><p>1、关于程序调试，下面描述正确的是____</p>
<p><strong>A、程序调试是通过运行程序代码，确定软件缺陷的原因，定位和修复缺陷的过程</strong></p>
<p><strong>B、对复杂的软件系统，程序员通常需要花费大量的时间和精力用于软件调试</strong></p>
<p><strong>C、程序调试不是盲目地运行程序，程序员需要在理解缺陷及其症状的前提下，构想和假设产生缺陷的原因，然后有目标的开展调试</strong></p>
<p>D、只有通过gdb, Debugger等调试工具分步运行程序才是程序调试</p>
</li>
</ul>
<h3 id="基于群智知识来解决编程和调试问题"><a href="#基于群智知识来解决编程和调试问题" class="headerlink" title="基于群智知识来解决编程和调试问题"></a>基于群智知识来解决编程和调试问题</h3><ul>
<li><p>1、 关于基于群智知识来解决编程和调试问题，下面描述正确的是____</p>
<p><strong>A、群智知识主要指开源技术问答社区中的互联网大众的知识</strong></p>
<p><strong>B、典型的技术问答社区包括Stack Overflow、CSDN等</strong></p>
<p><strong>C、程序员可以在开源社区中搜索已有的问题解决方案，也可以发布问题寻求帮忙</strong></p>
<p><strong>D、在自己难以解决身边又缺乏高手帮忙的情况下，基于群智知识是解决问题的一种有效手段</strong></p>
</li>
</ul>
<h3 id="编写代码的输出"><a href="#编写代码的输出" class="headerlink" title="编写代码的输出"></a>编写代码的输出</h3><ul>
<li><p>1、编写的输出包括____</p>
<p><strong>A、源程序代码</strong></p>
<p><strong>B、可执行程序</strong></p>
<p><strong>C、程序单元测试报告</strong></p>
<p>D、用户使用手册</p>
</li>
</ul>
<h2 id="第十四章-软件测试"><a href="#第十四章-软件测试" class="headerlink" title="第十四章 软件测试"></a>第十四章 软件测试</h2><h3 id="软件测试概述"><a href="#软件测试概述" class="headerlink" title="软件测试概述"></a>软件测试概述</h3><ul>
<li><p>1、软件测试的目的是要发现和纠正代码中的错误。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、程序调试是软件测试的工作之一</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、以下活动哪些需要运行程序代码。</p>
<p>A、代码走查</p>
<p><strong>B、调试</strong></p>
<p><strong>C、测试</strong></p>
<p>D、静态分析</p>
</li>
<li><p>4、软件测试的对象是程序代码，而非软件文档。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>1、软件测试是如何发现软件中的缺陷的。</p>
<p>A、程序代码能够对测试数据进行处理</p>
<p>B、程序代码处理测试数据时不会报错</p>
<p><strong>C、程序处理测试数据的结果与预期结果不一致</strong></p>
<p>D、程序处理测试数据不会出现异常</p>
</li>
<li><p>2、软件测试用例实际上就是一组测试数据。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、软件测试可以通过穷尽所有的测试用例来发现程序代码中的所有缺陷。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>4、关于测试用例的描述，以下哪些是正确的。</p>
<p>A、测试用例就是一组测试数据</p>
<p><strong>B、测试用例刻画了针对特定的输入数据和前置条件，程序代码的预期运行结果</strong></p>
<p><strong>C、一个程序代码的测试用例理论上有无穷多个</strong></p>
<p><strong>D、测试用例必须交给待测试的代码进行处理</strong></p>
</li>
</ul>
<h3 id="软件测试的过程和策略"><a href="#软件测试的过程和策略" class="headerlink" title="软件测试的过程和策略"></a>软件测试的过程和策略</h3><ul>
<li><p>1、软件测试工作都由软件测试人员来完成。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、软件测试工作贯穿于软件开发全过程。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、在软件开发的早期阶段（需求分析和软件设计阶段），软件测试人员就可以开展软件测试工作。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>1、以下哪个软件测试的次序是正确的。</p>
<p>A、系统测试、确认测试、集成测试、单元测试</p>
<p>B、系统测试、集成测试、确认测试、单元测试</p>
<p><strong>C、单元测试、集成测试、确认测试、系统测试</strong></p>
<p>D、单元测试、确认测试、集成测试、系统测试</p>
</li>
<li><p>2、α测试、β测试属于确认测试。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h3 id="软件测试技术"><a href="#软件测试技术" class="headerlink" title="软件测试技术"></a>软件测试技术</h3><ul>
<li><p>1、白盒测试技术通常用于集成测试和确认测试阶段，黑盒测试通常用于单元测试阶段。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、如果某个测试技术实现路径覆盖，那么它也就能实现基本路径覆盖。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、以下是某个程序模块的流图。该模块包含有多少条基本路径。其中，1是入口，7是出口。 <img src="https://note.youdao.com/yws/api/personal/file/WEB750704ff5492703f561ae46c89bdd478?method=download&shareKey=962fc6c020810b803decc736f51c7220" alt=" 程序模块 "></p>
<p>A、1条</p>
<p>B、2条</p>
<p><strong>C、3条</strong></p>
<p>D、4条</p>
</li>
</ul>
<blockquote>
<h4 id="白盒测试技术"><a href="#白盒测试技术" class="headerlink" title="白盒测试技术"></a>白盒测试技术</h4><p>    该测试技术的前提是知道软件模块（如类方法）的内部实现细节（如其实现算法及相应的活动图）。在此情况下，针对该软件模块设计和运行测试用例，测试软件模块的运行是否正常，能否满足设计要求。单元测试通常采用白盒测试技术，基本路径测试是一类典型的白盒测试技术。</p>
<h4 id="黑盒测试技术"><a href="#黑盒测试技术" class="headerlink" title="黑盒测试技术"></a>黑盒测试技术</h4><p>    该测试技术的前提是已知软件模块（如构件、子系统甚至整个软件系统）的功能（如用户登录、异常告警等），但是不知道该软件模块的内部实现细节（如其内部的控制流程和实现算法），这种情况下针对该软件模块设计和运行测试用例，测试软件模块的运行是否正常，能否满足用户的需求。通常，集成测试和确认测试大多采用黑盒测试技术，典型的黑盒测试技术包括等价分类法和边界取值法。</p>
</blockquote>
<ul>
<li><p>1、以下是某个程序模块的流图。该模块包含那几条基本路径。其中，1是入口，7是出口。</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB750704ff5492703f561ae46c89bdd478?method=download&shareKey=962fc6c020810b803decc736f51c7220" alt=" 程序流图 "></p>
<p><strong>A、1-2-3-5-7,1-2-4-5-7,1-2-4-5-6-2-3-5-7</strong></p>
<p>B、1-2-3-5-7，1-2-4-5-6-7</p>
<p>C、1-2-4-5-7,1-2-3-5-7</p>
<p>D、1-2-4-5-6-7,1-2-3-5-7</p>
</li>
<li><p>2、如果某个模块有二个参数，参数1对应于一个集合，参数2对应于一个布尔量，那么采用等价分类法，可为该模块设计多少个测试用例。</p>
<p>A、2个</p>
<p>B、3个</p>
<p><strong>C、4个</strong></p>
<p>D、5个</p>
</li>
<li><p>3、边界取值法是一类黑盒技术，用于支持单元测试。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
</ul>
<h3 id="软件测试计划的制定"><a href="#软件测试计划的制定" class="headerlink" title="软件测试计划的制定"></a>软件测试计划的制定</h3><ul>
<li><p>1、软件测试工程师独立于软件开发工程师。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、软件测试组织负责制定软件测试计划。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h2 id="第十五章-软件部署"><a href="#第十五章-软件部署" class="headerlink" title="第十五章 软件部署"></a>第十五章 软件部署</h2><h3 id="软件及其环境"><a href="#软件及其环境" class="headerlink" title="软件及其环境"></a>软件及其环境</h3><ul>
<li><p>1、软件的运行环境既可以是物理设备，也可以是软件系统。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、运行在Android手机上的“12306”APP，其运行环境包括哪些。</p>
<p><strong>A、Android</strong></p>
<p><strong>B、手机</strong></p>
<p><strong>C、“12306”服务器端软件</strong></p>
<p><strong>D、移动互联网</strong></p>
</li>
<li><p>3、部署在Android手机上的“微信”APP，其运行环境包括哪些。</p>
<p><strong>A、Android</strong></p>
<p><strong>B、手机</strong></p>
<p><strong>C、“微信”服务器端软件</strong></p>
<p><strong>D、移动互联网</strong></p>
</li>
</ul>
<h3 id="软件部署的方式和方法"><a href="#软件部署的方式和方法" class="headerlink" title="软件部署的方式和方法"></a>软件部署的方式和方法</h3><ul>
<li><p>1、软件部署既包括部署和配置运行环境，也包括部署和配置软件系统。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、微信软件采用集中式部署方式。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、“12306”软件采用分布式部署方式。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h2 id="第十六章-软件维护和演化"><a href="#第十六章-软件维护和演化" class="headerlink" title="第十六章 软件维护和演化"></a>第十六章 软件维护和演化</h2><ul>
<li><p>1、软件维护有哪些基本的形式。</p>
<p><strong>A、纠正性、完善性、适应性、预防性维护</strong></p>
<p>B、纠正性、完善性、演化性、预防性维护</p>
<p>C、演化性、完善性、适应性、预防性维护</p>
<p>D、纠正性、完善性、适应性、演化性维护</p>
</li>
<li><p>2、哪种软件维护形式不改变软件系统的基本功能。</p>
<p>A、完善性</p>
<p>B、纠正性</p>
<p>C、适应性</p>
<p><strong>D、预防性</strong></p>
</li>
<li><p>3、在开源软件开发过程中，某个开发者提出了某个Issue以建议增加某项功能，并为此提供代码，该项工作属于何种维护形式。</p>
<p>A、预防性</p>
<p><strong>B、完善性</strong></p>
<p>C、纠正性</p>
<p>D、适应性</p>
</li>
<li><p>1、开源软件的开发过程实际上就是一个持续维护和演化的过程。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、在对软件进行维护和演化时，必须停止软件对外提供服务。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、与软件维护相比较，软件演化有何特点。</p>
<p><strong>A、软件演化功能增强的粒度大，会引起软件版本的变化</strong></p>
<p><strong>B、软件演化持续进行，并且采用主动的方式来应对变化</strong></p>
<p>C、软件演化的持续时间长、会引起版本的变化</p>
<p>D、软件演化持续进行，且持续的时间更长</p>
</li>
</ul>
<h3 id="软件逻辑老化"><a href="#软件逻辑老化" class="headerlink" title="软件逻辑老化"></a>软件逻辑老化</h3><ul>
<li><p>1、软件不存在物理老化的问题，但是存在逻辑老化的现象。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、软件逻辑老化具有哪些方面的表现形式。</p>
<p><strong>A、质量下降</strong></p>
<p><strong>B、变更成本增加</strong></p>
<p><strong>C、用户满意度降低</strong></p>
<p><strong>D、维护更加困难</strong></p>
</li>
<li><p>3、导致逻辑老化的原因有哪些。</p>
<p><strong>A、软件外部环境的变化</strong></p>
<p><strong>B、软件设计低劣</strong></p>
<p><strong>C、代码质量低劣</strong></p>
<p><strong>D、文档没有得到及时更新</strong></p>
</li>
<li><p>4、如果一个软件的价值较高，但是内部质量较低，此时该采取什么策略来解决该软件的老化问题。</p>
<p>A、抛弃该软件</p>
<p>B、不断增强该软件的功能</p>
<p><strong>C、对软件进行重工程，以提高软件的内部质量</strong></p>
<p>D、仅提供纠正性维护，不再实施完善性维护</p>
</li>
</ul>
<h3 id="软件维护技术及过程"><a href="#软件维护技术及过程" class="headerlink" title="软件维护技术及过程"></a>软件维护技术及过程</h3><ul>
<li><p>1、软件维护可能会产生副作用问题，导致软件质量下降。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、以下哪些维护技术不改变软件系统的功能。</p>
<p><strong>A、代码重构</strong></p>
<p>B、完善性维护</p>
<p><strong>C、设计重构</strong></p>
<p><strong>D、再工程</strong></p>
</li>
<li><p>3、根据程序代码（包括源代码和可执行代码）得到软件的设计信息，该项工作属于逆向工程和设计重构。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>1、根据程序代码（包括源代码和可执行代码）和设计文档得到软件的需求信息，该项工作属于逆向工程和设计重构。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、软件再工程的目的是在不改变软件功能的前提下，得到质量更高的软件系统。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、如果软件维护过程中能够获得软件系统的设计文档，在此情况下软件维护人员需要开展哪些方面的维护工作。</p>
<p>A、阅读代码以理解软件的设计信息</p>
<p><strong>B、阅读文档以理解软件的设计信息</strong></p>
<p><strong>C、修改软件设计文档以进行软件维护</strong></p>
<p><strong>D、修改程序代码以进行软件维护</strong></p>
</li>
</ul>
<h2 id="第十七章-软件项目管理"><a href="#第十七章-软件项目管理" class="headerlink" title="第十七章 软件项目管理"></a>第十七章 软件项目管理</h2><h3 id="软件项目管理概述"><a href="#软件项目管理概述" class="headerlink" title="软件项目管理概述"></a>软件项目管理概述</h3><ul>
<li><p>1、任何两个软件项目都不一样，软件项目具有唯一性。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、软件项目管理主要包含哪些方面的管理对象。</p>
<p>A、人员、制品、薪酬</p>
<p><strong>B、人员、制品、过程</strong></p>
<p>C、制品、薪酬、过程</p>
<p>D、薪酬、人员、过程</p>
</li>
<li><p>3、对各类软件模型、文档、原型、代码、数据等的管理属于软件制品管理的范畴。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>1、对人员、过程和制品等的管理均涉及风险管理的内容。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、关于软件度量、测量和估算的描述，哪些是正确的。</p>
<p><strong>A、度量是对简单属性的定量描述，测量和估算是对复杂属性的描述。</strong></p>
<p><strong>B、测量是对当前状况的定量描述，估算是未来状况的定量描述。</strong></p>
<p>C、测量是未来状况的定量描述，估算是对当前状况的定量描述。</p>
<p><strong>D、它们均是对软件过程、产品和资源等项目特征的定量描述。</strong></p>
</li>
<li><p>3、可以基于代码行数量、功能点的数量等来测量和估算软件项目的规模。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>1、在项目实施之前，可以参照历史数据、经验模型、类比等方式来估算软件项目的规模。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、在项目实施之前，有必要通过对软件项目进行估算，以辅助合同的签署以及软件项目计划的制定。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、在项目实施过程中，有必要通过对软件项目进行度量和测量，以掌握软件开发的实际情况。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>4、由于软件项目的唯一性，任何一个项目的度量、测量和估算数据对其他的项目而言没有任何参考意义和价值。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
</ul>
<h3 id="软件项目计划"><a href="#软件项目计划" class="headerlink" title="软件项目计划"></a>软件项目计划</h3><ul>
<li><p>1、软件项目计划包含哪些方面的规划。</p>
<p><strong>A、进度计划</strong></p>
<p><strong>B、质量计划</strong></p>
<p><strong>C、资源计划</strong></p>
<p>D、活动计划</p>
</li>
<li><p>2、软件项目计划用于指导后续的软件开发工作。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、可以用什么样的图来表示软件项目计划。</p>
<p>A、UML图</p>
<p><strong>B、甘特图</strong></p>
<p>C、数据流图</p>
<p><strong>D、网络图</strong></p>
</li>
<li><p>4、软件项目进度计划所包含的关键路径可能有多条。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>1、制定软件项目计划时要考虑哪些方面的内容和因素。</p>
<p><strong>A、项目所采用的过程模型</strong></p>
<p><strong>B、软件项目的工作量和成本等估算</strong></p>
<p><strong>C、项目已有的资源（如人力资源）</strong></p>
<p><strong>D、客户或用户对项目提出的具体要求</strong></p>
</li>
<li><p>2、必须要基于项目的估算来制定软件项目计划。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、软件项目计划所涉及的所有人员都应参与软件项目计划的制定，以确保他们就计划的内容达成一致意见，并掌握和承诺软件项目计划的相关内容。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h3 id="软件项目跟踪"><a href="#软件项目跟踪" class="headerlink" title="软件项目跟踪"></a>软件项目跟踪</h3><ul>
<li><p>1、软件项目跟踪需要关注哪些方面的内容。</p>
<p><strong>A、进度偏差</strong></p>
<p><strong>B、资源使用情况</strong></p>
<p>C、软件规模</p>
<p><strong>D、项目实施问题和风险</strong></p>
</li>
<li><p>2、所有项目组成员都要加入到软件项目跟踪小组，并对软件项目进行跟踪。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>3、软件项目需要对照软件项目计划来开展。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>1、软件项目追踪的目的是要获得软件项目的可视性，掌握软件项目的实际状况和问题。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、应周期性或者定期地进行软件项目追踪。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h3 id="软件配置管理"><a href="#软件配置管理" class="headerlink" title="软件配置管理"></a>软件配置管理</h3><ul>
<li><p>1、软件开发过程中会产生大量不同形式、不同类别的软件制品。所有这些软件制品都需要进行配置管理。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、软件文档、程序模块、测试用例甚至标准和规约都可作为软件配置项。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、软件配置管理应该贯穿于软件开发全过程。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>4、关于软件基线，以下哪些说法是正确的。</p>
<p><strong>A、软件基线是一个软件制品</strong></p>
<p><strong>B、软件基线是一个软件配置项</strong></p>
<p>C、软件基线不可对它进行修改</p>
<p><strong>D、软件基线必须通过正式复审和批准</strong></p>
</li>
<li><p>1、每个软件配置项都有一个唯一的标识符。同一个软件制品（如软件需求规格说明书）可能会有多个不同版本的软件配置项。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、以下关于软件配置项之间的关系，哪些陈述是正确的。</p>
<p><strong>A、任何软件配置项都不应是孤立的，否则这样的软件配置项没有意义和价值</strong></p>
<p>B、软件项目中可能会存在孤立的、与任何其他软件配置项没有关联关系的软件配置项</p>
<p><strong>C、如果二个软件配置项之间存在关联关系，那么对一个软件配置项的修改可能会影响另一个软件配置项。</strong></p>
<p>D、软件配置项及其之间的关系可以用树来加以表示。</p>
</li>
<li><p>3、可采用版本树来表示软件配置项的版本演化。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
<h3 id="软件风险管理"><a href="#软件风险管理" class="headerlink" title="软件风险管理"></a>软件风险管理</h3><ul>
<li><p>1、在软件开发过程中，已经发生的有害事件不能称为软件风险。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>2、软件风险具有哪些方面的特点。</p>
<p><strong>A、尚未发生但是可能会发生</strong></p>
<p><strong>B、给软件项目开发和管理带来不利影响</strong></p>
<p>C、软件风险一定会发生</p>
<p><strong>D、事先难以确定</strong></p>
</li>
<li><p>3、随着软件项目实施的进展，软件风险发生的概率以及危险度会发生变化。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>4、软件风险管理包含哪些方面的工作。</p>
<p><strong>A、识别风险、分析其危险度</strong></p>
<p><strong>B、持续观察和监控风险发生的变化</strong></p>
<p><strong>C、化解和消除软件风险</strong></p>
<p><strong>D、制定风险管理计划</strong></p>
</li>
</ul>
<h3 id="软件质量保证"><a href="#软件质量保证" class="headerlink" title="软件质量保证"></a>软件质量保证</h3><ul>
<li><p>1、软件可靠性是一类内在质量表现形式。</p>
<p>A、正确</p>
<p><strong>B、错误</strong></p>
</li>
<li><p>2、制定标准和规范有助于提高软件制品的质量。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>3、软件质量保证活动应该贯穿于软件开发全过程。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
<li><p>1、以下哪些属于软件质量保证活动。</p>
<p><strong>A、测试程序代码</strong></p>
<p><strong>B、审查开发活动</strong></p>
<p><strong>C、审核软件制品</strong></p>
<p><strong>D、组织人员培训</strong></p>
</li>
<li><p>2、软件质量保证小组应该在软件项目实施初期就制定好软件质量保证计划。</p>
<p><strong>A、正确</strong></p>
<p>B、错误</p>
</li>
</ul>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>Practices</tag>
      </tags>
  </entry>
  <entry>
    <title>软件需求工程作业</title>
    <url>/2023/01/10/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<p>教材为：《软件需求工程》<br>梁国平 毋国庆 袁梦霆 李勇华 编著</p>
<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h3><ol>
<li>对于软件需求的定义有多种形式，从软件用户多年来对软件的实际需求来看，软件的需求（或用户需求）通常可以大致分类如下：________________、________________、________________。</li>
</ol>
<p><strong>答案：</strong></p>
<p>业务需求、目标需求、功能需求、性能需求、约束与限制</p>
<h3 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h3><ol>
<li>进一步定制软件开发的细节问题，希望能使本软件开发工作更具体。为了使用户、软件开发者及分析和测试人员对该软件的初始规定有一个共同的理解，它说明了本软件的各项功能需求、性能需求和数据需求，明确标识各项功能的具体含义，阐述实用背景及范围，提供客户解决问题或达到目标所需要的条件或权能，提供一个度量和遵循的基准。请问编写软件需求说明的目的是？</li>
</ol>
<p><strong>答案：</strong> </p>
<p>a) 软件设计总体要求，作为软件开发人员、软件测试人员相互了解的基础。</p>
<p>b) 功能、性能要求，数据结构和采集要求，重要的接口要求，作为软件设计人员进行概要设计的依据。</p>
<p>c) 软件确认测试的依据。</p>
<h3 id="问答题"><a href="#问答题" class="headerlink" title="问答题"></a>问答题</h3><ol>
<li><p>需求工程是指应用已证实有效的技术、方法进行需求分析，确定客户需求，帮助分析人员理解问题并定义目标系统的所有外部特征的一门学科。它通过合适的工具和记号系统地描述待开发系统及其行为特征和相关约束，形成需求文档，并对用户不断变化的需求演进给予支持。RE可分为系统需求工程（如果是针对由软硬件共同组成的整个系统）和 软件需求工程（如果仅是专门针对纯软件部分）。 请你根据相关知识</p>
<p>1.概要出需求工程的任务。</p>
<p>2.需求可分为几种类型?</p>
</li>
</ol>
<p><strong>答案：</strong></p>
<ol>
<li></li>
</ol>
<p>(1)确定待开发的软件系统的用户类，并获取他们的需求信息；</p>
<p>(2)分析用户的需求信息，并按软件需求的类型对这些需求信息进行分类，同时，过滤掉不是需求的信息；</p>
<p>(3)根据软件需求信息建立软件系统的逻辑模型或需求模型，并确定非功能需求和约束条件及限制；</p>
<p>(4)根据收集的需求信息和逻辑模型编写需求规格说明及其文档；</p>
<p>(5)评审需求规格说明；</p>
<p>(6)当需求发生变更时，对需求规格说明及需求变更实施进行管理。</p>
<ol start="2">
<li></li>
</ol>
<p>业务需求、目标需求、功能需求、性能需求、约束与限制</p>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="填空题-1"><a href="#填空题-1" class="headerlink" title="填空题"></a>填空题</h3><ol>
<li>第一个写软件的人是Ada（Augusta Ada Lovelace）,在1860年代她尝试为 Babbage（Charles Babbage）的机械式计算机写软件。软件是一系列按照特定顺序组织的计算机数据和指令的集合。一般来讲软件被划分为__________、__________和介于这两者之间的__________。</li>
</ol>
<p><strong>答案：</strong></p>
<p>系统软件 ；应用软件 ； 中间件</p>
<h3 id="简答题-1"><a href="#简答题-1" class="headerlink" title="简答题"></a>简答题</h3><ol>
<li>需求工程是人们通过不断的认识和深入研究而形成的成果，它贯穿于软件系统的整个开发工作中，请简述需求工程对软件开发的影响：</li>
</ol>
<p><strong>答案</strong>：</p>
<p>1.需求是制订项目的基础。</p>
<p>2.需求工程所产生的最终产物是软件设计和软件实现的基础。</p>
<p>3.需求规格说明是测试工作和用户验收软件系统的依据。</p>
<p>4.需求规格说明是软件维护工作的依据。</p>
<h3 id="问答题-1"><a href="#问答题-1" class="headerlink" title="问答题"></a>问答题</h3><ol>
<li>敏捷模型是一种可快速应对需求变化的开发方法，非常适合于移动互联网时代用户需求快速迭代的项目。非营利组织敏捷联盟（Agile Alliance）一直致力于软件开发中敏捷化方法的推进与应用。试回答：</li>
</ol>
<p>（1）敏捷模型的特点是？</p>
<p>（2）应在何时使用敏捷模型？</p>
<p><strong>答案：</strong></p>
<p>（1）</p>
<ol>
<li>轻量、适应性强，能快速响应需求的变化。</li>
<li>支持快速编码，基于用户在实际使用中的检验结果，对于可能的错误能快速进行重构。</li>
<li>相比于瀑布模型、螺旋模型等传统开发模型，在系统内外部复杂因素增加时，项目开发的成功率更高。</li>
</ol>
<p>（2）</p>
<ol>
<li>需要频繁更改时。</li>
<li>有一支高素质和经验丰富的团队。</li>
<li>当客户准备好一直与软件团队开会时。</li>
<li>当项目规模较小时。</li>
</ol>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="填空题-2"><a href="#填空题-2" class="headerlink" title="填空题"></a>填空题</h3><ol>
<li>用户对软件系统的非功能需求有很多，比如：______、______、______。</li>
</ol>
<p><strong>答案：</strong></p>
<p>可靠性、可扩充性、安全性、互操作性、健壮性、易使用性、可维护性、可移植性、可重用性。</p>
<h3 id="简答题-2"><a href="#简答题-2" class="headerlink" title="简答题"></a>简答题</h3><ol>
<li>需求获取是需求过程的早期活动，也是十分重要、最困难、最关键、最易出错和最需要交流的一步，请画出需求获取过程的流程图。</li>
</ol>
<p><strong>答案：</strong></p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEBf1914210e27a2d996b6bd7d08b3fcede?method=download&shareKey=3b1de97c244c1ae038d292da30f16320" alt="1674228233997"></p>
<p>根据需求的层次来区分哪些用户？</p>
<p><strong>答案：</strong></p>
<ol>
<li>提出目标需求的用户；</li>
<li>提出业务需求和功能需求的用户；</li>
<li>软件开发人员，主要是指系统分析员。</li>
</ol>
<h3 id="问答题-2"><a href="#问答题-2" class="headerlink" title="问答题"></a>问答题</h3><ol>
<li><p>王某是使用装有Windows98系统的PC用户，已有一年经验。他几乎每天使用PC向朋友发电子邮件，今天在发送了4封电子邮件后想切断PC电源。王某首先单击屏幕上的“开始”按钮，在显示出来的菜单中选择“关闭计算机”选项。在屏幕中央出现了与关闭计算机相关的对话框，询问用户是否真正关闭计算机，王某确认并单击关闭计算机的按钮。计算机在使屏幕变黑后，自动切断PC电源。请根据要求表示该场景。</p>
<p>(1)写出场景的执行者和执行者目的。</p>
<p>(2)请描述进入场景前系统状态。</p>
<p>(3)请写出动作和事件系列的范围。</p>
</li>
</ol>
<p><strong>答案：</strong></p>
<p>(1)执行者（用户）：王某。执行者目的：退出Windows98，并切断PC电源。</p>
<p>(2)进入场景前系统状态的描述：使用PC的经验是1年，几乎每天使用。另外，今日发送电子邮件的工作已结束。</p>
<p>(3)动作和事件系列：题目中从单击”开始“按钮到切断PC电源的事件完成为止。</p>
<h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="填空题-3"><a href="#填空题-3" class="headerlink" title="填空题"></a>填空题</h3><ol>
<li>模型通常不仅与客观世界中某个特殊个体或现象相关,而且与许多甚至无限个个体相关。根据模型与客观世界的关系,模型可大致分为三类: _____________、_____________和_____________。</li>
</ol>
<p><strong>答案：</strong></p>
<p>描述性模型 ；规约性模型 ；探测性模型 ；</p>
<h3 id="简答题-3"><a href="#简答题-3" class="headerlink" title="简答题"></a>简答题</h3><ol>
<li>简述确定需求优先级的必要性</li>
</ol>
<p><strong>答案：</strong></p>
<p>划分优先级可以帮助项目相关人员判断系统的核心需求,并有助于项目相关人员集中于重点问题的交流和协商,特别是涉及需求风险分析的时候。</p>
<h3 id="问答题-3"><a href="#问答题-3" class="headerlink" title="问答题"></a>问答题</h3><ol start="2">
<li><p>欲开发一个银行的活期存取款业务的处理系统：储户将填好的存&#x2F;取款单和存折交给银行工作人员，然后由系统作以下处理； </p>
<p>(1)业务分类处理：系统首先根据储户所填的存&#x2F;取款单，确定本次业务的性质，并将存&#x2F;取款单和存折交下一步处理； </p>
<p>(2)存款处理：系统将存款单上的存款金额分别记录在存折和帐目文件中，并将现金存入现金库；最后将存折还给储户； </p>
<p>(3)取款处理：系统将取款单上的取款金额分别记录在存折和帐目文件中，并从现金库提取现金；最后将现金和存折还给储户。</p>
<p>a)请画出该系统的0层数据流图。</p>
<p>b)请画出该系统的1层数据流图。</p>
</li>
</ol>
<p><strong>答案：</strong></p>
<p>(1)</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB075a35c5a04bcc6e0caadfeb296f32e3?method=download&shareKey=001742d0ea914cd32dade3c07e7c304c" alt="img"></p>
<p>(2)</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB79cc0045d40c0844799aa927aac60d8c?method=download&shareKey=e4c3880e6dfd148d3576aee99428aaee" alt="img"></p>
<h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><h3 id="填空题-4"><a href="#填空题-4" class="headerlink" title="填空题"></a>填空题</h3><ol>
<li>软件工程中有大量的模型，这些模型的作用和风格以及使用的符号都是不一样的，有的是______，有的是______或______。</li>
</ol>
<p><strong>答案：</strong></p>
<p>形式化的，半形式化的，非形式化的</p>
<h3 id="简答题-4"><a href="#简答题-4" class="headerlink" title="简答题"></a>简答题</h3><ol>
<li>结构化分析(Structured Analysis，简称SA 法)方法是面向数据流的需求分析方法，是70 年代末由Yourdon,Constaintine 及DeMarco 等人提出和发展，并得到广泛的应用。它适合于分析大型的数据处理系统，特别是企事业管理系统。请简述SA方法的分析步骤。</li>
</ol>
<p><strong>答案：</strong></p>
<ol>
<li>理解和分析当前的现实环境，以获得当前系统的具体模型。</li>
<li>建立当前系统的逻辑模型。</li>
<li>建立目标系统的逻辑模型。</li>
<li>进一步完善目标系统的逻辑模型。</li>
</ol>
<p>﻿</p>
<h3 id="问答题-4"><a href="#问答题-4" class="headerlink" title="问答题"></a>问答题</h3><ol start="7">
<li>结构化分析(Structured Analysis，简称SA 法)是面向数据流的需求分析方法，是70年代由Yourdon,Constaintine 及DeMarco 等人提出和发展，并得到广泛的应用。结构化分析方法的基本思想是“分解”和“抽象”，如图在需求工程与UML课堂中老师提供流程图，为SA方法的分析步骤：</li>
</ol>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB9bc6de8d4c18ed75250a442d74db29ec?method=download&shareKey=fb135181363992ec9567e8bf852a66b2" alt="img"></p>
<p>根据图片 回答以下问题：</p>
<p>（1）在第一个步骤中，软件开发人员在获取的需求信息的基础上，利用________将现实环境中的人工系统表达出来</p>
<p>（2） 在第三个步骤中，主要工作是什么？</p>
<p>（3）最后一个步骤同样很关键，完善的工作也要细致，请问完善的工作大致为？</p>
<p><strong>答案：</strong></p>
<p>（1）DFD</p>
<p>（2）主要是分析目标系统与当前系统在逻辑模型的差别，并建立目标系统的逻辑模型</p>
<p>（3）</p>
<ol>
<li>至今尚未说明的处理细节，如出错处理，系统的启动和结束方式</li>
<li>某些需要的输入&#x2F;输出格式或用户界面的说明</li>
<li>增加性能需求和其他一些约束限制等</li>
</ol>
<h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><h3 id="填空题-5"><a href="#填空题-5" class="headerlink" title="填空题"></a>填空题</h3><ol>
<li>在需求规格说明中，出现“被说明的客观世界中对象特性间发生矛盾”的情况，说明该需求规格说明缺少_________________的特性。</li>
</ol>
<p><strong>答案：</strong></p>
<p>一致性</p>
<h3 id="简答题-5"><a href="#简答题-5" class="headerlink" title="简答题"></a>简答题</h3><ol>
<li>需求规格说明是整个需求工程活动的最终输出，并以文档的形式给出所有用户需求和需求模型，在 需求过程中起到非常重要的作用，请简单描述编写需求规格说明应注意哪些细节。</li>
</ol>
<p><strong>答案：</strong></p>
<ol>
<li>保持语句和段落的简短，尽量避免将多个需求集中于一个冗长的语句和段落中。</li>
<li>最好采用主谓宾的表达方式，并使用正确的语法和标点符号</li>
<li>使用的术语应与词汇表中所定义的一致。</li>
</ol>
<h3 id="问答题-5"><a href="#问答题-5" class="headerlink" title="问答题"></a>问答题</h3><ol>
<li><p>需求规格说明书：是从业务规则讲起的，细一点偏向于软件的概要设计。 是从开发、测试的角度去讲产品功能，里面要包含原型界面、业务接口、活动图等。请问</p>
<p>【1】软件需求规格说明书有什么内容？</p>
<p>【2】需求规格说明的作用主要体现在哪些哪几个方面？</p>
</li>
</ol>
<p><strong>答案：</strong></p>
<p>【1】</p>
<p>（1）功能需求</p>
<p>（2）性能需求</p>
<p>（3）外部接口</p>
<p>（4）属性</p>
<p>（5）约束条件</p>
<p>【2】</p>
<ol>
<li>需求规格说明是软件设计和实现的基础。</li>
<li>需求规格说明是测试和用户验收软件系统的重要依据。</li>
<li>需求规格说明能为软件维护提供重要的信息。</li>
</ol>
<h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h2><h3 id="填空题-6"><a href="#填空题-6" class="headerlink" title="填空题"></a>填空题</h3><ol start="8">
<li>Z是牛津大学提出的一种基于集合论与一介逻辑的形式化规格说明语言，也称为Z语言。在Z的数学符号中的常用集合有_______ 、______ 、_______。</li>
</ol>
<p><strong>答案：</strong></p>
<p>自然数集合，整数集合，实数集合</p>
<h3 id="简答题-6"><a href="#简答题-6" class="headerlink" title="简答题"></a>简答题</h3><ol start="5">
<li>LOTOS是一种标准的形式化描述方法，主要应用于通信系统以及分布式系统的规约。那么设计LOTOS的主要目的是什么？</li>
</ol>
<p><strong>答案：</strong></p>
<p>设计LOTOS的主要目的是建立一种高度抽象且具有强大数学基础的语言，可以用于分析和描述复杂的系统。</p>
<h3 id="问答题-6"><a href="#问答题-6" class="headerlink" title="问答题"></a>问答题</h3><ol start="2">
<li><p>欧洲开展推进把形式化规格说明技术应用于实际的软件开发中的工作比较活跃，特别是从企业应用的角度来看，严格的规格说明等正在受到重视。</p>
<p>（1）目前把形式化规格说明应用于软件开发工作中的形式有哪两种？</p>
<p>（2）画出任意一种形式的过程图。</p>
</li>
</ol>
<p><strong>答案：</strong></p>
<p>（1）</p>
<ol>
<li>规格说明变换；</li>
<li>规格说明执行</li>
</ol>
<p>（2）</p>
<p>1. </p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB52aded97eb19d5c495c04fb83318d7d4?method=download&shareKey=1e6a823c4e170ab399b88860ec3c6977" alt="img"></p>
<p>2. </p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB380f88e226e482f6728957e7d28484dc?method=download&shareKey=93e6535b4e8ea1e8e06b899971e248e9" alt="img"></p>
<h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><h3 id="填空题-7"><a href="#填空题-7" class="headerlink" title="填空题"></a>填空题</h3><ol start="4">
<li>当软件需求规格说明文档满足审查标准时，就可以决定进入正式审查的筹备阶段。在这一阶段我们需要做的是__________，___________，_________，_________，修改，重审</li>
</ol>
<p><strong>答案：</strong></p>
<p>筹备；总体会议；准备；审查会议</p>
<h3 id="简答题-7"><a href="#简答题-7" class="headerlink" title="简答题"></a>简答题</h3><ol start="21">
<li>资深软件工程师都知道，当以SRS为基础进行后续开发工作，如果在开发后期或在交付系统之后才发现需求存在问题，这时修补需求错误就需要做大量的工作。相对而言，在系统分析阶段，检测SRS中的错误所采取的任何措施都将节省相当多的时间和资金。因此，有必要对于SRS的正确性进行验证，以确保需求符合良好特征。需求验证也称为需求确认，其活动是为了确定哪五个方面的内容？</li>
</ol>
<p><strong>答案：</strong></p>
<p>(1) SRS正确地描述了预期的、满足项目干系人需求的系统行为和特征。</p>
<p>(2) SRS中的软件需求是从系统需求、业务规格和其他来源中正确推导而来的。</p>
<p>(3)需求是完整的和高质量的。</p>
<p>(4)需求的表示在所有地方都是一致的。</p>
<p>(5)需求为继续进行系统设计、实现和测试提供了足够的基础。</p>
<h3 id="问答题-7"><a href="#问答题-7" class="headerlink" title="问答题"></a>问答题</h3><ol start="6">
<li>在需求工程领域中，如何检测和验证目标软件的需求是相当困难而又重要的工作。通过多年的研究和实践，软件需求检测和验证理论以及技术已取得了不小的成果和进步。其中，将可视化技术与形式化需求验证方法相结合就是一种方法。</li>
</ol>
<p>（1）什么是可视化？</p>
<p>（2）这种方法有什么好处？</p>
<p><strong>答案：</strong></p>
<p>（1）可视化是指使用图形、图像或者图片等技术，使一些不可见的对象、表达或者抽象概念变成可见的符号。</p>
<p>（2）能够获取有效的用户反馈，提高需求分析的效率，减少软件开发成本。</p>
<h2 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h2><h3 id="填空题-8"><a href="#填空题-8" class="headerlink" title="填空题"></a>填空题</h3><ol start="19">
<li>早在2000年，CollabNet, Inc.就开始召集开发人员开发CVS的替代品。CollabNet 提供一套名为SourceCast协同工作套件，其中的一部分组件就是版本控制。在实施版本控制时，每个版本的需求规格说明必须是_____的，以避免新旧版本的混淆。</li>
</ol>
<p><strong>答案：</strong></p>
<p>独立说明</p>
<h3 id="简答题-8"><a href="#简答题-8" class="headerlink" title="简答题"></a>简答题</h3><ol start="8">
<li>需求变更主要涉及哪两个方面</li>
</ol>
<p><strong>答案：</strong></p>
<ol>
<li>需求变更会对系统内部产生影响，而不影响其他需求。</li>
<li>会在原有软件需求的基础上提出扩充系统功能的需求。</li>
</ol>
<h3 id="问答题-8"><a href="#问答题-8" class="headerlink" title="问答题"></a>问答题</h3><ol start="8">
<li>需求跟踪是指跟踪一个需求使用期限的全过程，需求跟踪包括编制每个需求同系统元素之间的联系文档，这些元素包括其他类型的需求，体系结构，其他设计部件，源代码模块，测试，帮助文件等。需求跟踪的目的是建立与维护“需求－设计－编程－测试”之间的一致性，确保所有的工作成果符合用户需求。如图，</li>
</ol>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB03cf93e7b269ece718fe5b2cd48a6585?method=download&shareKey=aeb9aa79deb82bb4d08432b09ad48969" alt="img"></p>
<p>请问：</p>
<p>（1）需求跟踪有哪两种跟踪方式？</p>
<p>（2）整个开发项目中，使用需求跟踪的好处有哪些？</p>
<p><strong>答案：</strong></p>
<p>（1）正向跟踪和反向跟踪。</p>
<p>（2）</p>
<ol>
<li><p>在需求的增加、删除和更改中，可以确保不忽略每个受到影响的系统元素；</p>
</li>
<li><p>可靠的可跟踪性信息能正确地实施变更，提高了生产率；</p>
</li>
<li><p>支持可重用技术。</p>
</li>
</ol>
<h2 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h2><h3 id="填空题-9"><a href="#填空题-9" class="headerlink" title="填空题"></a>填空题</h3><ol start="7">
<li>从需求中归纳出系统中的行为主体不仅仅包括使用系统的_________________，还包括一切参与到行为中的_________________和_________________等。</li>
</ol>
<p><strong>答案：</strong></p>
<p>用户  实体  概念</p>
<h3 id="简答题-9"><a href="#简答题-9" class="headerlink" title="简答题"></a>简答题</h3><ol>
<li>标识视点是多视点需求工程的首要任务，请问每个问题子域标识视点的具体步骤有哪些</li>
</ol>
<p><strong>答案</strong> </p>
<ol>
<li>分析并确定该问题子域中存在的需求源（即视点源）</li>
<li>确定每个视点源对问题子域的关注点 </li>
<li>根据关注点创建视点，生成视点模板 </li>
<li>填写视点基本信息，如视点标识、视点负责人等</li>
</ol>
<h3 id="问答题-9"><a href="#问答题-9" class="headerlink" title="问答题"></a>问答题</h3><ol>
<li>在实际生活中，互联网等企业的产品经理获取用户的需求后，需要对需求建立模型。将一个抽象的，大概的业务或者产品需求，一步步抽丝剥茧，使之具体化，用一整套文档来描述这个产品需求因何而来，需求如何实现，系统如何响应用户的请求等。而在需求建模的过程中，各视点是相对独立的，但不同视点间的需求信息可能会发生重叠。请问：</li>
</ol>
<p>（1）这种视点间需求信息发生重叠的现象可能会导致什么后果？</p>
<p>（2）在形成最终需求规格说明之前我们应该如何处理完善？</p>
<p><strong>答案：</strong></p>
<p>（1）由不同视点产生的需求模型间会产生重叠和差异，从而可能会导致需求模型间出现需求冲突和不一致，有些视点可能使用不同的需求建模方法和技术构建需求模型,也会增加视点间发生需求冲突和不一致的可能性。</p>
<p>（2）在形成最终需求规格说明之前,必须检测和处理视点间存在的需求冲突和不一致问题,以保证复杂系统需求的正确性和一致性。</p>
<h2 id="第十一章"><a href="#第十一章" class="headerlink" title="第十一章"></a>第十一章</h2><h3 id="填空题-10"><a href="#填空题-10" class="headerlink" title="填空题"></a>填空题</h3><ol start="4">
<li>描述域与域间关系的现象可分为事件、实体、值、状态、真值和角色这六种类型，除可按以上方式对现象进行分类外，还可以将它们分为_______和_______两大类型。</li>
</ol>
<p><strong>答案：</strong></p>
<p>因果现象      符号现象</p>
<h3 id="简答题-10"><a href="#简答题-10" class="headerlink" title="简答题"></a>简答题</h3><ol start="10">
<li>形式上的两个问题框架实例间的关系可分为三种类型，试说出其中两种。</li>
</ol>
<p><strong>答案：</strong></p>
<p>无关，具有公共的域，一个问题框架实例的需求是另一个问题框架中的域。</p>
<h3 id="问答题-10"><a href="#问答题-10" class="headerlink" title="问答题"></a>问答题</h3><ol start="5">
<li><p>20世90年代中期开始，M.Jackson和P.Zave等人在详细讨论和分析传统的结构化需求分析方法和面向对象需求分析方法的基础上，对需求工程的本质进行了深人的思考。他们认为软件问题的本质是配置的机器M,在相关的域D内产生期望的效果B，机器M是可运行程序的计算机，包括输人&#x2F;输出设备；期望的效果R即用户需求；与问题相关的域D就是问题所处的客观世界。问题域是定义用户需求的前提，因为用户需求与所处的客观世界紧密相关，仅依赖机器本身难以产生预期的效果。由此可见：</p>
<p>(1)什么是问题域？</p>
<p>(2)什么是需求工程的本质？</p>
</li>
</ol>
<p><strong>答案：</strong></p>
<p>(1)所谓问题域是指与问题相关的部分现实世界。</p>
<p>(2)需求工程的本质在于从待求解问题的角度，考虑待开发软件系统将在待求解问题相关的域内产生的效果。</p>
<h2 id="第十二章"><a href="#第十二章" class="headerlink" title="第十二章"></a>第十二章</h2><h3 id="填空题-11"><a href="#填空题-11" class="headerlink" title="填空题"></a>填空题</h3><ol start="4">
<li>能否合理和全面地标识出与软件系统相关的所有_________________，防止_________________的遗漏，直接关系到多视点需求工程应用的实际效果。</li>
</ol>
<p><strong>答案：</strong></p>
<p>视点，重要信息。</p>
<h3 id="简答题-11"><a href="#简答题-11" class="headerlink" title="简答题"></a>简答题</h3><ol start="4">
<li>20世纪90年代开始，多视点需求工程的研究得到了极大的发展，在多视点需求工程的需求分析过程，每个阶段都有各自的任务，并且是相互独立的，围绕着问题和视点展开，请画出多视点需求模型。</li>
</ol>
<p><strong>答案：</strong></p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB5838a6a0d131d02701ce32d4e4c94190?method=download&shareKey=c7cbd6d6fc75914da333605f3e4dd2b2" alt="img"></p>
<h3 id="问答题-11"><a href="#问答题-11" class="headerlink" title="问答题"></a>问答题</h3><ol start="3">
<li><p>通常所有视点的需求间不应该有矛盾。但某厂员工在实际工作中发现，总有一些视点间存在矛盾，这就需要对所有的视点进行分析，以发现视点间不一致性的问题。请问：</p>
<p>（1）视点的分析工作分为两方面，请问是哪两个方面呢？</p>
<p>（2）在检查视点内需求时，我们可以用哪种方法呢？</p>
</li>
</ol>
<p><strong>答案：</strong></p>
<p>（1）</p>
<p>①视点内的需求与所涉及的问题是否一致.</p>
<p>②视点内需求与外部需求是否一致。</p>
<p>（2）矩阵</p>
<h2 id="第十三章"><a href="#第十三章" class="headerlink" title="第十三章"></a>第十三章</h2><h3 id="填空题-12"><a href="#填空题-12" class="headerlink" title="填空题"></a>填空题</h3><p>﻿6. 某公司的新开发人员由于缺乏经验，软件开发过程中总是偏离需求，严重影响公司效益。为此A公司痛定思痛，争取软件开发的结果能够一次性满足需求要求，以此来避免由于对软件系统或需求规格说明的重复修改，导致软件开发的_____ 和_____的大大增加的情况。</p>
<p><strong>答案：</strong></p>
<p>成本  时间</p>
<h3 id="简答题-12"><a href="#简答题-12" class="headerlink" title="简答题"></a>简答题</h3><ol>
<li>一名开发人员他的老板让他对一个软件进行规模估算，除了根据需求规格说明、系统模型、原型和用户界面还可考虑哪些因素？</li>
</ol>
<p><strong>答案：</strong></p>
<ol>
<li>功能点和特性点的多少 </li>
<li>图形用户界面的数量、类型  </li>
<li>实现功能的代码行</li>
</ol>
]]></content>
      <categories>
        <category>需求工程</category>
      </categories>
      <tags>
        <tag>Practices</tag>
      </tags>
  </entry>
</search>
